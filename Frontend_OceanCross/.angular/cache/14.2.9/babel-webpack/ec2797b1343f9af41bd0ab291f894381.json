{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JavaScriptOptimizerPlugin = void 0;\n\nconst piscina_1 = __importDefault(require(\"piscina\"));\n\nconst typescript_1 = require(\"typescript\");\n\nconst environment_options_1 = require(\"../../utils/environment-options\");\n\nconst esbuild_executor_1 = require(\"./esbuild-executor\");\n/**\n * The maximum number of Workers that will be created to execute optimize tasks.\n */\n\n\nconst MAX_OPTIMIZE_WORKERS = environment_options_1.maxWorkers;\n/**\n * The name of the plugin provided to Webpack when tapping Webpack compiler hooks.\n */\n\nconst PLUGIN_NAME = 'angular-javascript-optimizer';\n/**\n * A Webpack plugin that provides JavaScript optimization capabilities.\n *\n * The plugin uses both `esbuild` and `terser` to provide both fast and highly-optimized\n * code output. `esbuild` is used as an initial pass to remove the majority of unused code\n * as well as shorten identifiers. `terser` is then used as a secondary pass to apply\n * optimizations not yet implemented by `esbuild`.\n */\n\nclass JavaScriptOptimizerPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n\n  apply(compiler) {\n    var _this = this;\n\n    const {\n      OriginalSource,\n      SourceMapSource\n    } = compiler.webpack.sources;\n    compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {\n      const logger = compilation.getLogger('build-angular.JavaScriptOptimizerPlugin');\n      compilation.hooks.processAssets.tapPromise({\n        name: PLUGIN_NAME,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE\n      }, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (compilationAssets) {\n          logger.time('optimize js assets');\n          const scriptsToOptimize = [];\n          const cache = compilation.options.cache && compilation.getCache('JavaScriptOptimizerPlugin'); // Analyze the compilation assets for scripts that require optimization\n\n          for (const assetName of Object.keys(compilationAssets)) {\n            if (!assetName.endsWith('.js')) {\n              continue;\n            }\n\n            const scriptAsset = compilation.getAsset(assetName); // Skip assets that have already been optimized or are verbatim copies (project assets)\n\n            if (!scriptAsset || scriptAsset.info.minimized || scriptAsset.info.copied) {\n              continue;\n            }\n\n            const {\n              source: scriptAssetSource,\n              name\n            } = scriptAsset;\n            let cacheItem;\n\n            if (cache) {\n              const eTag = cache.getLazyHashedEtag(scriptAssetSource);\n              cacheItem = cache.getItemCache(name, eTag);\n              const cachedOutput = yield cacheItem.getPromise();\n\n              if (cachedOutput) {\n                logger.debug(`${name} restored from cache`);\n                compilation.updateAsset(name, cachedOutput.source, assetInfo => ({ ...assetInfo,\n                  minimized: true\n                }));\n                continue;\n              }\n            }\n\n            const {\n              source,\n              map\n            } = scriptAssetSource.sourceAndMap();\n            scriptsToOptimize.push({\n              name: scriptAsset.name,\n              code: typeof source === 'string' ? source : source.toString(),\n              map,\n              cacheItem\n            });\n          }\n\n          if (scriptsToOptimize.length === 0) {\n            return;\n          } // Ensure all replacement values are strings which is the expected type for esbuild\n\n\n          let define;\n\n          if (_this.options.define) {\n            define = {};\n\n            for (const [key, value] of Object.entries(_this.options.define)) {\n              define[key] = String(value);\n            }\n          }\n\n          let target = 2017;\n\n          if (_this.options.target) {\n            if (_this.options.target <= typescript_1.ScriptTarget.ES5) {\n              target = 5;\n            } else if (_this.options.target === typescript_1.ScriptTarget.ESNext) {\n              target = 'next';\n            } else {\n              target = Number(typescript_1.ScriptTarget[_this.options.target].slice(2));\n            }\n          } // Setup the options used by all worker tasks\n\n\n          const optimizeOptions = {\n            sourcemap: _this.options.sourcemap,\n            define,\n            keepNames: _this.options.keepNames,\n            keepIdentifierNames: _this.options.keepIdentifierNames,\n            target,\n            removeLicenses: _this.options.removeLicenses,\n            advanced: _this.options.advanced,\n            // Perform a single native esbuild support check.\n            // This removes the need for each worker to perform the check which would\n            // otherwise require spawning a separate process per worker.\n            alwaysUseWasm: !(yield esbuild_executor_1.EsbuildExecutor.hasNativeSupport())\n          }; // Sort scripts so larger scripts start first - worker pool uses a FIFO queue\n\n          scriptsToOptimize.sort((a, b) => a.code.length - b.code.length); // Initialize the task worker pool\n\n          const workerPath = require.resolve('./javascript-optimizer-worker');\n\n          const workerPool = new piscina_1.default({\n            filename: workerPath,\n            maxThreads: MAX_OPTIMIZE_WORKERS\n          }); // Enqueue script optimization tasks and update compilation assets as the tasks complete\n\n          try {\n            const tasks = [];\n\n            for (const {\n              name,\n              code,\n              map,\n              cacheItem\n            } of scriptsToOptimize) {\n              logger.time(`optimize asset: ${name}`);\n              tasks.push(workerPool.run({\n                asset: {\n                  name,\n                  code,\n                  map\n                },\n                options: optimizeOptions\n              }).then(({\n                code,\n                name,\n                map\n              }) => {\n                const optimizedAsset = map ? new SourceMapSource(code, name, map) : new OriginalSource(code, name);\n                compilation.updateAsset(name, optimizedAsset, assetInfo => ({ ...assetInfo,\n                  minimized: true\n                }));\n                logger.timeEnd(`optimize asset: ${name}`);\n                return cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.storePromise({\n                  source: optimizedAsset\n                });\n              }, error => {\n                const optimizationError = new compiler.webpack.WebpackError(`Optimization error [${name}]: ${error.stack || error.message}`);\n                compilation.errors.push(optimizationError);\n              }));\n            }\n\n            yield Promise.all(tasks);\n          } finally {\n            void workerPool.destroy();\n          }\n\n          logger.timeEnd('optimize js assets');\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    });\n  }\n\n}\n\nexports.JavaScriptOptimizerPlugin = JavaScriptOptimizerPlugin;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","JavaScriptOptimizerPlugin","piscina_1","require","typescript_1","environment_options_1","esbuild_executor_1","MAX_OPTIMIZE_WORKERS","maxWorkers","PLUGIN_NAME","constructor","options","apply","compiler","OriginalSource","SourceMapSource","webpack","sources","hooks","compilation","tap","logger","getLogger","processAssets","tapPromise","name","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","compilationAssets","time","scriptsToOptimize","cache","getCache","assetName","keys","endsWith","scriptAsset","getAsset","info","minimized","copied","source","scriptAssetSource","cacheItem","eTag","getLazyHashedEtag","getItemCache","cachedOutput","getPromise","debug","updateAsset","assetInfo","map","sourceAndMap","push","code","toString","length","define","key","entries","String","target","ScriptTarget","ES5","ESNext","Number","slice","optimizeOptions","sourcemap","keepNames","keepIdentifierNames","removeLicenses","advanced","alwaysUseWasm","EsbuildExecutor","hasNativeSupport","sort","a","b","workerPath","resolve","workerPool","default","filename","maxThreads","tasks","run","asset","then","optimizedAsset","timeEnd","storePromise","error","optimizationError","WebpackError","stack","message","errors","Promise","all","destroy"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@angular-devkit/build-angular/src/webpack/plugins/javascript-optimizer-plugin.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JavaScriptOptimizerPlugin = void 0;\nconst piscina_1 = __importDefault(require(\"piscina\"));\nconst typescript_1 = require(\"typescript\");\nconst environment_options_1 = require(\"../../utils/environment-options\");\nconst esbuild_executor_1 = require(\"./esbuild-executor\");\n/**\n * The maximum number of Workers that will be created to execute optimize tasks.\n */\nconst MAX_OPTIMIZE_WORKERS = environment_options_1.maxWorkers;\n/**\n * The name of the plugin provided to Webpack when tapping Webpack compiler hooks.\n */\nconst PLUGIN_NAME = 'angular-javascript-optimizer';\n/**\n * A Webpack plugin that provides JavaScript optimization capabilities.\n *\n * The plugin uses both `esbuild` and `terser` to provide both fast and highly-optimized\n * code output. `esbuild` is used as an initial pass to remove the majority of unused code\n * as well as shorten identifiers. `terser` is then used as a secondary pass to apply\n * optimizations not yet implemented by `esbuild`.\n */\nclass JavaScriptOptimizerPlugin {\n    constructor(options) {\n        this.options = options;\n    }\n    apply(compiler) {\n        const { OriginalSource, SourceMapSource } = compiler.webpack.sources;\n        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation) => {\n            const logger = compilation.getLogger('build-angular.JavaScriptOptimizerPlugin');\n            compilation.hooks.processAssets.tapPromise({\n                name: PLUGIN_NAME,\n                stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n            }, async (compilationAssets) => {\n                logger.time('optimize js assets');\n                const scriptsToOptimize = [];\n                const cache = compilation.options.cache && compilation.getCache('JavaScriptOptimizerPlugin');\n                // Analyze the compilation assets for scripts that require optimization\n                for (const assetName of Object.keys(compilationAssets)) {\n                    if (!assetName.endsWith('.js')) {\n                        continue;\n                    }\n                    const scriptAsset = compilation.getAsset(assetName);\n                    // Skip assets that have already been optimized or are verbatim copies (project assets)\n                    if (!scriptAsset || scriptAsset.info.minimized || scriptAsset.info.copied) {\n                        continue;\n                    }\n                    const { source: scriptAssetSource, name } = scriptAsset;\n                    let cacheItem;\n                    if (cache) {\n                        const eTag = cache.getLazyHashedEtag(scriptAssetSource);\n                        cacheItem = cache.getItemCache(name, eTag);\n                        const cachedOutput = await cacheItem.getPromise();\n                        if (cachedOutput) {\n                            logger.debug(`${name} restored from cache`);\n                            compilation.updateAsset(name, cachedOutput.source, (assetInfo) => ({\n                                ...assetInfo,\n                                minimized: true,\n                            }));\n                            continue;\n                        }\n                    }\n                    const { source, map } = scriptAssetSource.sourceAndMap();\n                    scriptsToOptimize.push({\n                        name: scriptAsset.name,\n                        code: typeof source === 'string' ? source : source.toString(),\n                        map,\n                        cacheItem,\n                    });\n                }\n                if (scriptsToOptimize.length === 0) {\n                    return;\n                }\n                // Ensure all replacement values are strings which is the expected type for esbuild\n                let define;\n                if (this.options.define) {\n                    define = {};\n                    for (const [key, value] of Object.entries(this.options.define)) {\n                        define[key] = String(value);\n                    }\n                }\n                let target = 2017;\n                if (this.options.target) {\n                    if (this.options.target <= typescript_1.ScriptTarget.ES5) {\n                        target = 5;\n                    }\n                    else if (this.options.target === typescript_1.ScriptTarget.ESNext) {\n                        target = 'next';\n                    }\n                    else {\n                        target = Number(typescript_1.ScriptTarget[this.options.target].slice(2));\n                    }\n                }\n                // Setup the options used by all worker tasks\n                const optimizeOptions = {\n                    sourcemap: this.options.sourcemap,\n                    define,\n                    keepNames: this.options.keepNames,\n                    keepIdentifierNames: this.options.keepIdentifierNames,\n                    target,\n                    removeLicenses: this.options.removeLicenses,\n                    advanced: this.options.advanced,\n                    // Perform a single native esbuild support check.\n                    // This removes the need for each worker to perform the check which would\n                    // otherwise require spawning a separate process per worker.\n                    alwaysUseWasm: !(await esbuild_executor_1.EsbuildExecutor.hasNativeSupport()),\n                };\n                // Sort scripts so larger scripts start first - worker pool uses a FIFO queue\n                scriptsToOptimize.sort((a, b) => a.code.length - b.code.length);\n                // Initialize the task worker pool\n                const workerPath = require.resolve('./javascript-optimizer-worker');\n                const workerPool = new piscina_1.default({\n                    filename: workerPath,\n                    maxThreads: MAX_OPTIMIZE_WORKERS,\n                });\n                // Enqueue script optimization tasks and update compilation assets as the tasks complete\n                try {\n                    const tasks = [];\n                    for (const { name, code, map, cacheItem } of scriptsToOptimize) {\n                        logger.time(`optimize asset: ${name}`);\n                        tasks.push(workerPool\n                            .run({\n                            asset: {\n                                name,\n                                code,\n                                map,\n                            },\n                            options: optimizeOptions,\n                        })\n                            .then(({ code, name, map }) => {\n                            const optimizedAsset = map\n                                ? new SourceMapSource(code, name, map)\n                                : new OriginalSource(code, name);\n                            compilation.updateAsset(name, optimizedAsset, (assetInfo) => ({\n                                ...assetInfo,\n                                minimized: true,\n                            }));\n                            logger.timeEnd(`optimize asset: ${name}`);\n                            return cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.storePromise({\n                                source: optimizedAsset,\n                            });\n                        }, (error) => {\n                            const optimizationError = new compiler.webpack.WebpackError(`Optimization error [${name}]: ${error.stack || error.message}`);\n                            compilation.errors.push(optimizationError);\n                        }));\n                    }\n                    await Promise.all(tasks);\n                }\n                finally {\n                    void workerPool.destroy();\n                }\n                logger.timeEnd('optimize js assets');\n            });\n        });\n    }\n}\nexports.JavaScriptOptimizerPlugin = JavaScriptOptimizerPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}