{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AngularWebpackPlugin = void 0;\n\nconst assert_1 = require(\"assert\");\n\nconst ts = __importStar(require(\"typescript\"));\n\nconst ngcc_processor_1 = require(\"../ngcc_processor\");\n\nconst paths_plugin_1 = require(\"../paths-plugin\");\n\nconst resource_loader_1 = require(\"../resource_loader\");\n\nconst cache_1 = require(\"./cache\");\n\nconst diagnostics_1 = require(\"./diagnostics\");\n\nconst host_1 = require(\"./host\");\n\nconst paths_1 = require(\"./paths\");\n\nconst symbol_1 = require(\"./symbol\");\n\nconst system_1 = require(\"./system\");\n\nconst transformation_1 = require(\"./transformation\");\n/**\n * The threshold used to determine whether Angular file diagnostics should optimize for full programs\n * or single files. If the number of affected files for a build is more than the threshold, full\n * program optimization will be used.\n */\n\n\nconst DIAGNOSTICS_AFFECTED_THRESHOLD = 1;\n\nfunction initializeNgccProcessor(compiler, tsconfig, compilerNgccModule) {\n  var _a, _b, _c;\n\n  const {\n    inputFileSystem,\n    options: webpackOptions\n  } = compiler;\n  const mainFields = (_c = (_b = (_a = webpackOptions.resolve) === null || _a === void 0 ? void 0 : _a.mainFields) === null || _b === void 0 ? void 0 : _b.flat()) !== null && _c !== void 0 ? _c : [];\n  const errors = [];\n  const warnings = [];\n  const resolver = compiler.resolverFactory.get('normal', {\n    // Caching must be disabled because it causes the resolver to become async after a rebuild\n    cache: false,\n    extensions: ['.json'],\n    useSyncFileSystemCalls: true\n  }); // The compilerNgccModule field is guaranteed to be defined during a compilation\n  // due to the `beforeCompile` hook. Usage of this property accessor prior to the\n  // hook execution is an implementation error.\n\n  assert_1.strict.ok(compilerNgccModule, `'@angular/compiler-cli/ngcc' used prior to Webpack compilation.`);\n  const processor = new ngcc_processor_1.NgccProcessor(compilerNgccModule, mainFields, warnings, errors, compiler.context, tsconfig, inputFileSystem, resolver);\n  return {\n    processor,\n    errors,\n    warnings\n  };\n}\n\nconst PLUGIN_NAME = 'angular-compiler';\nconst compilationFileEmitters = new WeakMap();\n\nclass AngularWebpackPlugin {\n  constructor(options = {}) {\n    this.fileDependencies = new Map();\n    this.requiredFilesToEmit = new Set();\n    this.requiredFilesToEmitCache = new Map();\n    this.fileEmitHistory = new Map();\n    this.pluginOptions = {\n      emitClassMetadata: false,\n      emitNgModuleScope: false,\n      jitMode: false,\n      fileReplacements: {},\n      substitutions: {},\n      directTemplateLoading: true,\n      tsconfig: 'tsconfig.json',\n      ...options\n    };\n  }\n\n  get compilerCli() {\n    // The compilerCliModule field is guaranteed to be defined during a compilation\n    // due to the `beforeCompile` hook. Usage of this property accessor prior to the\n    // hook execution is an implementation error.\n    assert_1.strict.ok(this.compilerCliModule, `'@angular/compiler-cli' used prior to Webpack compilation.`);\n    return this.compilerCliModule;\n  }\n\n  get options() {\n    return this.pluginOptions;\n  }\n\n  apply(compiler) {\n    const {\n      NormalModuleReplacementPlugin,\n      WebpackError,\n      util\n    } = compiler.webpack;\n    this.webpackCreateHash = util.createHash; // Setup file replacements with webpack\n\n    for (const [key, value] of Object.entries(this.pluginOptions.fileReplacements)) {\n      new NormalModuleReplacementPlugin(new RegExp('^' + key.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&') + '$'), value).apply(compiler);\n    } // Set resolver options\n\n\n    const pathsPlugin = new paths_plugin_1.TypeScriptPathsPlugin();\n    compiler.hooks.afterResolvers.tap(PLUGIN_NAME, compiler => {\n      // When Ivy is enabled we need to add the fields added by NGCC\n      // to take precedence over the provided mainFields.\n      // NGCC adds fields in package.json suffixed with '_ivy_ngcc'\n      // Example: module -> module__ivy_ngcc\n      compiler.resolverFactory.hooks.resolveOptions.for('normal').tap(PLUGIN_NAME, resolveOptions => {\n        var _a, _b;\n\n        const originalMainFields = resolveOptions.mainFields;\n        const ivyMainFields = (_a = originalMainFields === null || originalMainFields === void 0 ? void 0 : originalMainFields.flat().map(f => `${f}_ivy_ngcc`)) !== null && _a !== void 0 ? _a : [];\n        (_b = resolveOptions.plugins) !== null && _b !== void 0 ? _b : resolveOptions.plugins = [];\n        resolveOptions.plugins.push(pathsPlugin); // https://github.com/webpack/webpack/issues/11635#issuecomment-707016779\n\n        return util.cleverMerge(resolveOptions, {\n          mainFields: [...ivyMainFields, '...']\n        });\n      });\n    }); // Load the compiler-cli if not already available\n\n    compiler.hooks.beforeCompile.tapPromise(PLUGIN_NAME, () => this.initializeCompilerCli());\n    const compilationState = {\n      pathsPlugin\n    };\n    compiler.hooks.thisCompilation.tap(PLUGIN_NAME, compilation => {\n      try {\n        this.setupCompilation(compilation, compilationState);\n      } catch (error) {\n        compilation.errors.push(new WebpackError(`Failed to initialize Angular compilation - ${error instanceof Error ? error.message : error}`));\n      }\n    });\n  }\n\n  setupCompilation(compilation, state) {\n    var _this = this;\n\n    const compiler = compilation.compiler; // Register plugin to ensure deterministic emit order in multi-plugin usage\n\n    const emitRegistration = this.registerWithCompilation(compilation);\n    this.watchMode = compiler.watchMode; // Initialize webpack cache\n\n    if (!this.webpackCache && compilation.options.cache) {\n      this.webpackCache = compilation.getCache(PLUGIN_NAME);\n    } // Initialize the resource loader if not already setup\n\n\n    if (!state.resourceLoader) {\n      state.resourceLoader = new resource_loader_1.WebpackResourceLoader(this.watchMode);\n    } // Initialize and process eager ngcc if not already setup\n\n\n    if (!state.ngccProcessor) {\n      const {\n        processor,\n        errors,\n        warnings\n      } = initializeNgccProcessor(compiler, this.pluginOptions.tsconfig, this.compilerNgccModule);\n      processor.process();\n      warnings.forEach(warning => (0, diagnostics_1.addWarning)(compilation, warning));\n      errors.forEach(error => (0, diagnostics_1.addError)(compilation, error));\n      state.ngccProcessor = processor;\n    } // Setup and read TypeScript and Angular compiler configuration\n\n\n    const {\n      compilerOptions,\n      rootNames,\n      errors\n    } = this.loadConfiguration(); // Create diagnostics reporter and report configuration file errors\n\n    const diagnosticsReporter = (0, diagnostics_1.createDiagnosticsReporter)(compilation, diagnostic => this.compilerCli.formatDiagnostics([diagnostic]));\n    diagnosticsReporter(errors); // Update TypeScript path mapping plugin with new configuration\n\n    state.pathsPlugin.update(compilerOptions); // Create a Webpack-based TypeScript compiler host\n\n    const system = (0, system_1.createWebpackSystem)( // Webpack lacks an InputFileSytem type definition with sync functions\n    compiler.inputFileSystem, (0, paths_1.normalizePath)(compiler.context));\n    const host = ts.createIncrementalCompilerHost(compilerOptions, system); // Setup source file caching and reuse cache from previous compilation if present\n\n    let cache = this.sourceFileCache;\n    let changedFiles;\n\n    if (cache) {\n      changedFiles = new Set();\n\n      for (const changedFile of [...compiler.modifiedFiles, ...compiler.removedFiles]) {\n        const normalizedChangedFile = (0, paths_1.normalizePath)(changedFile); // Invalidate file dependencies\n\n        this.fileDependencies.delete(normalizedChangedFile); // Invalidate existing cache\n\n        cache.invalidate(normalizedChangedFile);\n        changedFiles.add(normalizedChangedFile);\n      }\n    } else {\n      // Initialize a new cache\n      cache = new cache_1.SourceFileCache(); // Only store cache if in watch mode\n\n      if (this.watchMode) {\n        this.sourceFileCache = cache;\n      }\n    }\n\n    (0, host_1.augmentHostWithCaching)(host, cache);\n    const moduleResolutionCache = ts.createModuleResolutionCache(host.getCurrentDirectory(), host.getCanonicalFileName.bind(host), compilerOptions); // Setup source file dependency collection\n\n    (0, host_1.augmentHostWithDependencyCollection)(host, this.fileDependencies, moduleResolutionCache); // Setup on demand ngcc\n\n    (0, host_1.augmentHostWithNgcc)(host, state.ngccProcessor, moduleResolutionCache); // Setup resource loading\n\n    state.resourceLoader.update(compilation, changedFiles);\n    (0, host_1.augmentHostWithResources)(host, state.resourceLoader, {\n      directTemplateLoading: this.pluginOptions.directTemplateLoading,\n      inlineStyleFileExtension: this.pluginOptions.inlineStyleFileExtension\n    }); // Setup source file adjustment options\n\n    (0, host_1.augmentHostWithReplacements)(host, this.pluginOptions.fileReplacements, moduleResolutionCache);\n    (0, host_1.augmentHostWithSubstitutions)(host, this.pluginOptions.substitutions); // Create the file emitter used by the webpack loader\n\n    const {\n      fileEmitter,\n      builder,\n      internalFiles\n    } = this.pluginOptions.jitMode ? this.updateJitProgram(compilerOptions, rootNames, host, diagnosticsReporter) : this.updateAotProgram(compilerOptions, rootNames, host, diagnosticsReporter, state.resourceLoader); // Set of files used during the unused TypeScript file analysis\n\n    const currentUnused = new Set();\n\n    for (const sourceFile of builder.getSourceFiles()) {\n      if (internalFiles === null || internalFiles === void 0 ? void 0 : internalFiles.has(sourceFile)) {\n        continue;\n      } // Ensure all program files are considered part of the compilation and will be watched.\n      // Webpack does not normalize paths. Therefore, we need to normalize the path with FS seperators.\n\n\n      compilation.fileDependencies.add((0, paths_1.externalizePath)(sourceFile.fileName)); // Add all non-declaration files to the initial set of unused files. The set will be\n      // analyzed and pruned after all Webpack modules are finished building.\n\n      if (!sourceFile.isDeclarationFile) {\n        currentUnused.add((0, paths_1.normalizePath)(sourceFile.fileName));\n      }\n    }\n\n    compilation.hooks.finishModules.tapPromise(PLUGIN_NAME, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (modules) {\n        var _a, _b; // Rebuild any remaining AOT required modules\n\n\n        yield _this.rebuildRequiredFiles(modules, compilation, fileEmitter); // Clear out the Webpack compilation to avoid an extra retaining reference\n\n        (_a = state.resourceLoader) === null || _a === void 0 ? void 0 : _a.clearParentCompilation(); // Analyze program for unused files\n\n        if (compilation.errors.length > 0) {\n          return;\n        }\n\n        for (const webpackModule of modules) {\n          const resource = webpackModule.resource;\n\n          if (resource) {\n            _this.markResourceUsed((0, paths_1.normalizePath)(resource), currentUnused);\n          }\n        }\n\n        for (const unused of currentUnused) {\n          if ((_b = state.previousUnused) === null || _b === void 0 ? void 0 : _b.has(unused)) {\n            continue;\n          }\n\n          (0, diagnostics_1.addWarning)(compilation, `${unused} is part of the TypeScript compilation but it's unused.\\n` + `Add only entry points to the 'files' or 'include' properties in your tsconfig.`);\n        }\n\n        state.previousUnused = currentUnused;\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()); // Store file emitter for loader usage\n\n    emitRegistration.update(fileEmitter);\n  }\n\n  registerWithCompilation(compilation) {\n    let fileEmitters = compilationFileEmitters.get(compilation);\n\n    if (!fileEmitters) {\n      fileEmitters = new symbol_1.FileEmitterCollection();\n      compilationFileEmitters.set(compilation, fileEmitters);\n      compilation.compiler.webpack.NormalModule.getCompilationHooks(compilation).loader.tap(PLUGIN_NAME, loaderContext => {\n        loaderContext[symbol_1.AngularPluginSymbol] = fileEmitters;\n      });\n    }\n\n    const emitRegistration = fileEmitters.register();\n    return emitRegistration;\n  }\n\n  markResourceUsed(normalizedResourcePath, currentUnused) {\n    if (!currentUnused.has(normalizedResourcePath)) {\n      return;\n    }\n\n    currentUnused.delete(normalizedResourcePath);\n    const dependencies = this.fileDependencies.get(normalizedResourcePath);\n\n    if (!dependencies) {\n      return;\n    }\n\n    for (const dependency of dependencies) {\n      this.markResourceUsed((0, paths_1.normalizePath)(dependency), currentUnused);\n    }\n  }\n\n  rebuildRequiredFiles(modules, compilation, fileEmitter) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.requiredFilesToEmit.size === 0) {\n        return;\n      }\n\n      const filesToRebuild = new Set();\n\n      for (const requiredFile of _this2.requiredFilesToEmit) {\n        const history = yield _this2.getFileEmitHistory(requiredFile);\n\n        if (history) {\n          const emitResult = yield fileEmitter(requiredFile);\n\n          if ((emitResult === null || emitResult === void 0 ? void 0 : emitResult.content) === undefined || history.length !== emitResult.content.length || emitResult.hash === undefined || Buffer.compare(history.hash, emitResult.hash) !== 0) {\n            // New emit result is different so rebuild using new emit result\n            _this2.requiredFilesToEmitCache.set(requiredFile, emitResult);\n\n            filesToRebuild.add(requiredFile);\n          }\n        } else {\n          // No emit history so rebuild\n          filesToRebuild.add(requiredFile);\n        }\n      }\n\n      if (filesToRebuild.size > 0) {\n        const rebuild = webpackModule => new Promise(resolve => compilation.rebuildModule(webpackModule, () => resolve()));\n\n        const modulesToRebuild = [];\n\n        for (const webpackModule of modules) {\n          const resource = webpackModule.resource;\n\n          if (resource && filesToRebuild.has((0, paths_1.normalizePath)(resource))) {\n            modulesToRebuild.push(webpackModule);\n          }\n        }\n\n        yield Promise.all(modulesToRebuild.map(webpackModule => rebuild(webpackModule)));\n      }\n\n      _this2.requiredFilesToEmit.clear();\n\n      _this2.requiredFilesToEmitCache.clear();\n    })();\n  }\n\n  loadConfiguration() {\n    const {\n      options: compilerOptions,\n      rootNames,\n      errors\n    } = this.compilerCli.readConfiguration(this.pluginOptions.tsconfig, this.pluginOptions.compilerOptions);\n    compilerOptions.enableIvy = true;\n    compilerOptions.noEmitOnError = false;\n    compilerOptions.suppressOutputPathCheck = true;\n    compilerOptions.outDir = undefined;\n    compilerOptions.inlineSources = compilerOptions.sourceMap;\n    compilerOptions.inlineSourceMap = false;\n    compilerOptions.mapRoot = undefined;\n    compilerOptions.sourceRoot = undefined;\n    compilerOptions.allowEmptyCodegenFiles = false;\n    compilerOptions.annotationsAs = 'decorators';\n    compilerOptions.enableResourceInlining = false;\n    return {\n      compilerOptions,\n      rootNames,\n      errors\n    };\n  }\n\n  updateAotProgram(compilerOptions, rootNames, host, diagnosticsReporter, resourceLoader) {\n    // Create the Angular specific program that contains the Angular compiler\n    const angularProgram = new this.compilerCli.NgtscProgram(rootNames, compilerOptions, host, this.ngtscNextProgram);\n    const angularCompiler = angularProgram.compiler; // The `ignoreForEmit` return value can be safely ignored when emitting. Only files\n    // that will be bundled (requested by Webpack) will be emitted. Combined with TypeScript's\n    // eliding of type only imports, this will cause type only files to be automatically ignored.\n    // Internal Angular type check files are also not resolvable by the bundler. Even if they\n    // were somehow errantly imported, the bundler would error before an emit was attempted.\n    // Diagnostics are still collected for all files which requires using `ignoreForDiagnostics`.\n\n    const {\n      ignoreForDiagnostics,\n      ignoreForEmit\n    } = angularCompiler; // SourceFile versions are required for builder programs.\n    // The wrapped host inside NgtscProgram adds additional files that will not have versions.\n\n    const typeScriptProgram = angularProgram.getTsProgram();\n    (0, host_1.augmentProgramWithVersioning)(typeScriptProgram);\n    let builder;\n\n    if (this.watchMode) {\n      builder = this.builder = ts.createEmitAndSemanticDiagnosticsBuilderProgram(typeScriptProgram, host, this.builder);\n      this.ngtscNextProgram = angularProgram;\n    } else {\n      // When not in watch mode, the startup cost of the incremental analysis can be avoided by\n      // using an abstract builder that only wraps a TypeScript program.\n      builder = ts.createAbstractBuilder(typeScriptProgram, host);\n    } // Update semantic diagnostics cache\n\n\n    const affectedFiles = new Set(); // Analyze affected files when in watch mode for incremental type checking\n\n    if ('getSemanticDiagnosticsOfNextAffectedFile' in builder) {\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        const result = builder.getSemanticDiagnosticsOfNextAffectedFile(undefined, sourceFile => {\n          // If the affected file is a TTC shim, add the shim's original source file.\n          // This ensures that changes that affect TTC are typechecked even when the changes\n          // are otherwise unrelated from a TS perspective and do not result in Ivy codegen changes.\n          // For example, changing @Input property types of a directive used in another component's\n          // template.\n          if (ignoreForDiagnostics.has(sourceFile) && sourceFile.fileName.endsWith('.ngtypecheck.ts')) {\n            // This file name conversion relies on internal compiler logic and should be converted\n            // to an official method when available. 15 is length of `.ngtypecheck.ts`\n            const originalFilename = sourceFile.fileName.slice(0, -15) + '.ts';\n            const originalSourceFile = builder.getSourceFile(originalFilename);\n\n            if (originalSourceFile) {\n              affectedFiles.add(originalSourceFile);\n            }\n\n            return true;\n          }\n\n          return false;\n        });\n\n        if (!result) {\n          break;\n        }\n\n        affectedFiles.add(result.affected);\n      }\n    } // Collect program level diagnostics\n\n\n    const diagnostics = [...angularCompiler.getOptionDiagnostics(), ...builder.getOptionsDiagnostics(), ...builder.getGlobalDiagnostics()];\n    diagnosticsReporter(diagnostics); // Collect source file specific diagnostics\n\n    for (const sourceFile of builder.getSourceFiles()) {\n      if (!ignoreForDiagnostics.has(sourceFile)) {\n        diagnosticsReporter(builder.getSyntacticDiagnostics(sourceFile));\n        diagnosticsReporter(builder.getSemanticDiagnostics(sourceFile));\n      }\n    }\n\n    const transformers = (0, transformation_1.createAotTransformers)(builder, this.pluginOptions);\n\n    const getDependencies = sourceFile => {\n      const dependencies = [];\n\n      for (const resourcePath of angularCompiler.getResourceDependencies(sourceFile)) {\n        dependencies.push(resourcePath, // Retrieve all dependencies of the resource (stylesheet imports, etc.)\n        ...resourceLoader.getResourceDependencies(resourcePath));\n      }\n\n      return dependencies;\n    }; // Required to support asynchronous resource loading\n    // Must be done before creating transformers or getting template diagnostics\n\n\n    const pendingAnalysis = angularCompiler.analyzeAsync().then(() => {\n      var _a;\n\n      this.requiredFilesToEmit.clear();\n\n      for (const sourceFile of builder.getSourceFiles()) {\n        if (sourceFile.isDeclarationFile) {\n          continue;\n        } // Collect sources that are required to be emitted\n\n\n        if (!ignoreForEmit.has(sourceFile) && !angularCompiler.incrementalDriver.safeToSkipEmit(sourceFile)) {\n          this.requiredFilesToEmit.add((0, paths_1.normalizePath)(sourceFile.fileName)); // If required to emit, diagnostics may have also changed\n\n          if (!ignoreForDiagnostics.has(sourceFile)) {\n            affectedFiles.add(sourceFile);\n          }\n        } else if (this.sourceFileCache && !affectedFiles.has(sourceFile) && !ignoreForDiagnostics.has(sourceFile)) {\n          // Use cached Angular diagnostics for unchanged and unaffected files\n          const angularDiagnostics = this.sourceFileCache.getAngularDiagnostics(sourceFile);\n\n          if (angularDiagnostics) {\n            diagnosticsReporter(angularDiagnostics);\n          }\n        }\n      } // Collect new Angular diagnostics for files affected by changes\n\n\n      const OptimizeFor = this.compilerCli.OptimizeFor;\n      const optimizeDiagnosticsFor = affectedFiles.size <= DIAGNOSTICS_AFFECTED_THRESHOLD ? OptimizeFor.SingleFile : OptimizeFor.WholeProgram;\n\n      for (const affectedFile of affectedFiles) {\n        const angularDiagnostics = angularCompiler.getDiagnosticsForFile(affectedFile, optimizeDiagnosticsFor);\n        diagnosticsReporter(angularDiagnostics);\n        (_a = this.sourceFileCache) === null || _a === void 0 ? void 0 : _a.updateAngularDiagnostics(affectedFile, angularDiagnostics);\n      }\n\n      return {\n        emitter: this.createFileEmitter(builder, (0, transformation_1.mergeTransformers)(angularCompiler.prepareEmit().transformers, transformers), getDependencies, sourceFile => {\n          this.requiredFilesToEmit.delete((0, paths_1.normalizePath)(sourceFile.fileName));\n          angularCompiler.incrementalDriver.recordSuccessfulEmit(sourceFile);\n        })\n      };\n    }).catch(err => ({\n      errorMessage: err instanceof Error ? err.message : `${err}`\n    }));\n\n    const analyzingFileEmitter = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (file) {\n        const analysis = yield pendingAnalysis;\n\n        if ('errorMessage' in analysis) {\n          throw new Error(analysis.errorMessage);\n        }\n\n        return analysis.emitter(file);\n      });\n\n      return function analyzingFileEmitter(_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return {\n      fileEmitter: analyzingFileEmitter,\n      builder,\n      internalFiles: ignoreForEmit\n    };\n  }\n\n  updateJitProgram(compilerOptions, rootNames, host, diagnosticsReporter) {\n    let builder;\n\n    if (this.watchMode) {\n      builder = this.builder = ts.createEmitAndSemanticDiagnosticsBuilderProgram(rootNames, compilerOptions, host, this.builder);\n    } else {\n      // When not in watch mode, the startup cost of the incremental analysis can be avoided by\n      // using an abstract builder that only wraps a TypeScript program.\n      builder = ts.createAbstractBuilder(rootNames, compilerOptions, host);\n    }\n\n    const diagnostics = [...builder.getOptionsDiagnostics(), ...builder.getGlobalDiagnostics(), ...builder.getSyntacticDiagnostics(), // Gather incremental semantic diagnostics\n    ...builder.getSemanticDiagnostics()];\n    diagnosticsReporter(diagnostics);\n    const transformers = (0, transformation_1.createJitTransformers)(builder, this.compilerCli, this.pluginOptions);\n    return {\n      fileEmitter: this.createFileEmitter(builder, transformers, () => []),\n      builder,\n      internalFiles: undefined\n    };\n  }\n\n  createFileEmitter(program, transformers = {}, getExtraDependencies, onAfterEmit) {\n    var _this3 = this;\n\n    return /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (file) {\n        const filePath = (0, paths_1.normalizePath)(file);\n\n        if (_this3.requiredFilesToEmitCache.has(filePath)) {\n          return _this3.requiredFilesToEmitCache.get(filePath);\n        }\n\n        const sourceFile = program.getSourceFile(filePath);\n\n        if (!sourceFile) {\n          return undefined;\n        }\n\n        let content;\n        let map;\n        program.emit(sourceFile, (filename, data) => {\n          if (filename.endsWith('.map')) {\n            map = data;\n          } else if (filename.endsWith('.js')) {\n            content = data;\n          }\n        }, undefined, undefined, transformers);\n        onAfterEmit === null || onAfterEmit === void 0 ? void 0 : onAfterEmit(sourceFile); // Capture emit history info for Angular rebuild analysis\n\n        const hash = content ? (yield _this3.addFileEmitHistory(filePath, content)).hash : undefined;\n        const dependencies = [...(_this3.fileDependencies.get(filePath) || []), ...getExtraDependencies(sourceFile)].map(paths_1.externalizePath);\n        return {\n          content,\n          map,\n          dependencies,\n          hash\n        };\n      });\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  initializeCompilerCli() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.compilerCliModule) {\n        return;\n      } // This uses a dynamic import to load `@angular/compiler-cli` which may be ESM.\n      // CommonJS code can load ESM code via a dynamic import. Unfortunately, TypeScript\n      // will currently, unconditionally downlevel dynamic import into a require call.\n      // require calls cannot load ESM code and will result in a runtime error. To workaround\n      // this, a Function constructor is used to prevent TypeScript from changing the dynamic import.\n      // Once TypeScript provides support for keeping the dynamic import this workaround can\n      // be dropped.\n\n\n      _this4.compilerCliModule = yield new Function(`return import('@angular/compiler-cli');`)();\n      _this4.compilerNgccModule = yield new Function(`return import('@angular/compiler-cli/ngcc');`)();\n    })();\n  }\n\n  addFileEmitHistory(filePath, content) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      assert_1.strict.ok(_this5.webpackCreateHash, 'File emitter is used prior to Webpack compilation');\n      const historyData = {\n        length: content.length,\n        hash: _this5.webpackCreateHash('xxhash64').update(content).digest()\n      };\n\n      if (_this5.webpackCache) {\n        const history = yield _this5.getFileEmitHistory(filePath);\n\n        if (!history || Buffer.compare(history.hash, historyData.hash) !== 0) {\n          // Hash doesn't match or item doesn't exist.\n          yield _this5.webpackCache.storePromise(filePath, null, historyData);\n        }\n      } else if (_this5.watchMode) {\n        // The in memory file emit history is only required during watch mode.\n        _this5.fileEmitHistory.set(filePath, historyData);\n      }\n\n      return historyData;\n    })();\n  }\n\n  getFileEmitHistory(filePath) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this6.webpackCache ? _this6.webpackCache.getPromise(filePath, null) : _this6.fileEmitHistory.get(filePath);\n    })();\n  }\n\n}\n\nexports.AngularWebpackPlugin = AngularWebpackPlugin;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","AngularWebpackPlugin","assert_1","require","ts","ngcc_processor_1","paths_plugin_1","resource_loader_1","cache_1","diagnostics_1","host_1","paths_1","symbol_1","system_1","transformation_1","DIAGNOSTICS_AFFECTED_THRESHOLD","initializeNgccProcessor","compiler","tsconfig","compilerNgccModule","_a","_b","_c","inputFileSystem","options","webpackOptions","mainFields","resolve","flat","errors","warnings","resolver","resolverFactory","cache","extensions","useSyncFileSystemCalls","strict","ok","processor","NgccProcessor","context","PLUGIN_NAME","compilationFileEmitters","WeakMap","constructor","fileDependencies","Map","requiredFilesToEmit","Set","requiredFilesToEmitCache","fileEmitHistory","pluginOptions","emitClassMetadata","emitNgModuleScope","jitMode","fileReplacements","substitutions","directTemplateLoading","compilerCli","compilerCliModule","apply","NormalModuleReplacementPlugin","WebpackError","util","webpack","webpackCreateHash","createHash","key","entries","RegExp","replace","pathsPlugin","TypeScriptPathsPlugin","hooks","afterResolvers","tap","resolveOptions","for","originalMainFields","ivyMainFields","map","f","plugins","push","cleverMerge","beforeCompile","tapPromise","initializeCompilerCli","compilationState","thisCompilation","compilation","setupCompilation","error","Error","message","state","emitRegistration","registerWithCompilation","watchMode","webpackCache","getCache","resourceLoader","WebpackResourceLoader","ngccProcessor","process","forEach","warning","addWarning","addError","compilerOptions","rootNames","loadConfiguration","diagnosticsReporter","createDiagnosticsReporter","diagnostic","formatDiagnostics","update","system","createWebpackSystem","normalizePath","host","createIncrementalCompilerHost","sourceFileCache","changedFiles","changedFile","modifiedFiles","removedFiles","normalizedChangedFile","delete","invalidate","add","SourceFileCache","augmentHostWithCaching","moduleResolutionCache","createModuleResolutionCache","getCurrentDirectory","getCanonicalFileName","bind","augmentHostWithDependencyCollection","augmentHostWithNgcc","augmentHostWithResources","inlineStyleFileExtension","augmentHostWithReplacements","augmentHostWithSubstitutions","fileEmitter","builder","internalFiles","updateJitProgram","updateAotProgram","currentUnused","sourceFile","getSourceFiles","has","externalizePath","fileName","isDeclarationFile","finishModules","modules","rebuildRequiredFiles","clearParentCompilation","length","webpackModule","resource","markResourceUsed","unused","previousUnused","fileEmitters","FileEmitterCollection","set","NormalModule","getCompilationHooks","loader","loaderContext","AngularPluginSymbol","register","normalizedResourcePath","dependencies","dependency","size","filesToRebuild","requiredFile","history","getFileEmitHistory","emitResult","content","hash","Buffer","compare","rebuild","Promise","rebuildModule","modulesToRebuild","all","clear","readConfiguration","enableIvy","noEmitOnError","suppressOutputPathCheck","outDir","inlineSources","sourceMap","inlineSourceMap","mapRoot","sourceRoot","allowEmptyCodegenFiles","annotationsAs","enableResourceInlining","angularProgram","NgtscProgram","ngtscNextProgram","angularCompiler","ignoreForDiagnostics","ignoreForEmit","typeScriptProgram","getTsProgram","augmentProgramWithVersioning","createEmitAndSemanticDiagnosticsBuilderProgram","createAbstractBuilder","affectedFiles","getSemanticDiagnosticsOfNextAffectedFile","endsWith","originalFilename","slice","originalSourceFile","getSourceFile","affected","diagnostics","getOptionDiagnostics","getOptionsDiagnostics","getGlobalDiagnostics","getSyntacticDiagnostics","getSemanticDiagnostics","transformers","createAotTransformers","getDependencies","resourcePath","getResourceDependencies","pendingAnalysis","analyzeAsync","then","incrementalDriver","safeToSkipEmit","angularDiagnostics","getAngularDiagnostics","OptimizeFor","optimizeDiagnosticsFor","SingleFile","WholeProgram","affectedFile","getDiagnosticsForFile","updateAngularDiagnostics","emitter","createFileEmitter","mergeTransformers","prepareEmit","recordSuccessfulEmit","catch","err","errorMessage","analyzingFileEmitter","file","analysis","createJitTransformers","program","getExtraDependencies","onAfterEmit","filePath","emit","filename","data","addFileEmitHistory","Function","historyData","digest","storePromise","getPromise"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@ngtools/webpack/src/ivy/plugin.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AngularWebpackPlugin = void 0;\nconst assert_1 = require(\"assert\");\nconst ts = __importStar(require(\"typescript\"));\nconst ngcc_processor_1 = require(\"../ngcc_processor\");\nconst paths_plugin_1 = require(\"../paths-plugin\");\nconst resource_loader_1 = require(\"../resource_loader\");\nconst cache_1 = require(\"./cache\");\nconst diagnostics_1 = require(\"./diagnostics\");\nconst host_1 = require(\"./host\");\nconst paths_1 = require(\"./paths\");\nconst symbol_1 = require(\"./symbol\");\nconst system_1 = require(\"./system\");\nconst transformation_1 = require(\"./transformation\");\n/**\n * The threshold used to determine whether Angular file diagnostics should optimize for full programs\n * or single files. If the number of affected files for a build is more than the threshold, full\n * program optimization will be used.\n */\nconst DIAGNOSTICS_AFFECTED_THRESHOLD = 1;\nfunction initializeNgccProcessor(compiler, tsconfig, compilerNgccModule) {\n    var _a, _b, _c;\n    const { inputFileSystem, options: webpackOptions } = compiler;\n    const mainFields = (_c = (_b = (_a = webpackOptions.resolve) === null || _a === void 0 ? void 0 : _a.mainFields) === null || _b === void 0 ? void 0 : _b.flat()) !== null && _c !== void 0 ? _c : [];\n    const errors = [];\n    const warnings = [];\n    const resolver = compiler.resolverFactory.get('normal', {\n        // Caching must be disabled because it causes the resolver to become async after a rebuild\n        cache: false,\n        extensions: ['.json'],\n        useSyncFileSystemCalls: true,\n    });\n    // The compilerNgccModule field is guaranteed to be defined during a compilation\n    // due to the `beforeCompile` hook. Usage of this property accessor prior to the\n    // hook execution is an implementation error.\n    assert_1.strict.ok(compilerNgccModule, `'@angular/compiler-cli/ngcc' used prior to Webpack compilation.`);\n    const processor = new ngcc_processor_1.NgccProcessor(compilerNgccModule, mainFields, warnings, errors, compiler.context, tsconfig, inputFileSystem, resolver);\n    return { processor, errors, warnings };\n}\nconst PLUGIN_NAME = 'angular-compiler';\nconst compilationFileEmitters = new WeakMap();\nclass AngularWebpackPlugin {\n    constructor(options = {}) {\n        this.fileDependencies = new Map();\n        this.requiredFilesToEmit = new Set();\n        this.requiredFilesToEmitCache = new Map();\n        this.fileEmitHistory = new Map();\n        this.pluginOptions = {\n            emitClassMetadata: false,\n            emitNgModuleScope: false,\n            jitMode: false,\n            fileReplacements: {},\n            substitutions: {},\n            directTemplateLoading: true,\n            tsconfig: 'tsconfig.json',\n            ...options,\n        };\n    }\n    get compilerCli() {\n        // The compilerCliModule field is guaranteed to be defined during a compilation\n        // due to the `beforeCompile` hook. Usage of this property accessor prior to the\n        // hook execution is an implementation error.\n        assert_1.strict.ok(this.compilerCliModule, `'@angular/compiler-cli' used prior to Webpack compilation.`);\n        return this.compilerCliModule;\n    }\n    get options() {\n        return this.pluginOptions;\n    }\n    apply(compiler) {\n        const { NormalModuleReplacementPlugin, WebpackError, util } = compiler.webpack;\n        this.webpackCreateHash = util.createHash;\n        // Setup file replacements with webpack\n        for (const [key, value] of Object.entries(this.pluginOptions.fileReplacements)) {\n            new NormalModuleReplacementPlugin(new RegExp('^' + key.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&') + '$'), value).apply(compiler);\n        }\n        // Set resolver options\n        const pathsPlugin = new paths_plugin_1.TypeScriptPathsPlugin();\n        compiler.hooks.afterResolvers.tap(PLUGIN_NAME, (compiler) => {\n            // When Ivy is enabled we need to add the fields added by NGCC\n            // to take precedence over the provided mainFields.\n            // NGCC adds fields in package.json suffixed with '_ivy_ngcc'\n            // Example: module -> module__ivy_ngcc\n            compiler.resolverFactory.hooks.resolveOptions\n                .for('normal')\n                .tap(PLUGIN_NAME, (resolveOptions) => {\n                var _a, _b;\n                const originalMainFields = resolveOptions.mainFields;\n                const ivyMainFields = (_a = originalMainFields === null || originalMainFields === void 0 ? void 0 : originalMainFields.flat().map((f) => `${f}_ivy_ngcc`)) !== null && _a !== void 0 ? _a : [];\n                (_b = resolveOptions.plugins) !== null && _b !== void 0 ? _b : (resolveOptions.plugins = []);\n                resolveOptions.plugins.push(pathsPlugin);\n                // https://github.com/webpack/webpack/issues/11635#issuecomment-707016779\n                return util.cleverMerge(resolveOptions, { mainFields: [...ivyMainFields, '...'] });\n            });\n        });\n        // Load the compiler-cli if not already available\n        compiler.hooks.beforeCompile.tapPromise(PLUGIN_NAME, () => this.initializeCompilerCli());\n        const compilationState = { pathsPlugin };\n        compiler.hooks.thisCompilation.tap(PLUGIN_NAME, (compilation) => {\n            try {\n                this.setupCompilation(compilation, compilationState);\n            }\n            catch (error) {\n                compilation.errors.push(new WebpackError(`Failed to initialize Angular compilation - ${error instanceof Error ? error.message : error}`));\n            }\n        });\n    }\n    setupCompilation(compilation, state) {\n        const compiler = compilation.compiler;\n        // Register plugin to ensure deterministic emit order in multi-plugin usage\n        const emitRegistration = this.registerWithCompilation(compilation);\n        this.watchMode = compiler.watchMode;\n        // Initialize webpack cache\n        if (!this.webpackCache && compilation.options.cache) {\n            this.webpackCache = compilation.getCache(PLUGIN_NAME);\n        }\n        // Initialize the resource loader if not already setup\n        if (!state.resourceLoader) {\n            state.resourceLoader = new resource_loader_1.WebpackResourceLoader(this.watchMode);\n        }\n        // Initialize and process eager ngcc if not already setup\n        if (!state.ngccProcessor) {\n            const { processor, errors, warnings } = initializeNgccProcessor(compiler, this.pluginOptions.tsconfig, this.compilerNgccModule);\n            processor.process();\n            warnings.forEach((warning) => (0, diagnostics_1.addWarning)(compilation, warning));\n            errors.forEach((error) => (0, diagnostics_1.addError)(compilation, error));\n            state.ngccProcessor = processor;\n        }\n        // Setup and read TypeScript and Angular compiler configuration\n        const { compilerOptions, rootNames, errors } = this.loadConfiguration();\n        // Create diagnostics reporter and report configuration file errors\n        const diagnosticsReporter = (0, diagnostics_1.createDiagnosticsReporter)(compilation, (diagnostic) => this.compilerCli.formatDiagnostics([diagnostic]));\n        diagnosticsReporter(errors);\n        // Update TypeScript path mapping plugin with new configuration\n        state.pathsPlugin.update(compilerOptions);\n        // Create a Webpack-based TypeScript compiler host\n        const system = (0, system_1.createWebpackSystem)(\n        // Webpack lacks an InputFileSytem type definition with sync functions\n        compiler.inputFileSystem, (0, paths_1.normalizePath)(compiler.context));\n        const host = ts.createIncrementalCompilerHost(compilerOptions, system);\n        // Setup source file caching and reuse cache from previous compilation if present\n        let cache = this.sourceFileCache;\n        let changedFiles;\n        if (cache) {\n            changedFiles = new Set();\n            for (const changedFile of [...compiler.modifiedFiles, ...compiler.removedFiles]) {\n                const normalizedChangedFile = (0, paths_1.normalizePath)(changedFile);\n                // Invalidate file dependencies\n                this.fileDependencies.delete(normalizedChangedFile);\n                // Invalidate existing cache\n                cache.invalidate(normalizedChangedFile);\n                changedFiles.add(normalizedChangedFile);\n            }\n        }\n        else {\n            // Initialize a new cache\n            cache = new cache_1.SourceFileCache();\n            // Only store cache if in watch mode\n            if (this.watchMode) {\n                this.sourceFileCache = cache;\n            }\n        }\n        (0, host_1.augmentHostWithCaching)(host, cache);\n        const moduleResolutionCache = ts.createModuleResolutionCache(host.getCurrentDirectory(), host.getCanonicalFileName.bind(host), compilerOptions);\n        // Setup source file dependency collection\n        (0, host_1.augmentHostWithDependencyCollection)(host, this.fileDependencies, moduleResolutionCache);\n        // Setup on demand ngcc\n        (0, host_1.augmentHostWithNgcc)(host, state.ngccProcessor, moduleResolutionCache);\n        // Setup resource loading\n        state.resourceLoader.update(compilation, changedFiles);\n        (0, host_1.augmentHostWithResources)(host, state.resourceLoader, {\n            directTemplateLoading: this.pluginOptions.directTemplateLoading,\n            inlineStyleFileExtension: this.pluginOptions.inlineStyleFileExtension,\n        });\n        // Setup source file adjustment options\n        (0, host_1.augmentHostWithReplacements)(host, this.pluginOptions.fileReplacements, moduleResolutionCache);\n        (0, host_1.augmentHostWithSubstitutions)(host, this.pluginOptions.substitutions);\n        // Create the file emitter used by the webpack loader\n        const { fileEmitter, builder, internalFiles } = this.pluginOptions.jitMode\n            ? this.updateJitProgram(compilerOptions, rootNames, host, diagnosticsReporter)\n            : this.updateAotProgram(compilerOptions, rootNames, host, diagnosticsReporter, state.resourceLoader);\n        // Set of files used during the unused TypeScript file analysis\n        const currentUnused = new Set();\n        for (const sourceFile of builder.getSourceFiles()) {\n            if (internalFiles === null || internalFiles === void 0 ? void 0 : internalFiles.has(sourceFile)) {\n                continue;\n            }\n            // Ensure all program files are considered part of the compilation and will be watched.\n            // Webpack does not normalize paths. Therefore, we need to normalize the path with FS seperators.\n            compilation.fileDependencies.add((0, paths_1.externalizePath)(sourceFile.fileName));\n            // Add all non-declaration files to the initial set of unused files. The set will be\n            // analyzed and pruned after all Webpack modules are finished building.\n            if (!sourceFile.isDeclarationFile) {\n                currentUnused.add((0, paths_1.normalizePath)(sourceFile.fileName));\n            }\n        }\n        compilation.hooks.finishModules.tapPromise(PLUGIN_NAME, async (modules) => {\n            var _a, _b;\n            // Rebuild any remaining AOT required modules\n            await this.rebuildRequiredFiles(modules, compilation, fileEmitter);\n            // Clear out the Webpack compilation to avoid an extra retaining reference\n            (_a = state.resourceLoader) === null || _a === void 0 ? void 0 : _a.clearParentCompilation();\n            // Analyze program for unused files\n            if (compilation.errors.length > 0) {\n                return;\n            }\n            for (const webpackModule of modules) {\n                const resource = webpackModule.resource;\n                if (resource) {\n                    this.markResourceUsed((0, paths_1.normalizePath)(resource), currentUnused);\n                }\n            }\n            for (const unused of currentUnused) {\n                if ((_b = state.previousUnused) === null || _b === void 0 ? void 0 : _b.has(unused)) {\n                    continue;\n                }\n                (0, diagnostics_1.addWarning)(compilation, `${unused} is part of the TypeScript compilation but it's unused.\\n` +\n                    `Add only entry points to the 'files' or 'include' properties in your tsconfig.`);\n            }\n            state.previousUnused = currentUnused;\n        });\n        // Store file emitter for loader usage\n        emitRegistration.update(fileEmitter);\n    }\n    registerWithCompilation(compilation) {\n        let fileEmitters = compilationFileEmitters.get(compilation);\n        if (!fileEmitters) {\n            fileEmitters = new symbol_1.FileEmitterCollection();\n            compilationFileEmitters.set(compilation, fileEmitters);\n            compilation.compiler.webpack.NormalModule.getCompilationHooks(compilation).loader.tap(PLUGIN_NAME, (loaderContext) => {\n                loaderContext[symbol_1.AngularPluginSymbol] = fileEmitters;\n            });\n        }\n        const emitRegistration = fileEmitters.register();\n        return emitRegistration;\n    }\n    markResourceUsed(normalizedResourcePath, currentUnused) {\n        if (!currentUnused.has(normalizedResourcePath)) {\n            return;\n        }\n        currentUnused.delete(normalizedResourcePath);\n        const dependencies = this.fileDependencies.get(normalizedResourcePath);\n        if (!dependencies) {\n            return;\n        }\n        for (const dependency of dependencies) {\n            this.markResourceUsed((0, paths_1.normalizePath)(dependency), currentUnused);\n        }\n    }\n    async rebuildRequiredFiles(modules, compilation, fileEmitter) {\n        if (this.requiredFilesToEmit.size === 0) {\n            return;\n        }\n        const filesToRebuild = new Set();\n        for (const requiredFile of this.requiredFilesToEmit) {\n            const history = await this.getFileEmitHistory(requiredFile);\n            if (history) {\n                const emitResult = await fileEmitter(requiredFile);\n                if ((emitResult === null || emitResult === void 0 ? void 0 : emitResult.content) === undefined ||\n                    history.length !== emitResult.content.length ||\n                    emitResult.hash === undefined ||\n                    Buffer.compare(history.hash, emitResult.hash) !== 0) {\n                    // New emit result is different so rebuild using new emit result\n                    this.requiredFilesToEmitCache.set(requiredFile, emitResult);\n                    filesToRebuild.add(requiredFile);\n                }\n            }\n            else {\n                // No emit history so rebuild\n                filesToRebuild.add(requiredFile);\n            }\n        }\n        if (filesToRebuild.size > 0) {\n            const rebuild = (webpackModule) => new Promise((resolve) => compilation.rebuildModule(webpackModule, () => resolve()));\n            const modulesToRebuild = [];\n            for (const webpackModule of modules) {\n                const resource = webpackModule.resource;\n                if (resource && filesToRebuild.has((0, paths_1.normalizePath)(resource))) {\n                    modulesToRebuild.push(webpackModule);\n                }\n            }\n            await Promise.all(modulesToRebuild.map((webpackModule) => rebuild(webpackModule)));\n        }\n        this.requiredFilesToEmit.clear();\n        this.requiredFilesToEmitCache.clear();\n    }\n    loadConfiguration() {\n        const { options: compilerOptions, rootNames, errors, } = this.compilerCli.readConfiguration(this.pluginOptions.tsconfig, this.pluginOptions.compilerOptions);\n        compilerOptions.enableIvy = true;\n        compilerOptions.noEmitOnError = false;\n        compilerOptions.suppressOutputPathCheck = true;\n        compilerOptions.outDir = undefined;\n        compilerOptions.inlineSources = compilerOptions.sourceMap;\n        compilerOptions.inlineSourceMap = false;\n        compilerOptions.mapRoot = undefined;\n        compilerOptions.sourceRoot = undefined;\n        compilerOptions.allowEmptyCodegenFiles = false;\n        compilerOptions.annotationsAs = 'decorators';\n        compilerOptions.enableResourceInlining = false;\n        return { compilerOptions, rootNames, errors };\n    }\n    updateAotProgram(compilerOptions, rootNames, host, diagnosticsReporter, resourceLoader) {\n        // Create the Angular specific program that contains the Angular compiler\n        const angularProgram = new this.compilerCli.NgtscProgram(rootNames, compilerOptions, host, this.ngtscNextProgram);\n        const angularCompiler = angularProgram.compiler;\n        // The `ignoreForEmit` return value can be safely ignored when emitting. Only files\n        // that will be bundled (requested by Webpack) will be emitted. Combined with TypeScript's\n        // eliding of type only imports, this will cause type only files to be automatically ignored.\n        // Internal Angular type check files are also not resolvable by the bundler. Even if they\n        // were somehow errantly imported, the bundler would error before an emit was attempted.\n        // Diagnostics are still collected for all files which requires using `ignoreForDiagnostics`.\n        const { ignoreForDiagnostics, ignoreForEmit } = angularCompiler;\n        // SourceFile versions are required for builder programs.\n        // The wrapped host inside NgtscProgram adds additional files that will not have versions.\n        const typeScriptProgram = angularProgram.getTsProgram();\n        (0, host_1.augmentProgramWithVersioning)(typeScriptProgram);\n        let builder;\n        if (this.watchMode) {\n            builder = this.builder = ts.createEmitAndSemanticDiagnosticsBuilderProgram(typeScriptProgram, host, this.builder);\n            this.ngtscNextProgram = angularProgram;\n        }\n        else {\n            // When not in watch mode, the startup cost of the incremental analysis can be avoided by\n            // using an abstract builder that only wraps a TypeScript program.\n            builder = ts.createAbstractBuilder(typeScriptProgram, host);\n        }\n        // Update semantic diagnostics cache\n        const affectedFiles = new Set();\n        // Analyze affected files when in watch mode for incremental type checking\n        if ('getSemanticDiagnosticsOfNextAffectedFile' in builder) {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const result = builder.getSemanticDiagnosticsOfNextAffectedFile(undefined, (sourceFile) => {\n                    // If the affected file is a TTC shim, add the shim's original source file.\n                    // This ensures that changes that affect TTC are typechecked even when the changes\n                    // are otherwise unrelated from a TS perspective and do not result in Ivy codegen changes.\n                    // For example, changing @Input property types of a directive used in another component's\n                    // template.\n                    if (ignoreForDiagnostics.has(sourceFile) &&\n                        sourceFile.fileName.endsWith('.ngtypecheck.ts')) {\n                        // This file name conversion relies on internal compiler logic and should be converted\n                        // to an official method when available. 15 is length of `.ngtypecheck.ts`\n                        const originalFilename = sourceFile.fileName.slice(0, -15) + '.ts';\n                        const originalSourceFile = builder.getSourceFile(originalFilename);\n                        if (originalSourceFile) {\n                            affectedFiles.add(originalSourceFile);\n                        }\n                        return true;\n                    }\n                    return false;\n                });\n                if (!result) {\n                    break;\n                }\n                affectedFiles.add(result.affected);\n            }\n        }\n        // Collect program level diagnostics\n        const diagnostics = [\n            ...angularCompiler.getOptionDiagnostics(),\n            ...builder.getOptionsDiagnostics(),\n            ...builder.getGlobalDiagnostics(),\n        ];\n        diagnosticsReporter(diagnostics);\n        // Collect source file specific diagnostics\n        for (const sourceFile of builder.getSourceFiles()) {\n            if (!ignoreForDiagnostics.has(sourceFile)) {\n                diagnosticsReporter(builder.getSyntacticDiagnostics(sourceFile));\n                diagnosticsReporter(builder.getSemanticDiagnostics(sourceFile));\n            }\n        }\n        const transformers = (0, transformation_1.createAotTransformers)(builder, this.pluginOptions);\n        const getDependencies = (sourceFile) => {\n            const dependencies = [];\n            for (const resourcePath of angularCompiler.getResourceDependencies(sourceFile)) {\n                dependencies.push(resourcePath, \n                // Retrieve all dependencies of the resource (stylesheet imports, etc.)\n                ...resourceLoader.getResourceDependencies(resourcePath));\n            }\n            return dependencies;\n        };\n        // Required to support asynchronous resource loading\n        // Must be done before creating transformers or getting template diagnostics\n        const pendingAnalysis = angularCompiler\n            .analyzeAsync()\n            .then(() => {\n            var _a;\n            this.requiredFilesToEmit.clear();\n            for (const sourceFile of builder.getSourceFiles()) {\n                if (sourceFile.isDeclarationFile) {\n                    continue;\n                }\n                // Collect sources that are required to be emitted\n                if (!ignoreForEmit.has(sourceFile) &&\n                    !angularCompiler.incrementalDriver.safeToSkipEmit(sourceFile)) {\n                    this.requiredFilesToEmit.add((0, paths_1.normalizePath)(sourceFile.fileName));\n                    // If required to emit, diagnostics may have also changed\n                    if (!ignoreForDiagnostics.has(sourceFile)) {\n                        affectedFiles.add(sourceFile);\n                    }\n                }\n                else if (this.sourceFileCache &&\n                    !affectedFiles.has(sourceFile) &&\n                    !ignoreForDiagnostics.has(sourceFile)) {\n                    // Use cached Angular diagnostics for unchanged and unaffected files\n                    const angularDiagnostics = this.sourceFileCache.getAngularDiagnostics(sourceFile);\n                    if (angularDiagnostics) {\n                        diagnosticsReporter(angularDiagnostics);\n                    }\n                }\n            }\n            // Collect new Angular diagnostics for files affected by changes\n            const OptimizeFor = this.compilerCli.OptimizeFor;\n            const optimizeDiagnosticsFor = affectedFiles.size <= DIAGNOSTICS_AFFECTED_THRESHOLD\n                ? OptimizeFor.SingleFile\n                : OptimizeFor.WholeProgram;\n            for (const affectedFile of affectedFiles) {\n                const angularDiagnostics = angularCompiler.getDiagnosticsForFile(affectedFile, optimizeDiagnosticsFor);\n                diagnosticsReporter(angularDiagnostics);\n                (_a = this.sourceFileCache) === null || _a === void 0 ? void 0 : _a.updateAngularDiagnostics(affectedFile, angularDiagnostics);\n            }\n            return {\n                emitter: this.createFileEmitter(builder, (0, transformation_1.mergeTransformers)(angularCompiler.prepareEmit().transformers, transformers), getDependencies, (sourceFile) => {\n                    this.requiredFilesToEmit.delete((0, paths_1.normalizePath)(sourceFile.fileName));\n                    angularCompiler.incrementalDriver.recordSuccessfulEmit(sourceFile);\n                }),\n            };\n        })\n            .catch((err) => ({ errorMessage: err instanceof Error ? err.message : `${err}` }));\n        const analyzingFileEmitter = async (file) => {\n            const analysis = await pendingAnalysis;\n            if ('errorMessage' in analysis) {\n                throw new Error(analysis.errorMessage);\n            }\n            return analysis.emitter(file);\n        };\n        return {\n            fileEmitter: analyzingFileEmitter,\n            builder,\n            internalFiles: ignoreForEmit,\n        };\n    }\n    updateJitProgram(compilerOptions, rootNames, host, diagnosticsReporter) {\n        let builder;\n        if (this.watchMode) {\n            builder = this.builder = ts.createEmitAndSemanticDiagnosticsBuilderProgram(rootNames, compilerOptions, host, this.builder);\n        }\n        else {\n            // When not in watch mode, the startup cost of the incremental analysis can be avoided by\n            // using an abstract builder that only wraps a TypeScript program.\n            builder = ts.createAbstractBuilder(rootNames, compilerOptions, host);\n        }\n        const diagnostics = [\n            ...builder.getOptionsDiagnostics(),\n            ...builder.getGlobalDiagnostics(),\n            ...builder.getSyntacticDiagnostics(),\n            // Gather incremental semantic diagnostics\n            ...builder.getSemanticDiagnostics(),\n        ];\n        diagnosticsReporter(diagnostics);\n        const transformers = (0, transformation_1.createJitTransformers)(builder, this.compilerCli, this.pluginOptions);\n        return {\n            fileEmitter: this.createFileEmitter(builder, transformers, () => []),\n            builder,\n            internalFiles: undefined,\n        };\n    }\n    createFileEmitter(program, transformers = {}, getExtraDependencies, onAfterEmit) {\n        return async (file) => {\n            const filePath = (0, paths_1.normalizePath)(file);\n            if (this.requiredFilesToEmitCache.has(filePath)) {\n                return this.requiredFilesToEmitCache.get(filePath);\n            }\n            const sourceFile = program.getSourceFile(filePath);\n            if (!sourceFile) {\n                return undefined;\n            }\n            let content;\n            let map;\n            program.emit(sourceFile, (filename, data) => {\n                if (filename.endsWith('.map')) {\n                    map = data;\n                }\n                else if (filename.endsWith('.js')) {\n                    content = data;\n                }\n            }, undefined, undefined, transformers);\n            onAfterEmit === null || onAfterEmit === void 0 ? void 0 : onAfterEmit(sourceFile);\n            // Capture emit history info for Angular rebuild analysis\n            const hash = content ? (await this.addFileEmitHistory(filePath, content)).hash : undefined;\n            const dependencies = [\n                ...(this.fileDependencies.get(filePath) || []),\n                ...getExtraDependencies(sourceFile),\n            ].map(paths_1.externalizePath);\n            return { content, map, dependencies, hash };\n        };\n    }\n    async initializeCompilerCli() {\n        if (this.compilerCliModule) {\n            return;\n        }\n        // This uses a dynamic import to load `@angular/compiler-cli` which may be ESM.\n        // CommonJS code can load ESM code via a dynamic import. Unfortunately, TypeScript\n        // will currently, unconditionally downlevel dynamic import into a require call.\n        // require calls cannot load ESM code and will result in a runtime error. To workaround\n        // this, a Function constructor is used to prevent TypeScript from changing the dynamic import.\n        // Once TypeScript provides support for keeping the dynamic import this workaround can\n        // be dropped.\n        this.compilerCliModule = await new Function(`return import('@angular/compiler-cli');`)();\n        this.compilerNgccModule = await new Function(`return import('@angular/compiler-cli/ngcc');`)();\n    }\n    async addFileEmitHistory(filePath, content) {\n        assert_1.strict.ok(this.webpackCreateHash, 'File emitter is used prior to Webpack compilation');\n        const historyData = {\n            length: content.length,\n            hash: this.webpackCreateHash('xxhash64').update(content).digest(),\n        };\n        if (this.webpackCache) {\n            const history = await this.getFileEmitHistory(filePath);\n            if (!history || Buffer.compare(history.hash, historyData.hash) !== 0) {\n                // Hash doesn't match or item doesn't exist.\n                await this.webpackCache.storePromise(filePath, null, historyData);\n            }\n        }\n        else if (this.watchMode) {\n            // The in memory file emit history is only required during watch mode.\n            this.fileEmitHistory.set(filePath, historyData);\n        }\n        return historyData;\n    }\n    async getFileEmitHistory(filePath) {\n        return this.webpackCache\n            ? this.webpackCache.getPromise(filePath, null)\n            : this.fileEmitHistory.get(filePath);\n    }\n}\nexports.AngularWebpackPlugin = AngularWebpackPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}