{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStylesConfig = exports.resolveGlobalStyles = void 0;\n\nconst fs = __importStar(require(\"fs\"));\n\nconst mini_css_extract_plugin_1 = __importDefault(require(\"mini-css-extract-plugin\"));\n\nconst path = __importStar(require(\"path\"));\n\nconst webpack_1 = require(\"webpack\");\n\nconst sass_service_1 = require(\"../../sass/sass-service\");\n\nconst plugins_1 = require(\"../plugins\");\n\nconst css_optimizer_plugin_1 = require(\"../plugins/css-optimizer-plugin\");\n\nconst helpers_1 = require(\"../utils/helpers\");\n\nfunction resolveGlobalStyles(styleEntrypoints, root, preserveSymlinks, skipResolution = false) {\n  const entryPoints = {};\n  const noInjectNames = [];\n  const paths = [];\n\n  if (styleEntrypoints.length === 0) {\n    return {\n      entryPoints,\n      noInjectNames,\n      paths\n    };\n  }\n\n  for (const style of (0, helpers_1.normalizeExtraEntryPoints)(styleEntrypoints, 'styles')) {\n    let stylesheetPath = style.input;\n\n    if (!skipResolution) {\n      stylesheetPath = path.resolve(root, stylesheetPath);\n\n      if (!fs.existsSync(stylesheetPath)) {\n        try {\n          stylesheetPath = require.resolve(style.input, {\n            paths: [root]\n          });\n        } catch {}\n      }\n    }\n\n    if (!preserveSymlinks) {\n      stylesheetPath = fs.realpathSync(stylesheetPath);\n    } // Add style entry points.\n\n\n    if (entryPoints[style.bundleName]) {\n      entryPoints[style.bundleName].push(stylesheetPath);\n    } else {\n      entryPoints[style.bundleName] = [stylesheetPath];\n    } // Add non injected styles to the list.\n\n\n    if (!style.inject) {\n      noInjectNames.push(style.bundleName);\n    } // Add global css paths.\n\n\n    paths.push(stylesheetPath);\n  }\n\n  return {\n    entryPoints,\n    noInjectNames,\n    paths\n  };\n}\n\nexports.resolveGlobalStyles = resolveGlobalStyles; // eslint-disable-next-line max-lines-per-function\n\nfunction getStylesConfig(wco) {\n  var _a, _b, _c;\n\n  const postcssImports = require('postcss-import');\n\n  const postcssPresetEnv = require('postcss-preset-env');\n\n  const {\n    root,\n    buildOptions\n  } = wco;\n  const extraPlugins = [];\n  extraPlugins.push(new plugins_1.AnyComponentStyleBudgetChecker(buildOptions.budgets));\n  const cssSourceMap = buildOptions.sourceMap.styles; // Determine hashing format.\n\n  const hashFormat = (0, helpers_1.getOutputHashFormat)(buildOptions.outputHashing); // use includePaths from appConfig\n\n  const includePaths = (_c = (_b = (_a = buildOptions.stylePreprocessorOptions) === null || _a === void 0 ? void 0 : _a.includePaths) === null || _b === void 0 ? void 0 : _b.map(p => path.resolve(root, p))) !== null && _c !== void 0 ? _c : []; // Process global styles.\n\n  const {\n    entryPoints,\n    noInjectNames,\n    paths: globalStylePaths\n  } = resolveGlobalStyles(buildOptions.styles, root, !!buildOptions.preserveSymlinks);\n\n  if (noInjectNames.length > 0) {\n    // Add plugin to remove hashes from lazy styles.\n    extraPlugins.push(new plugins_1.RemoveHashPlugin({\n      chunkNames: noInjectNames,\n      hashFormat\n    }));\n  }\n\n  if (globalStylePaths.some(p => p.endsWith('.styl'))) {\n    wco.logger.warn('Stylus usage is deprecated and will be removed in a future major version. ' + 'To opt-out of the deprecated behaviour, please migrate to another stylesheet language.');\n  }\n\n  const sassImplementation = new sass_service_1.SassWorkerImplementation();\n  const sassTildeUsageMessage = new Set();\n  extraPlugins.push({\n    apply(compiler) {\n      compiler.hooks.shutdown.tap('sass-worker', () => {\n        sassImplementation.close();\n      });\n      compiler.hooks.afterCompile.tap('sass-worker', compilation => {\n        for (const message of sassTildeUsageMessage) {\n          compilation.warnings.push(new webpack_1.WebpackError(message));\n        }\n\n        sassTildeUsageMessage.clear();\n      });\n    }\n\n  });\n  const assetNameTemplate = (0, helpers_1.assetNameTemplateFactory)(hashFormat);\n  const extraPostcssPlugins = []; // Attempt to setup Tailwind CSS\n  // Only load Tailwind CSS plugin if configuration file was found.\n  // This acts as a guard to ensure the project actually wants to use Tailwind CSS.\n  // The package may be unknowningly present due to a third-party transitive package dependency.\n\n  const tailwindConfigPath = getTailwindConfigPath(wco);\n\n  if (tailwindConfigPath) {\n    let tailwindPackagePath;\n\n    try {\n      tailwindPackagePath = require.resolve('tailwindcss', {\n        paths: [wco.root]\n      });\n    } catch {\n      const relativeTailwindConfigPath = path.relative(wco.root, tailwindConfigPath);\n      wco.logger.warn(`Tailwind CSS configuration file found (${relativeTailwindConfigPath})` + ` but the 'tailwindcss' package is not installed.` + ` To enable Tailwind CSS, please install the 'tailwindcss' package.`);\n    }\n\n    if (tailwindPackagePath) {\n      extraPostcssPlugins.push(require(tailwindPackagePath)({\n        config: tailwindConfigPath\n      }));\n    }\n  }\n\n  const postcssPresetEnvPlugin = postcssPresetEnv({\n    browsers: buildOptions.supportedBrowsers,\n    autoprefixer: true,\n    stage: 3\n  });\n\n  const postcssOptionsCreator = (inlineSourcemaps, extracted) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const optionGenerator = loader => ({\n      map: inlineSourcemaps ? {\n        inline: true,\n        annotation: false\n      } : undefined,\n      plugins: [postcssImports({\n        resolve: url => url.startsWith('~') ? url.slice(1) : url,\n        load: filename => {\n          return new Promise((resolve, reject) => {\n            loader.fs.readFile(filename, (err, data) => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              const content = data.toString();\n              resolve(content);\n            });\n          });\n        }\n      }), (0, plugins_1.PostcssCliResources)({\n        baseHref: buildOptions.baseHref,\n        deployUrl: buildOptions.deployUrl,\n        resourcesOutputPath: buildOptions.resourcesOutputPath,\n        loader,\n        filename: assetNameTemplate,\n        emitFile: buildOptions.platform !== 'server',\n        extracted\n      }), ...extraPostcssPlugins, postcssPresetEnvPlugin]\n    }); // postcss-loader fails when trying to determine configuration files for data URIs\n\n\n    optionGenerator.config = false;\n    return optionGenerator;\n  }; // load component css as raw strings\n\n\n  const componentsSourceMap = !!(cssSourceMap && // Never use component css sourcemap when style optimizations are on.\n  // It will just increase bundle size without offering good debug experience.\n  !buildOptions.optimization.styles.minify && // Inline all sourcemap types except hidden ones, which are the same as no sourcemaps\n  // for component css.\n  !buildOptions.sourceMap.hidden); // extract global css from js files into own css file.\n\n  extraPlugins.push(new mini_css_extract_plugin_1.default({\n    filename: `[name]${hashFormat.extract}.css`\n  }));\n\n  if (!buildOptions.hmr) {\n    // don't remove `.js` files for `.css` when we are using HMR these contain HMR accept codes.\n    // suppress empty .js files in css only entry points.\n    extraPlugins.push(new plugins_1.SuppressExtractedTextChunksWebpackPlugin());\n  }\n\n  const postCss = require('postcss');\n\n  const postCssLoaderPath = require.resolve('postcss-loader');\n\n  const componentStyleLoaders = [{\n    loader: postCssLoaderPath,\n    options: {\n      implementation: postCss,\n      postcssOptions: postcssOptionsCreator(componentsSourceMap, false)\n    }\n  }];\n  const globalStyleLoaders = [{\n    loader: mini_css_extract_plugin_1.default.loader\n  }, {\n    loader: require.resolve('css-loader'),\n    options: {\n      url: false,\n      sourceMap: !!cssSourceMap\n    }\n  }, {\n    loader: postCssLoaderPath,\n    options: {\n      implementation: postCss,\n      postcssOptions: postcssOptionsCreator(false, true),\n      sourceMap: !!cssSourceMap\n    }\n  }];\n  const styleLanguages = [{\n    extensions: ['css'],\n    use: []\n  }, {\n    extensions: ['scss'],\n    use: [{\n      loader: require.resolve('resolve-url-loader'),\n      options: {\n        sourceMap: cssSourceMap\n      }\n    }, {\n      loader: require.resolve('sass-loader'),\n      options: {\n        implementation: sassImplementation,\n        sourceMap: true,\n        sassOptions: {\n          importer: (url, from) => {\n            if (url.charAt(0) === '~') {\n              sassTildeUsageMessage.add(`'${from}' imports '${url}' with a tilde. Usage of '~' in imports is deprecated.`);\n            }\n\n            return null;\n          },\n          // Prevent use of `fibers` package as it no longer works in newer Node.js versions\n          fiber: false,\n          // bootstrap-sass requires a minimum precision of 8\n          precision: 8,\n          includePaths,\n          // Use expanded as otherwise sass will remove comments that are needed for autoprefixer\n          // Ex: /* autoprefixer grid: autoplace */\n          // See: https://github.com/webpack-contrib/sass-loader/blob/45ad0be17264ceada5f0b4fb87e9357abe85c4ff/src/getSassOptions.js#L68-L70\n          outputStyle: 'expanded',\n          // Silences compiler warnings from 3rd party stylesheets\n          quietDeps: !buildOptions.verbose,\n          verbose: buildOptions.verbose\n        }\n      }\n    }]\n  }, {\n    extensions: ['sass'],\n    use: [{\n      loader: require.resolve('resolve-url-loader'),\n      options: {\n        sourceMap: cssSourceMap\n      }\n    }, {\n      loader: require.resolve('sass-loader'),\n      options: {\n        implementation: sassImplementation,\n        sourceMap: true,\n        sassOptions: {\n          importer: (url, from) => {\n            if (url.charAt(0) === '~') {\n              sassTildeUsageMessage.add(`'${from}' imports '${url}' with a tilde. Usage of '~' in imports is deprecated.`);\n            }\n\n            return null;\n          },\n          // Prevent use of `fibers` package as it no longer works in newer Node.js versions\n          fiber: false,\n          indentedSyntax: true,\n          // bootstrap-sass requires a minimum precision of 8\n          precision: 8,\n          includePaths,\n          // Use expanded as otherwise sass will remove comments that are needed for autoprefixer\n          // Ex: /* autoprefixer grid: autoplace */\n          // See: https://github.com/webpack-contrib/sass-loader/blob/45ad0be17264ceada5f0b4fb87e9357abe85c4ff/src/getSassOptions.js#L68-L70\n          outputStyle: 'expanded',\n          // Silences compiler warnings from 3rd party stylesheets\n          quietDeps: !buildOptions.verbose,\n          verbose: buildOptions.verbose\n        }\n      }\n    }]\n  }, {\n    extensions: ['less'],\n    use: [{\n      loader: require.resolve('less-loader'),\n      options: {\n        implementation: require('less'),\n        sourceMap: cssSourceMap,\n        lessOptions: {\n          javascriptEnabled: true,\n          paths: includePaths\n        }\n      }\n    }]\n  }, {\n    extensions: ['styl'],\n    use: [{\n      loader: require.resolve('stylus-loader'),\n      options: {\n        sourceMap: cssSourceMap,\n        stylusOptions: {\n          compress: false,\n          sourceMap: {\n            comment: false\n          },\n          paths: includePaths\n        }\n      }\n    }]\n  }];\n  return {\n    entry: entryPoints,\n    module: {\n      rules: styleLanguages.map(({\n        extensions,\n        use\n      }) => ({\n        test: new RegExp(`\\\\.(?:${extensions.join('|')})$`, 'i'),\n        rules: [// Setup processing rules for global and component styles\n        {\n          oneOf: [// Global styles are only defined global styles\n          {\n            use: globalStyleLoaders,\n            include: globalStylePaths,\n            resourceQuery: {\n              not: [/\\?ngResource/]\n            }\n          }, // Component styles are all styles except defined global styles\n          {\n            use: componentStyleLoaders,\n            type: 'asset/source',\n            resourceQuery: /\\?ngResource/\n          }]\n        }, {\n          use\n        }]\n      }))\n    },\n    optimization: {\n      minimizer: buildOptions.optimization.styles.minify ? [new css_optimizer_plugin_1.CssOptimizerPlugin({\n        supportedBrowsers: buildOptions.supportedBrowsers\n      })] : undefined\n    },\n    plugins: extraPlugins\n  };\n}\n\nexports.getStylesConfig = getStylesConfig;\n\nfunction getTailwindConfigPath({\n  projectRoot,\n  root\n}) {\n  // A configuration file can exist in the project or workspace root\n  // The list of valid config files can be found:\n  // https://github.com/tailwindlabs/tailwindcss/blob/8845d112fb62d79815b50b3bae80c317450b8b92/src/util/resolveConfigPath.js#L46-L52\n  const tailwindConfigFiles = ['tailwind.config.js', 'tailwind.config.cjs'];\n\n  for (const basePath of [projectRoot, root]) {\n    for (const configFile of tailwindConfigFiles) {\n      // Irrespective of the name project level configuration should always take precedence.\n      const fullPath = path.join(basePath, configFile);\n\n      if (fs.existsSync(fullPath)) {\n        return fullPath;\n      }\n    }\n  }\n\n  return undefined;\n}","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","getStylesConfig","resolveGlobalStyles","fs","require","mini_css_extract_plugin_1","path","webpack_1","sass_service_1","plugins_1","css_optimizer_plugin_1","helpers_1","styleEntrypoints","root","preserveSymlinks","skipResolution","entryPoints","noInjectNames","paths","length","style","normalizeExtraEntryPoints","stylesheetPath","input","resolve","existsSync","realpathSync","bundleName","push","inject","wco","_a","_b","_c","postcssImports","postcssPresetEnv","buildOptions","extraPlugins","AnyComponentStyleBudgetChecker","budgets","cssSourceMap","sourceMap","styles","hashFormat","getOutputHashFormat","outputHashing","includePaths","stylePreprocessorOptions","map","p","globalStylePaths","RemoveHashPlugin","chunkNames","some","endsWith","logger","warn","sassImplementation","SassWorkerImplementation","sassTildeUsageMessage","Set","apply","compiler","hooks","shutdown","tap","close","afterCompile","compilation","message","warnings","WebpackError","clear","assetNameTemplate","assetNameTemplateFactory","extraPostcssPlugins","tailwindConfigPath","getTailwindConfigPath","tailwindPackagePath","relativeTailwindConfigPath","relative","config","postcssPresetEnvPlugin","browsers","supportedBrowsers","autoprefixer","stage","postcssOptionsCreator","inlineSourcemaps","extracted","optionGenerator","loader","inline","annotation","plugins","url","startsWith","slice","load","filename","Promise","reject","readFile","err","data","content","toString","PostcssCliResources","baseHref","deployUrl","resourcesOutputPath","emitFile","platform","componentsSourceMap","optimization","minify","hidden","default","extract","hmr","SuppressExtractedTextChunksWebpackPlugin","postCss","postCssLoaderPath","componentStyleLoaders","options","implementation","postcssOptions","globalStyleLoaders","styleLanguages","extensions","use","sassOptions","importer","from","charAt","add","fiber","precision","outputStyle","quietDeps","verbose","indentedSyntax","lessOptions","javascriptEnabled","stylusOptions","compress","comment","entry","module","rules","test","RegExp","join","oneOf","include","resourceQuery","not","type","minimizer","CssOptimizerPlugin","projectRoot","tailwindConfigFiles","basePath","configFile","fullPath"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@angular-devkit/build-angular/src/webpack/configs/styles.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getStylesConfig = exports.resolveGlobalStyles = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst mini_css_extract_plugin_1 = __importDefault(require(\"mini-css-extract-plugin\"));\nconst path = __importStar(require(\"path\"));\nconst webpack_1 = require(\"webpack\");\nconst sass_service_1 = require(\"../../sass/sass-service\");\nconst plugins_1 = require(\"../plugins\");\nconst css_optimizer_plugin_1 = require(\"../plugins/css-optimizer-plugin\");\nconst helpers_1 = require(\"../utils/helpers\");\nfunction resolveGlobalStyles(styleEntrypoints, root, preserveSymlinks, skipResolution = false) {\n    const entryPoints = {};\n    const noInjectNames = [];\n    const paths = [];\n    if (styleEntrypoints.length === 0) {\n        return { entryPoints, noInjectNames, paths };\n    }\n    for (const style of (0, helpers_1.normalizeExtraEntryPoints)(styleEntrypoints, 'styles')) {\n        let stylesheetPath = style.input;\n        if (!skipResolution) {\n            stylesheetPath = path.resolve(root, stylesheetPath);\n            if (!fs.existsSync(stylesheetPath)) {\n                try {\n                    stylesheetPath = require.resolve(style.input, { paths: [root] });\n                }\n                catch { }\n            }\n        }\n        if (!preserveSymlinks) {\n            stylesheetPath = fs.realpathSync(stylesheetPath);\n        }\n        // Add style entry points.\n        if (entryPoints[style.bundleName]) {\n            entryPoints[style.bundleName].push(stylesheetPath);\n        }\n        else {\n            entryPoints[style.bundleName] = [stylesheetPath];\n        }\n        // Add non injected styles to the list.\n        if (!style.inject) {\n            noInjectNames.push(style.bundleName);\n        }\n        // Add global css paths.\n        paths.push(stylesheetPath);\n    }\n    return { entryPoints, noInjectNames, paths };\n}\nexports.resolveGlobalStyles = resolveGlobalStyles;\n// eslint-disable-next-line max-lines-per-function\nfunction getStylesConfig(wco) {\n    var _a, _b, _c;\n    const postcssImports = require('postcss-import');\n    const postcssPresetEnv = require('postcss-preset-env');\n    const { root, buildOptions } = wco;\n    const extraPlugins = [];\n    extraPlugins.push(new plugins_1.AnyComponentStyleBudgetChecker(buildOptions.budgets));\n    const cssSourceMap = buildOptions.sourceMap.styles;\n    // Determine hashing format.\n    const hashFormat = (0, helpers_1.getOutputHashFormat)(buildOptions.outputHashing);\n    // use includePaths from appConfig\n    const includePaths = (_c = (_b = (_a = buildOptions.stylePreprocessorOptions) === null || _a === void 0 ? void 0 : _a.includePaths) === null || _b === void 0 ? void 0 : _b.map((p) => path.resolve(root, p))) !== null && _c !== void 0 ? _c : [];\n    // Process global styles.\n    const { entryPoints, noInjectNames, paths: globalStylePaths, } = resolveGlobalStyles(buildOptions.styles, root, !!buildOptions.preserveSymlinks);\n    if (noInjectNames.length > 0) {\n        // Add plugin to remove hashes from lazy styles.\n        extraPlugins.push(new plugins_1.RemoveHashPlugin({ chunkNames: noInjectNames, hashFormat }));\n    }\n    if (globalStylePaths.some((p) => p.endsWith('.styl'))) {\n        wco.logger.warn('Stylus usage is deprecated and will be removed in a future major version. ' +\n            'To opt-out of the deprecated behaviour, please migrate to another stylesheet language.');\n    }\n    const sassImplementation = new sass_service_1.SassWorkerImplementation();\n    const sassTildeUsageMessage = new Set();\n    extraPlugins.push({\n        apply(compiler) {\n            compiler.hooks.shutdown.tap('sass-worker', () => {\n                sassImplementation.close();\n            });\n            compiler.hooks.afterCompile.tap('sass-worker', (compilation) => {\n                for (const message of sassTildeUsageMessage) {\n                    compilation.warnings.push(new webpack_1.WebpackError(message));\n                }\n                sassTildeUsageMessage.clear();\n            });\n        },\n    });\n    const assetNameTemplate = (0, helpers_1.assetNameTemplateFactory)(hashFormat);\n    const extraPostcssPlugins = [];\n    // Attempt to setup Tailwind CSS\n    // Only load Tailwind CSS plugin if configuration file was found.\n    // This acts as a guard to ensure the project actually wants to use Tailwind CSS.\n    // The package may be unknowningly present due to a third-party transitive package dependency.\n    const tailwindConfigPath = getTailwindConfigPath(wco);\n    if (tailwindConfigPath) {\n        let tailwindPackagePath;\n        try {\n            tailwindPackagePath = require.resolve('tailwindcss', { paths: [wco.root] });\n        }\n        catch {\n            const relativeTailwindConfigPath = path.relative(wco.root, tailwindConfigPath);\n            wco.logger.warn(`Tailwind CSS configuration file found (${relativeTailwindConfigPath})` +\n                ` but the 'tailwindcss' package is not installed.` +\n                ` To enable Tailwind CSS, please install the 'tailwindcss' package.`);\n        }\n        if (tailwindPackagePath) {\n            extraPostcssPlugins.push(require(tailwindPackagePath)({ config: tailwindConfigPath }));\n        }\n    }\n    const postcssPresetEnvPlugin = postcssPresetEnv({\n        browsers: buildOptions.supportedBrowsers,\n        autoprefixer: true,\n        stage: 3,\n    });\n    const postcssOptionsCreator = (inlineSourcemaps, extracted) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const optionGenerator = (loader) => ({\n            map: inlineSourcemaps\n                ? {\n                    inline: true,\n                    annotation: false,\n                }\n                : undefined,\n            plugins: [\n                postcssImports({\n                    resolve: (url) => (url.startsWith('~') ? url.slice(1) : url),\n                    load: (filename) => {\n                        return new Promise((resolve, reject) => {\n                            loader.fs.readFile(filename, (err, data) => {\n                                if (err) {\n                                    reject(err);\n                                    return;\n                                }\n                                const content = data.toString();\n                                resolve(content);\n                            });\n                        });\n                    },\n                }),\n                (0, plugins_1.PostcssCliResources)({\n                    baseHref: buildOptions.baseHref,\n                    deployUrl: buildOptions.deployUrl,\n                    resourcesOutputPath: buildOptions.resourcesOutputPath,\n                    loader,\n                    filename: assetNameTemplate,\n                    emitFile: buildOptions.platform !== 'server',\n                    extracted,\n                }),\n                ...extraPostcssPlugins,\n                postcssPresetEnvPlugin,\n            ],\n        });\n        // postcss-loader fails when trying to determine configuration files for data URIs\n        optionGenerator.config = false;\n        return optionGenerator;\n    };\n    // load component css as raw strings\n    const componentsSourceMap = !!(cssSourceMap &&\n        // Never use component css sourcemap when style optimizations are on.\n        // It will just increase bundle size without offering good debug experience.\n        !buildOptions.optimization.styles.minify &&\n        // Inline all sourcemap types except hidden ones, which are the same as no sourcemaps\n        // for component css.\n        !buildOptions.sourceMap.hidden);\n    // extract global css from js files into own css file.\n    extraPlugins.push(new mini_css_extract_plugin_1.default({ filename: `[name]${hashFormat.extract}.css` }));\n    if (!buildOptions.hmr) {\n        // don't remove `.js` files for `.css` when we are using HMR these contain HMR accept codes.\n        // suppress empty .js files in css only entry points.\n        extraPlugins.push(new plugins_1.SuppressExtractedTextChunksWebpackPlugin());\n    }\n    const postCss = require('postcss');\n    const postCssLoaderPath = require.resolve('postcss-loader');\n    const componentStyleLoaders = [\n        {\n            loader: postCssLoaderPath,\n            options: {\n                implementation: postCss,\n                postcssOptions: postcssOptionsCreator(componentsSourceMap, false),\n            },\n        },\n    ];\n    const globalStyleLoaders = [\n        {\n            loader: mini_css_extract_plugin_1.default.loader,\n        },\n        {\n            loader: require.resolve('css-loader'),\n            options: {\n                url: false,\n                sourceMap: !!cssSourceMap,\n            },\n        },\n        {\n            loader: postCssLoaderPath,\n            options: {\n                implementation: postCss,\n                postcssOptions: postcssOptionsCreator(false, true),\n                sourceMap: !!cssSourceMap,\n            },\n        },\n    ];\n    const styleLanguages = [\n        {\n            extensions: ['css'],\n            use: [],\n        },\n        {\n            extensions: ['scss'],\n            use: [\n                {\n                    loader: require.resolve('resolve-url-loader'),\n                    options: {\n                        sourceMap: cssSourceMap,\n                    },\n                },\n                {\n                    loader: require.resolve('sass-loader'),\n                    options: {\n                        implementation: sassImplementation,\n                        sourceMap: true,\n                        sassOptions: {\n                            importer: (url, from) => {\n                                if (url.charAt(0) === '~') {\n                                    sassTildeUsageMessage.add(`'${from}' imports '${url}' with a tilde. Usage of '~' in imports is deprecated.`);\n                                }\n                                return null;\n                            },\n                            // Prevent use of `fibers` package as it no longer works in newer Node.js versions\n                            fiber: false,\n                            // bootstrap-sass requires a minimum precision of 8\n                            precision: 8,\n                            includePaths,\n                            // Use expanded as otherwise sass will remove comments that are needed for autoprefixer\n                            // Ex: /* autoprefixer grid: autoplace */\n                            // See: https://github.com/webpack-contrib/sass-loader/blob/45ad0be17264ceada5f0b4fb87e9357abe85c4ff/src/getSassOptions.js#L68-L70\n                            outputStyle: 'expanded',\n                            // Silences compiler warnings from 3rd party stylesheets\n                            quietDeps: !buildOptions.verbose,\n                            verbose: buildOptions.verbose,\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            extensions: ['sass'],\n            use: [\n                {\n                    loader: require.resolve('resolve-url-loader'),\n                    options: {\n                        sourceMap: cssSourceMap,\n                    },\n                },\n                {\n                    loader: require.resolve('sass-loader'),\n                    options: {\n                        implementation: sassImplementation,\n                        sourceMap: true,\n                        sassOptions: {\n                            importer: (url, from) => {\n                                if (url.charAt(0) === '~') {\n                                    sassTildeUsageMessage.add(`'${from}' imports '${url}' with a tilde. Usage of '~' in imports is deprecated.`);\n                                }\n                                return null;\n                            },\n                            // Prevent use of `fibers` package as it no longer works in newer Node.js versions\n                            fiber: false,\n                            indentedSyntax: true,\n                            // bootstrap-sass requires a minimum precision of 8\n                            precision: 8,\n                            includePaths,\n                            // Use expanded as otherwise sass will remove comments that are needed for autoprefixer\n                            // Ex: /* autoprefixer grid: autoplace */\n                            // See: https://github.com/webpack-contrib/sass-loader/blob/45ad0be17264ceada5f0b4fb87e9357abe85c4ff/src/getSassOptions.js#L68-L70\n                            outputStyle: 'expanded',\n                            // Silences compiler warnings from 3rd party stylesheets\n                            quietDeps: !buildOptions.verbose,\n                            verbose: buildOptions.verbose,\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            extensions: ['less'],\n            use: [\n                {\n                    loader: require.resolve('less-loader'),\n                    options: {\n                        implementation: require('less'),\n                        sourceMap: cssSourceMap,\n                        lessOptions: {\n                            javascriptEnabled: true,\n                            paths: includePaths,\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            extensions: ['styl'],\n            use: [\n                {\n                    loader: require.resolve('stylus-loader'),\n                    options: {\n                        sourceMap: cssSourceMap,\n                        stylusOptions: {\n                            compress: false,\n                            sourceMap: { comment: false },\n                            paths: includePaths,\n                        },\n                    },\n                },\n            ],\n        },\n    ];\n    return {\n        entry: entryPoints,\n        module: {\n            rules: styleLanguages.map(({ extensions, use }) => ({\n                test: new RegExp(`\\\\.(?:${extensions.join('|')})$`, 'i'),\n                rules: [\n                    // Setup processing rules for global and component styles\n                    {\n                        oneOf: [\n                            // Global styles are only defined global styles\n                            {\n                                use: globalStyleLoaders,\n                                include: globalStylePaths,\n                                resourceQuery: { not: [/\\?ngResource/] },\n                            },\n                            // Component styles are all styles except defined global styles\n                            {\n                                use: componentStyleLoaders,\n                                type: 'asset/source',\n                                resourceQuery: /\\?ngResource/,\n                            },\n                        ],\n                    },\n                    { use },\n                ],\n            })),\n        },\n        optimization: {\n            minimizer: buildOptions.optimization.styles.minify\n                ? [\n                    new css_optimizer_plugin_1.CssOptimizerPlugin({\n                        supportedBrowsers: buildOptions.supportedBrowsers,\n                    }),\n                ]\n                : undefined,\n        },\n        plugins: extraPlugins,\n    };\n}\nexports.getStylesConfig = getStylesConfig;\nfunction getTailwindConfigPath({ projectRoot, root }) {\n    // A configuration file can exist in the project or workspace root\n    // The list of valid config files can be found:\n    // https://github.com/tailwindlabs/tailwindcss/blob/8845d112fb62d79815b50b3bae80c317450b8b92/src/util/resolveConfigPath.js#L46-L52\n    const tailwindConfigFiles = ['tailwind.config.js', 'tailwind.config.cjs'];\n    for (const basePath of [projectRoot, root]) {\n        for (const configFile of tailwindConfigFiles) {\n            // Irrespective of the name project level configuration should always take precedence.\n            const fullPath = path.join(basePath, configFile);\n            if (fs.existsSync(fullPath)) {\n                return fullPath;\n            }\n        }\n    }\n    return undefined;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}