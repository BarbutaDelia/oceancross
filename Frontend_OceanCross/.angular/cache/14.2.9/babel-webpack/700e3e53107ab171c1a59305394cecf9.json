{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst SocketIO = require('socket.io');\n\nconst di = require('di');\n\nconst util = require('util');\n\nconst spawn = require('child_process').spawn;\n\nconst tmp = require('tmp');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst NetUtils = require('./utils/net-utils');\n\nconst root = global || window || this;\n\nconst cfg = require('./config');\n\nconst logger = require('./logger');\n\nconst constant = require('./constants');\n\nconst watcher = require('./watcher');\n\nconst plugin = require('./plugin');\n\nconst createServeFile = require('./web-server').createServeFile;\n\nconst createServeStaticFile = require('./web-server').createServeStaticFile;\n\nconst createFilesPromise = require('./web-server').createFilesPromise;\n\nconst createWebServer = require('./web-server').createWebServer;\n\nconst preprocessor = require('./preprocessor');\n\nconst Launcher = require('./launcher').Launcher;\n\nconst FileList = require('./file-list');\n\nconst reporter = require('./reporter');\n\nconst helper = require('./helper');\n\nconst events = require('./events');\n\nconst KarmaEventEmitter = events.EventEmitter;\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst Executor = require('./executor');\n\nconst Browser = require('./browser');\n\nconst BrowserCollection = require('./browser_collection');\n\nconst EmitterWrapper = require('./emitter_wrapper');\n\nconst processWrapper = new EmitterWrapper(process);\n\nfunction createSocketIoServer(webServer, executor, config) {\n  const server = new SocketIO.Server(webServer, {\n    // avoid destroying http upgrades from socket.io to get proxied websockets working\n    destroyUpgrade: false,\n    path: config.urlRoot + 'socket.io/',\n    transports: config.transports,\n    forceJSONP: config.forceJSONP,\n    // Default is 5000 in socket.io v2.x and v3.x.\n    pingTimeout: config.pingTimeout || 5000,\n    // Default in v2 is 1e8 and coverage results can fail at 1e6\n    maxHttpBufferSize: 1e8\n  }); // hack to overcome circular dependency\n\n  executor.socketIoSockets = server.sockets;\n  return server;\n}\n\nclass Server extends KarmaEventEmitter {\n  constructor(cliOptionsOrConfig, done) {\n    super();\n    cliOptionsOrConfig = cliOptionsOrConfig || {};\n    this.log = logger.create('karma-server');\n    done = helper.isFunction(done) ? done : process.exit;\n    this.loadErrors = [];\n    let config;\n\n    if (cliOptionsOrConfig instanceof cfg.Config) {\n      config = cliOptionsOrConfig;\n    } else {\n      logger.setupFromConfig({\n        colors: cliOptionsOrConfig.colors,\n        logLevel: cliOptionsOrConfig.logLevel\n      });\n      const deprecatedCliOptionsMessage = 'Passing raw CLI options to `new Server(config, done)` is ' + 'deprecated. Use ' + '`parseConfig(configFilePath, cliOptions, {promiseConfig: true, throwErrors: true})` ' + 'to prepare a processed `Config` instance and pass that as the ' + '`config` argument instead.';\n      this.log.warn(deprecatedCliOptionsMessage);\n\n      try {\n        config = cfg.parseConfig(cliOptionsOrConfig.configFile, cliOptionsOrConfig, {\n          promiseConfig: false,\n          throwErrors: true\n        });\n      } catch (parseConfigError) {\n        // TODO: change how `done` falls back to exit in next major version\n        //  SEE: https://github.com/karma-runner/karma/pull/3635#discussion_r565399378\n        done(1);\n        return;\n      }\n    }\n\n    this.log.debug('Final config', util.inspect(config, false,\n    /** depth **/\n    null));\n\n    if (!config.autoWatch && !config.singleRun) {\n      this.log.warn('`autowatch` and `singleRun` are both `false`. In order to execute tests use `karma run`.');\n    }\n\n    let modules = [{\n      helper: ['value', helper],\n      logger: ['value', logger],\n      done: ['value', done || process.exit],\n      emitter: ['value', this],\n      server: ['value', this],\n      watcher: ['value', watcher],\n      launcher: ['factory', Launcher.factory],\n      config: ['value', config],\n      instantiatePlugin: ['factory', plugin.createInstantiatePlugin],\n      preprocess: ['factory', preprocessor.createPriorityPreprocessor],\n      fileList: ['factory', FileList.factory],\n      webServer: ['factory', createWebServer],\n      serveFile: ['factory', createServeFile],\n      serveStaticFile: ['factory', createServeStaticFile],\n      filesPromise: ['factory', createFilesPromise],\n      socketServer: ['factory', createSocketIoServer],\n      executor: ['factory', Executor.factory],\n      // TODO: Deprecated. Remove in the next major\n      customFileHandlers: ['value', []],\n      reporter: ['factory', reporter.createReporters],\n      capturedBrowsers: ['factory', BrowserCollection.factory],\n      args: ['value', {}],\n      timer: ['value', {\n        setTimeout() {\n          return setTimeout.apply(root, arguments);\n        },\n\n        clearTimeout\n      }]\n    }];\n    this.on('load_error', (type, name) => {\n      this.log.debug(`Registered a load error of type ${type} with name ${name}`);\n      this.loadErrors.push([type, name]);\n    });\n    modules = modules.concat(plugin.resolve(config.plugins, this));\n    this._injector = new di.Injector(modules);\n  }\n\n  start() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const config = _this.get('config');\n\n      try {\n        _this._boundServer = yield NetUtils.bindAvailablePort(config.port, config.listenAddress);\n\n        _this._boundServer.on('connection', socket => {\n          // Attach an error handler to avoid UncaughtException errors.\n          socket.on('error', err => {\n            // Errors on this socket are retried, ignore them\n            _this.log.debug('Ignoring error on webserver connection: ' + err);\n          });\n        });\n\n        config.port = _this._boundServer.address().port;\n        yield _this._injector.invoke(_this._start, _this);\n      } catch (err) {\n        _this.log.error(`Server start failed on port ${config.port}: ${err}`);\n\n        _this._close(1);\n      }\n    })();\n  }\n\n  get(token) {\n    return this._injector.get(token);\n  }\n\n  refreshFiles() {\n    return this._fileList ? this._fileList.refresh() : Promise.resolve();\n  }\n\n  refreshFile(path) {\n    return this._fileList ? this._fileList.changeFile(path) : Promise.resolve();\n  }\n\n  emitExitAsync(code) {\n    const name = 'exit';\n    let pending = this.listeners(name).length;\n    const deferred = helper.defer();\n\n    function resolve() {\n      deferred.resolve(code);\n    }\n\n    try {\n      this.emit(name, newCode => {\n        if (newCode && typeof newCode === 'number') {\n          // Only update code if it is given and not zero\n          code = newCode;\n        }\n\n        if (! --pending) {\n          resolve();\n        }\n      });\n\n      if (!pending) {\n        resolve();\n      }\n    } catch (err) {\n      deferred.reject(err);\n    }\n\n    return deferred.promise;\n  }\n\n  _start(config, launcher, preprocess, fileList, capturedBrowsers, executor, done) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (config.detached) {\n        _this2._detach(config, done);\n\n        return;\n      }\n\n      _this2._fileList = fileList;\n      yield Promise.all(config.frameworks.map(framework => _this2._injector.get('framework:' + framework)));\n\n      const webServer = _this2._injector.get('webServer');\n\n      const socketServer = _this2._injector.get('socketServer');\n\n      const singleRunDoneBrowsers = Object.create(null);\n      const singleRunBrowsers = new BrowserCollection(new EventEmitter());\n      let singleRunBrowserNotCaptured = false;\n      webServer.on('error', err => {\n        _this2.log.error(`Webserver fail ${err}`);\n\n        _this2._close(1);\n      });\n\n      const afterPreprocess = () => {\n        if (config.autoWatch) {\n          const watcher = _this2.get('watcher');\n\n          _this2._injector.invoke(watcher);\n        }\n\n        webServer.listen(_this2._boundServer, () => {\n          _this2.log.info(`Karma v${constant.VERSION} server started at ${config.protocol}//${config.hostname}:${config.port}${config.urlRoot}`);\n\n          _this2.emit('listening', config.port);\n\n          if (config.browsers && config.browsers.length) {\n            _this2._injector.invoke(launcher.launch, launcher).forEach(browserLauncher => {\n              singleRunDoneBrowsers[browserLauncher.id] = false;\n            });\n          }\n\n          if (_this2.loadErrors.length > 0) {\n            _this2.log.error(new Error(`Found ${_this2.loadErrors.length} load error${_this2.loadErrors.length === 1 ? '' : 's'}`));\n\n            _this2._close(1);\n          }\n        });\n      };\n\n      fileList.refresh().then(afterPreprocess, err => {\n        _this2.log.error('Error during file loading or preprocessing\\n' + err.stack || err);\n\n        afterPreprocess();\n      });\n\n      _this2.on('browsers_change', () => socketServer.sockets.emit('info', capturedBrowsers.serialize()));\n\n      _this2.on('browser_register', browser => {\n        launcher.markCaptured(browser.id);\n\n        if (launcher.areAllCaptured()) {\n          _this2.emit('browsers_ready');\n\n          if (config.autoWatch) {\n            executor.schedule();\n          }\n        }\n      });\n\n      if (config.browserConsoleLogOptions && config.browserConsoleLogOptions.path) {\n        const configLevel = config.browserConsoleLogOptions.level || 'debug';\n        const configFormat = config.browserConsoleLogOptions.format || '%b %T: %m';\n        const configPath = config.browserConsoleLogOptions.path;\n        const configPathDir = path.dirname(configPath);\n        if (!fs.existsSync(configPathDir)) fs.mkdirSync(configPathDir, {\n          recursive: true\n        });\n\n        _this2.log.info(`Writing browser console to file: ${configPath}`);\n\n        const browserLogFile = fs.openSync(configPath, 'w+');\n        const levels = ['log', 'error', 'warn', 'info', 'debug'];\n\n        _this2.on('browser_log', function (browser, message, level) {\n          if (levels.indexOf(level.toLowerCase()) > levels.indexOf(configLevel)) {\n            return;\n          }\n\n          if (!helper.isString(message)) {\n            message = util.inspect(message, {\n              showHidden: false,\n              colors: false\n            });\n          }\n\n          const logMap = {\n            '%m': message,\n            '%t': level.toLowerCase(),\n            '%T': level.toUpperCase(),\n            '%b': browser\n          };\n          const logString = configFormat.replace(/%[mtTb]/g, m => logMap[m]);\n          this.log.debug(`Writing browser console line: ${logString}`);\n          fs.writeSync(browserLogFile, logString + '\\n');\n        });\n      }\n\n      socketServer.sockets.on('connection', socket => {\n        _this2.log.debug(`A browser has connected on socket ${socket.id}`);\n\n        const replySocketEvents = events.bufferEvents(socket, ['start', 'info', 'karma_error', 'result', 'complete']);\n        socket.on('error', err => {\n          _this2.log.debug('karma server socket error: ' + err);\n        });\n        socket.on('register', info => {\n          const knownBrowser = info.id ? capturedBrowsers.getById(info.id) || singleRunBrowsers.getById(info.id) : null;\n\n          if (knownBrowser) {\n            knownBrowser.reconnect(socket, info.isSocketReconnect);\n          } else {\n            const newBrowser = _this2._injector.createChild([{\n              id: ['value', info.id || null],\n              fullName: ['value', helper.isDefined(info.displayName) ? info.displayName : info.name],\n              socket: ['value', socket]\n            }]).invoke(Browser.factory);\n\n            newBrowser.init();\n\n            if (config.singleRun) {\n              newBrowser.execute();\n              singleRunBrowsers.add(newBrowser);\n            }\n          }\n\n          replySocketEvents();\n        });\n      });\n\n      const emitRunCompleteIfAllBrowsersDone = () => {\n        if (Object.keys(singleRunDoneBrowsers).every(key => singleRunDoneBrowsers[key])) {\n          _this2.emit('run_complete', singleRunBrowsers, singleRunBrowsers.getResults(singleRunBrowserNotCaptured, config));\n        }\n      };\n\n      _this2.on('browser_complete', completedBrowser => {\n        if (completedBrowser.lastResult.disconnected && completedBrowser.disconnectsCount <= config.browserDisconnectTolerance) {\n          _this2.log.info(`Restarting ${completedBrowser.name} (${completedBrowser.disconnectsCount} of ${config.browserDisconnectTolerance} attempts)`);\n\n          if (!launcher.restart(completedBrowser.id)) {\n            _this2.emit('browser_restart_failure', completedBrowser);\n          }\n        } else {\n          _this2.emit('browser_complete_with_no_more_retries', completedBrowser);\n        }\n      });\n\n      _this2.on('stop', done => {\n        _this2.log.debug('Received stop event, exiting.');\n\n        _this2._close();\n\n        done();\n      });\n\n      if (config.singleRun) {\n        _this2.on('browser_restart_failure', completedBrowser => {\n          singleRunDoneBrowsers[completedBrowser.id] = true;\n          emitRunCompleteIfAllBrowsersDone();\n        }); // This is the normal exit trigger.\n\n\n        _this2.on('browser_complete_with_no_more_retries', function (completedBrowser) {\n          singleRunDoneBrowsers[completedBrowser.id] = true;\n\n          if (launcher.kill(completedBrowser.id)) {\n            completedBrowser.remove();\n          }\n\n          emitRunCompleteIfAllBrowsersDone();\n        });\n\n        _this2.on('browser_process_failure', browserLauncher => {\n          singleRunDoneBrowsers[browserLauncher.id] = true;\n          singleRunBrowserNotCaptured = true;\n          emitRunCompleteIfAllBrowsersDone();\n        });\n\n        _this2.on('run_complete', (browsers, results) => {\n          _this2.log.debug('Run complete, exiting.');\n\n          _this2._close(results.exitCode);\n        });\n\n        _this2.emit('run_start', singleRunBrowsers);\n      }\n\n      if (config.autoWatch) {\n        _this2.on('file_list_modified', () => {\n          _this2.log.debug('List of files has changed, trying to execute');\n\n          if (config.restartOnFileChange) {\n            socketServer.sockets.emit('stop');\n          }\n\n          executor.schedule();\n        });\n      }\n\n      processWrapper.on('SIGINT', () => _this2._close());\n      processWrapper.on('SIGTERM', () => _this2._close());\n\n      const reportError = error => {\n        _this2.log.error(error);\n\n        process.emit('infrastructure_error', error);\n\n        _this2._close(1);\n      };\n\n      processWrapper.on('unhandledRejection', error => {\n        _this2.log.error(`UnhandledRejection: ${error.stack || error.message || String(error)}`);\n\n        reportError(error);\n      });\n      processWrapper.on('uncaughtException', error => {\n        _this2.log.error(`UncaughtException: ${error.stack || error.message || String(error)}`);\n\n        reportError(error);\n      });\n    })();\n  }\n\n  _detach(config, done) {\n    const tmpFile = tmp.fileSync({\n      keep: true\n    });\n    this.log.info('Starting karma detached');\n    this.log.info('Run \"karma stop\" to stop the server.');\n    this.log.debug(`Writing config to tmp-file ${tmpFile.name}`);\n    config.detached = false;\n\n    try {\n      fs.writeFileSync(tmpFile.name, JSON.stringify(config), 'utf8');\n    } catch (e) {\n      this.log.error(\"Couldn't write temporary configuration file\");\n      done(1);\n      return;\n    }\n\n    const child = spawn(process.argv[0], [path.resolve(__dirname, '../lib/detached.js'), tmpFile.name], {\n      detached: true,\n      stdio: 'ignore'\n    });\n    child.unref();\n  }\n  /**\n   * Cleanup all resources allocated by Karma and call the `done` callback\n   * with the result of the tests execution.\n   *\n   * @param [exitCode] - Optional exit code. If omitted will be computed by\n   * 'exit' event listeners.\n   */\n\n\n  _close(exitCode) {\n    const webServer = this._injector.get('webServer');\n\n    const socketServer = this._injector.get('socketServer');\n\n    const done = this._injector.get('done');\n\n    const webServerCloseTimeout = 3000;\n    const sockets = socketServer.sockets.sockets;\n    Object.keys(sockets).forEach(id => {\n      const socket = sockets[id];\n      socket.removeAllListeners('disconnect');\n\n      if (!socket.disconnected) {\n        process.nextTick(socket.disconnect.bind(socket));\n      }\n    });\n    this.emitExitAsync(exitCode).catch(err => {\n      this.log.error('Error while calling exit event listeners\\n' + err.stack || err);\n      return 1;\n    }).then(code => {\n      socketServer.sockets.removeAllListeners();\n      socketServer.close();\n      let removeAllListenersDone = false;\n\n      const removeAllListeners = () => {\n        if (removeAllListenersDone) {\n          return;\n        }\n\n        removeAllListenersDone = true;\n        webServer.removeAllListeners();\n        processWrapper.removeAllListeners();\n        done(code || 0);\n      };\n\n      const closeTimeout = setTimeout(removeAllListeners, webServerCloseTimeout);\n      webServer.close(() => {\n        clearTimeout(closeTimeout);\n        removeAllListeners();\n      });\n    });\n  }\n\n  stop() {\n    return this.emitAsync('stop');\n  }\n\n}\n\nServer.prototype._start.$inject = ['config', 'launcher', 'preprocess', 'fileList', 'capturedBrowsers', 'executor', 'done'];\nmodule.exports = Server;","map":{"version":3,"names":["SocketIO","require","di","util","spawn","tmp","fs","path","NetUtils","root","global","window","cfg","logger","constant","watcher","plugin","createServeFile","createServeStaticFile","createFilesPromise","createWebServer","preprocessor","Launcher","FileList","reporter","helper","events","KarmaEventEmitter","EventEmitter","Executor","Browser","BrowserCollection","EmitterWrapper","processWrapper","process","createSocketIoServer","webServer","executor","config","server","Server","destroyUpgrade","urlRoot","transports","forceJSONP","pingTimeout","maxHttpBufferSize","socketIoSockets","sockets","constructor","cliOptionsOrConfig","done","log","create","isFunction","exit","loadErrors","Config","setupFromConfig","colors","logLevel","deprecatedCliOptionsMessage","warn","parseConfig","configFile","promiseConfig","throwErrors","parseConfigError","debug","inspect","autoWatch","singleRun","modules","emitter","launcher","factory","instantiatePlugin","createInstantiatePlugin","preprocess","createPriorityPreprocessor","fileList","serveFile","serveStaticFile","filesPromise","socketServer","customFileHandlers","createReporters","capturedBrowsers","args","timer","setTimeout","apply","arguments","clearTimeout","on","type","name","push","concat","resolve","plugins","_injector","Injector","start","get","_boundServer","bindAvailablePort","port","listenAddress","socket","err","address","invoke","_start","error","_close","token","refreshFiles","_fileList","refresh","Promise","refreshFile","changeFile","emitExitAsync","code","pending","listeners","length","deferred","defer","emit","newCode","reject","promise","detached","_detach","all","frameworks","map","framework","singleRunDoneBrowsers","Object","singleRunBrowsers","singleRunBrowserNotCaptured","afterPreprocess","listen","info","VERSION","protocol","hostname","browsers","launch","forEach","browserLauncher","id","Error","then","stack","serialize","browser","markCaptured","areAllCaptured","schedule","browserConsoleLogOptions","configLevel","level","configFormat","format","configPath","configPathDir","dirname","existsSync","mkdirSync","recursive","browserLogFile","openSync","levels","message","indexOf","toLowerCase","isString","showHidden","logMap","toUpperCase","logString","replace","m","writeSync","replySocketEvents","bufferEvents","knownBrowser","getById","reconnect","isSocketReconnect","newBrowser","createChild","fullName","isDefined","displayName","init","execute","add","emitRunCompleteIfAllBrowsersDone","keys","every","key","getResults","completedBrowser","lastResult","disconnected","disconnectsCount","browserDisconnectTolerance","restart","kill","remove","results","exitCode","restartOnFileChange","reportError","String","tmpFile","fileSync","keep","writeFileSync","JSON","stringify","e","child","argv","__dirname","stdio","unref","webServerCloseTimeout","removeAllListeners","nextTick","disconnect","bind","catch","close","removeAllListenersDone","closeTimeout","stop","emitAsync","prototype","$inject","module","exports"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/karma/lib/server.js"],"sourcesContent":["'use strict'\n\nconst SocketIO = require('socket.io')\nconst di = require('di')\nconst util = require('util')\nconst spawn = require('child_process').spawn\nconst tmp = require('tmp')\nconst fs = require('fs')\nconst path = require('path')\n\nconst NetUtils = require('./utils/net-utils')\nconst root = global || window || this\n\nconst cfg = require('./config')\nconst logger = require('./logger')\nconst constant = require('./constants')\nconst watcher = require('./watcher')\nconst plugin = require('./plugin')\n\nconst createServeFile = require('./web-server').createServeFile\nconst createServeStaticFile = require('./web-server').createServeStaticFile\nconst createFilesPromise = require('./web-server').createFilesPromise\nconst createWebServer = require('./web-server').createWebServer\nconst preprocessor = require('./preprocessor')\nconst Launcher = require('./launcher').Launcher\nconst FileList = require('./file-list')\nconst reporter = require('./reporter')\nconst helper = require('./helper')\nconst events = require('./events')\nconst KarmaEventEmitter = events.EventEmitter\nconst EventEmitter = require('events').EventEmitter\nconst Executor = require('./executor')\nconst Browser = require('./browser')\nconst BrowserCollection = require('./browser_collection')\nconst EmitterWrapper = require('./emitter_wrapper')\nconst processWrapper = new EmitterWrapper(process)\n\nfunction createSocketIoServer (webServer, executor, config) {\n  const server = new SocketIO.Server(webServer, {\n    // avoid destroying http upgrades from socket.io to get proxied websockets working\n    destroyUpgrade: false,\n    path: config.urlRoot + 'socket.io/',\n    transports: config.transports,\n    forceJSONP: config.forceJSONP,\n    // Default is 5000 in socket.io v2.x and v3.x.\n    pingTimeout: config.pingTimeout || 5000,\n    // Default in v2 is 1e8 and coverage results can fail at 1e6\n    maxHttpBufferSize: 1e8\n  })\n\n  // hack to overcome circular dependency\n  executor.socketIoSockets = server.sockets\n\n  return server\n}\n\nclass Server extends KarmaEventEmitter {\n  constructor (cliOptionsOrConfig, done) {\n    super()\n    cliOptionsOrConfig = cliOptionsOrConfig || {}\n    this.log = logger.create('karma-server')\n    done = helper.isFunction(done) ? done : process.exit\n    this.loadErrors = []\n\n    let config\n    if (cliOptionsOrConfig instanceof cfg.Config) {\n      config = cliOptionsOrConfig\n    } else {\n      logger.setupFromConfig({\n        colors: cliOptionsOrConfig.colors,\n        logLevel: cliOptionsOrConfig.logLevel\n      })\n      const deprecatedCliOptionsMessage =\n        'Passing raw CLI options to `new Server(config, done)` is ' +\n        'deprecated. Use ' +\n        '`parseConfig(configFilePath, cliOptions, {promiseConfig: true, throwErrors: true})` ' +\n        'to prepare a processed `Config` instance and pass that as the ' +\n        '`config` argument instead.'\n      this.log.warn(deprecatedCliOptionsMessage)\n      try {\n        config = cfg.parseConfig(\n          cliOptionsOrConfig.configFile,\n          cliOptionsOrConfig,\n          {\n            promiseConfig: false,\n            throwErrors: true\n          }\n        )\n      } catch (parseConfigError) {\n        // TODO: change how `done` falls back to exit in next major version\n        //  SEE: https://github.com/karma-runner/karma/pull/3635#discussion_r565399378\n        done(1)\n        return\n      }\n    }\n\n    this.log.debug('Final config', util.inspect(config, false, /** depth **/ null))\n\n    if (!config.autoWatch && !config.singleRun) {\n      this.log.warn('`autowatch` and `singleRun` are both `false`. In order to execute tests use `karma run`.')\n    }\n\n    let modules = [{\n      helper: ['value', helper],\n      logger: ['value', logger],\n      done: ['value', done || process.exit],\n      emitter: ['value', this],\n      server: ['value', this],\n      watcher: ['value', watcher],\n      launcher: ['factory', Launcher.factory],\n      config: ['value', config],\n      instantiatePlugin: ['factory', plugin.createInstantiatePlugin],\n      preprocess: ['factory', preprocessor.createPriorityPreprocessor],\n      fileList: ['factory', FileList.factory],\n      webServer: ['factory', createWebServer],\n      serveFile: ['factory', createServeFile],\n      serveStaticFile: ['factory', createServeStaticFile],\n      filesPromise: ['factory', createFilesPromise],\n      socketServer: ['factory', createSocketIoServer],\n      executor: ['factory', Executor.factory],\n      // TODO: Deprecated. Remove in the next major\n      customFileHandlers: ['value', []],\n      reporter: ['factory', reporter.createReporters],\n      capturedBrowsers: ['factory', BrowserCollection.factory],\n      args: ['value', {}],\n      timer: ['value', {\n        setTimeout () {\n          return setTimeout.apply(root, arguments)\n        },\n        clearTimeout\n      }]\n    }]\n\n    this.on('load_error', (type, name) => {\n      this.log.debug(`Registered a load error of type ${type} with name ${name}`)\n      this.loadErrors.push([type, name])\n    })\n\n    modules = modules.concat(plugin.resolve(config.plugins, this))\n    this._injector = new di.Injector(modules)\n  }\n\n  async start () {\n    const config = this.get('config')\n    try {\n      this._boundServer = await NetUtils.bindAvailablePort(config.port, config.listenAddress)\n      this._boundServer.on('connection', (socket) => {\n        // Attach an error handler to avoid UncaughtException errors.\n        socket.on('error', (err) => {\n          // Errors on this socket are retried, ignore them\n          this.log.debug('Ignoring error on webserver connection: ' + err)\n        })\n      })\n      config.port = this._boundServer.address().port\n      await this._injector.invoke(this._start, this)\n    } catch (err) {\n      this.log.error(`Server start failed on port ${config.port}: ${err}`)\n      this._close(1)\n    }\n  }\n\n  get (token) {\n    return this._injector.get(token)\n  }\n\n  refreshFiles () {\n    return this._fileList ? this._fileList.refresh() : Promise.resolve()\n  }\n\n  refreshFile (path) {\n    return this._fileList ? this._fileList.changeFile(path) : Promise.resolve()\n  }\n\n  emitExitAsync (code) {\n    const name = 'exit'\n    let pending = this.listeners(name).length\n    const deferred = helper.defer()\n\n    function resolve () {\n      deferred.resolve(code)\n    }\n\n    try {\n      this.emit(name, (newCode) => {\n        if (newCode && typeof newCode === 'number') {\n          // Only update code if it is given and not zero\n          code = newCode\n        }\n        if (!--pending) {\n          resolve()\n        }\n      })\n\n      if (!pending) {\n        resolve()\n      }\n    } catch (err) {\n      deferred.reject(err)\n    }\n    return deferred.promise\n  }\n\n  async _start (config, launcher, preprocess, fileList, capturedBrowsers, executor, done) {\n    if (config.detached) {\n      this._detach(config, done)\n      return\n    }\n\n    this._fileList = fileList\n\n    await Promise.all(\n      config.frameworks.map((framework) => this._injector.get('framework:' + framework))\n    )\n\n    const webServer = this._injector.get('webServer')\n    const socketServer = this._injector.get('socketServer')\n\n    const singleRunDoneBrowsers = Object.create(null)\n    const singleRunBrowsers = new BrowserCollection(new EventEmitter())\n    let singleRunBrowserNotCaptured = false\n\n    webServer.on('error', (err) => {\n      this.log.error(`Webserver fail ${err}`)\n      this._close(1)\n    })\n\n    const afterPreprocess = () => {\n      if (config.autoWatch) {\n        const watcher = this.get('watcher')\n        this._injector.invoke(watcher)\n      }\n\n      webServer.listen(this._boundServer, () => {\n        this.log.info(`Karma v${constant.VERSION} server started at ${config.protocol}//${config.hostname}:${config.port}${config.urlRoot}`)\n\n        this.emit('listening', config.port)\n        if (config.browsers && config.browsers.length) {\n          this._injector.invoke(launcher.launch, launcher).forEach((browserLauncher) => {\n            singleRunDoneBrowsers[browserLauncher.id] = false\n          })\n        }\n        if (this.loadErrors.length > 0) {\n          this.log.error(new Error(`Found ${this.loadErrors.length} load error${this.loadErrors.length === 1 ? '' : 's'}`))\n          this._close(1)\n        }\n      })\n    }\n\n    fileList.refresh().then(afterPreprocess, (err) => {\n      this.log.error('Error during file loading or preprocessing\\n' + err.stack || err)\n      afterPreprocess()\n    })\n\n    this.on('browsers_change', () => socketServer.sockets.emit('info', capturedBrowsers.serialize()))\n\n    this.on('browser_register', (browser) => {\n      launcher.markCaptured(browser.id)\n\n      if (launcher.areAllCaptured()) {\n        this.emit('browsers_ready')\n\n        if (config.autoWatch) {\n          executor.schedule()\n        }\n      }\n    })\n\n    if (config.browserConsoleLogOptions && config.browserConsoleLogOptions.path) {\n      const configLevel = config.browserConsoleLogOptions.level || 'debug'\n      const configFormat = config.browserConsoleLogOptions.format || '%b %T: %m'\n      const configPath = config.browserConsoleLogOptions.path\n      const configPathDir = path.dirname(configPath)\n      if (!fs.existsSync(configPathDir)) fs.mkdirSync(configPathDir, { recursive: true })\n      this.log.info(`Writing browser console to file: ${configPath}`)\n      const browserLogFile = fs.openSync(configPath, 'w+')\n      const levels = ['log', 'error', 'warn', 'info', 'debug']\n      this.on('browser_log', function (browser, message, level) {\n        if (levels.indexOf(level.toLowerCase()) > levels.indexOf(configLevel)) {\n          return\n        }\n        if (!helper.isString(message)) {\n          message = util.inspect(message, { showHidden: false, colors: false })\n        }\n        const logMap = { '%m': message, '%t': level.toLowerCase(), '%T': level.toUpperCase(), '%b': browser }\n        const logString = configFormat.replace(/%[mtTb]/g, (m) => logMap[m])\n        this.log.debug(`Writing browser console line: ${logString}`)\n        fs.writeSync(browserLogFile, logString + '\\n')\n      })\n    }\n\n    socketServer.sockets.on('connection', (socket) => {\n      this.log.debug(`A browser has connected on socket ${socket.id}`)\n\n      const replySocketEvents = events.bufferEvents(socket, ['start', 'info', 'karma_error', 'result', 'complete'])\n\n      socket.on('error', (err) => {\n        this.log.debug('karma server socket error: ' + err)\n      })\n\n      socket.on('register', (info) => {\n        const knownBrowser = info.id ? (capturedBrowsers.getById(info.id) || singleRunBrowsers.getById(info.id)) : null\n\n        if (knownBrowser) {\n          knownBrowser.reconnect(socket, info.isSocketReconnect)\n        } else {\n          const newBrowser = this._injector.createChild([{\n            id: ['value', info.id || null],\n            fullName: ['value', (helper.isDefined(info.displayName) ? info.displayName : info.name)],\n            socket: ['value', socket]\n          }]).invoke(Browser.factory)\n\n          newBrowser.init()\n\n          if (config.singleRun) {\n            newBrowser.execute()\n            singleRunBrowsers.add(newBrowser)\n          }\n        }\n\n        replySocketEvents()\n      })\n    })\n\n    const emitRunCompleteIfAllBrowsersDone = () => {\n      if (Object.keys(singleRunDoneBrowsers).every((key) => singleRunDoneBrowsers[key])) {\n        this.emit('run_complete', singleRunBrowsers, singleRunBrowsers.getResults(singleRunBrowserNotCaptured, config))\n      }\n    }\n\n    this.on('browser_complete', (completedBrowser) => {\n      if (completedBrowser.lastResult.disconnected && completedBrowser.disconnectsCount <= config.browserDisconnectTolerance) {\n        this.log.info(`Restarting ${completedBrowser.name} (${completedBrowser.disconnectsCount} of ${config.browserDisconnectTolerance} attempts)`)\n\n        if (!launcher.restart(completedBrowser.id)) {\n          this.emit('browser_restart_failure', completedBrowser)\n        }\n      } else {\n        this.emit('browser_complete_with_no_more_retries', completedBrowser)\n      }\n    })\n\n    this.on('stop', (done) => {\n      this.log.debug('Received stop event, exiting.')\n      this._close()\n      done()\n    })\n\n    if (config.singleRun) {\n      this.on('browser_restart_failure', (completedBrowser) => {\n        singleRunDoneBrowsers[completedBrowser.id] = true\n        emitRunCompleteIfAllBrowsersDone()\n      })\n\n      // This is the normal exit trigger.\n      this.on('browser_complete_with_no_more_retries', function (completedBrowser) {\n        singleRunDoneBrowsers[completedBrowser.id] = true\n\n        if (launcher.kill(completedBrowser.id)) {\n          completedBrowser.remove()\n        }\n\n        emitRunCompleteIfAllBrowsersDone()\n      })\n\n      this.on('browser_process_failure', (browserLauncher) => {\n        singleRunDoneBrowsers[browserLauncher.id] = true\n        singleRunBrowserNotCaptured = true\n\n        emitRunCompleteIfAllBrowsersDone()\n      })\n\n      this.on('run_complete', (browsers, results) => {\n        this.log.debug('Run complete, exiting.')\n        this._close(results.exitCode)\n      })\n\n      this.emit('run_start', singleRunBrowsers)\n    }\n\n    if (config.autoWatch) {\n      this.on('file_list_modified', () => {\n        this.log.debug('List of files has changed, trying to execute')\n        if (config.restartOnFileChange) {\n          socketServer.sockets.emit('stop')\n        }\n        executor.schedule()\n      })\n    }\n\n    processWrapper.on('SIGINT', () => this._close())\n    processWrapper.on('SIGTERM', () => this._close())\n\n    const reportError = (error) => {\n      this.log.error(error)\n      process.emit('infrastructure_error', error)\n      this._close(1)\n    }\n\n    processWrapper.on('unhandledRejection', (error) => {\n      this.log.error(`UnhandledRejection: ${error.stack || error.message || String(error)}`)\n      reportError(error)\n    })\n\n    processWrapper.on('uncaughtException', (error) => {\n      this.log.error(`UncaughtException: ${error.stack || error.message || String(error)}`)\n      reportError(error)\n    })\n  }\n\n  _detach (config, done) {\n    const tmpFile = tmp.fileSync({ keep: true })\n    this.log.info('Starting karma detached')\n    this.log.info('Run \"karma stop\" to stop the server.')\n    this.log.debug(`Writing config to tmp-file ${tmpFile.name}`)\n    config.detached = false\n    try {\n      fs.writeFileSync(tmpFile.name, JSON.stringify(config), 'utf8')\n    } catch (e) {\n      this.log.error(\"Couldn't write temporary configuration file\")\n      done(1)\n      return\n    }\n    const child = spawn(process.argv[0], [path.resolve(__dirname, '../lib/detached.js'), tmpFile.name], {\n      detached: true,\n      stdio: 'ignore'\n    })\n    child.unref()\n  }\n\n  /**\n   * Cleanup all resources allocated by Karma and call the `done` callback\n   * with the result of the tests execution.\n   *\n   * @param [exitCode] - Optional exit code. If omitted will be computed by\n   * 'exit' event listeners.\n   */\n  _close (exitCode) {\n    const webServer = this._injector.get('webServer')\n    const socketServer = this._injector.get('socketServer')\n    const done = this._injector.get('done')\n\n    const webServerCloseTimeout = 3000\n    const sockets = socketServer.sockets.sockets\n\n    Object.keys(sockets).forEach((id) => {\n      const socket = sockets[id]\n      socket.removeAllListeners('disconnect')\n      if (!socket.disconnected) {\n        process.nextTick(socket.disconnect.bind(socket))\n      }\n    })\n\n    this.emitExitAsync(exitCode).catch((err) => {\n      this.log.error('Error while calling exit event listeners\\n' + err.stack || err)\n      return 1\n    }).then((code) => {\n      socketServer.sockets.removeAllListeners()\n      socketServer.close()\n\n      let removeAllListenersDone = false\n      const removeAllListeners = () => {\n        if (removeAllListenersDone) {\n          return\n        }\n        removeAllListenersDone = true\n        webServer.removeAllListeners()\n        processWrapper.removeAllListeners()\n        done(code || 0)\n      }\n\n      const closeTimeout = setTimeout(removeAllListeners, webServerCloseTimeout)\n\n      webServer.close(() => {\n        clearTimeout(closeTimeout)\n        removeAllListeners()\n      })\n    })\n  }\n\n  stop () {\n    return this.emitAsync('stop')\n  }\n}\n\nServer.prototype._start.$inject = ['config', 'launcher', 'preprocess', 'fileList', 'capturedBrowsers', 'executor', 'done']\n\nmodule.exports = Server\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}