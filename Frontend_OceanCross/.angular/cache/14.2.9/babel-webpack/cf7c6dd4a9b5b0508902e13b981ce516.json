{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst sass_1 = require(\"sass\");\n\nconst worker_threads_1 = require(\"worker_threads\");\n\nif (!worker_threads_1.parentPort || !worker_threads_1.workerData) {\n  throw new Error('Sass worker must be executed as a Worker.');\n} // The importer variables are used to proxy import requests to the main thread\n\n\nconst {\n  workerImporterPort,\n  importerSignal\n} = worker_threads_1.workerData;\nworker_threads_1.parentPort.on('message', ({\n  id,\n  hasImporter,\n  options\n}) => {\n  try {\n    if (hasImporter) {\n      // When a custom importer function is present, the importer request must be proxied\n      // back to the main thread where it can be executed.\n      // This process must be synchronous from the perspective of dart-sass. The `Atomics`\n      // functions combined with the shared memory `importSignal` and the Node.js\n      // `receiveMessageOnPort` function are used to ensure synchronous behavior.\n      options.importer = function (url, prev) {\n        var _a;\n\n        Atomics.store(importerSignal, 0, 0);\n        const {\n          fromImport\n        } = this;\n        workerImporterPort.postMessage({\n          id,\n          url,\n          prev,\n          fromImport\n        });\n        Atomics.wait(importerSignal, 0, 0);\n        return (_a = (0, worker_threads_1.receiveMessageOnPort)(workerImporterPort)) === null || _a === void 0 ? void 0 : _a.message;\n      };\n    } // The synchronous Sass render function can be up to two times faster than the async variant\n\n\n    const result = (0, sass_1.renderSync)(options);\n    worker_threads_1.parentPort === null || worker_threads_1.parentPort === void 0 ? void 0 : worker_threads_1.parentPort.postMessage({\n      id,\n      result\n    }); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (error) {\n    // Needed because V8 will only serialize the message and stack properties of an Error instance.\n    const {\n      formatted,\n      file,\n      line,\n      column,\n      message,\n      stack\n    } = error;\n    worker_threads_1.parentPort === null || worker_threads_1.parentPort === void 0 ? void 0 : worker_threads_1.parentPort.postMessage({\n      id,\n      error: {\n        formatted,\n        file,\n        line,\n        column,\n        message,\n        stack\n      }\n    });\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","sass_1","require","worker_threads_1","parentPort","workerData","Error","workerImporterPort","importerSignal","on","id","hasImporter","options","importer","url","prev","_a","Atomics","store","fromImport","postMessage","wait","receiveMessageOnPort","message","result","renderSync","error","formatted","file","line","column","stack"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@angular-devkit/build-angular/src/sass/worker.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sass_1 = require(\"sass\");\nconst worker_threads_1 = require(\"worker_threads\");\nif (!worker_threads_1.parentPort || !worker_threads_1.workerData) {\n    throw new Error('Sass worker must be executed as a Worker.');\n}\n// The importer variables are used to proxy import requests to the main thread\nconst { workerImporterPort, importerSignal } = worker_threads_1.workerData;\nworker_threads_1.parentPort.on('message', ({ id, hasImporter, options }) => {\n    try {\n        if (hasImporter) {\n            // When a custom importer function is present, the importer request must be proxied\n            // back to the main thread where it can be executed.\n            // This process must be synchronous from the perspective of dart-sass. The `Atomics`\n            // functions combined with the shared memory `importSignal` and the Node.js\n            // `receiveMessageOnPort` function are used to ensure synchronous behavior.\n            options.importer = function (url, prev) {\n                var _a;\n                Atomics.store(importerSignal, 0, 0);\n                const { fromImport } = this;\n                workerImporterPort.postMessage({ id, url, prev, fromImport });\n                Atomics.wait(importerSignal, 0, 0);\n                return (_a = (0, worker_threads_1.receiveMessageOnPort)(workerImporterPort)) === null || _a === void 0 ? void 0 : _a.message;\n            };\n        }\n        // The synchronous Sass render function can be up to two times faster than the async variant\n        const result = (0, sass_1.renderSync)(options);\n        worker_threads_1.parentPort === null || worker_threads_1.parentPort === void 0 ? void 0 : worker_threads_1.parentPort.postMessage({ id, result });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }\n    catch (error) {\n        // Needed because V8 will only serialize the message and stack properties of an Error instance.\n        const { formatted, file, line, column, message, stack } = error;\n        worker_threads_1.parentPort === null || worker_threads_1.parentPort === void 0 ? void 0 : worker_threads_1.parentPort.postMessage({ id, error: { formatted, file, line, column, message, stack } });\n    }\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,gBAAD,CAAhC;;AACA,IAAI,CAACC,gBAAgB,CAACC,UAAlB,IAAgC,CAACD,gBAAgB,CAACE,UAAtD,EAAkE;EAC9D,MAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AACH,C,CACD;;;AACA,MAAM;EAAEC,kBAAF;EAAsBC;AAAtB,IAAyCL,gBAAgB,CAACE,UAAhE;AACAF,gBAAgB,CAACC,UAAjB,CAA4BK,EAA5B,CAA+B,SAA/B,EAA0C,CAAC;EAAEC,EAAF;EAAMC,WAAN;EAAmBC;AAAnB,CAAD,KAAkC;EACxE,IAAI;IACA,IAAID,WAAJ,EAAiB;MACb;MACA;MACA;MACA;MACA;MACAC,OAAO,CAACC,QAAR,GAAmB,UAAUC,GAAV,EAAeC,IAAf,EAAqB;QACpC,IAAIC,EAAJ;;QACAC,OAAO,CAACC,KAAR,CAAcV,cAAd,EAA8B,CAA9B,EAAiC,CAAjC;QACA,MAAM;UAAEW;QAAF,IAAiB,IAAvB;QACAZ,kBAAkB,CAACa,WAAnB,CAA+B;UAAEV,EAAF;UAAMI,GAAN;UAAWC,IAAX;UAAiBI;QAAjB,CAA/B;QACAF,OAAO,CAACI,IAAR,CAAab,cAAb,EAA6B,CAA7B,EAAgC,CAAhC;QACA,OAAO,CAACQ,EAAE,GAAG,CAAC,GAAGb,gBAAgB,CAACmB,oBAArB,EAA2Cf,kBAA3C,CAAN,MAA0E,IAA1E,IAAkFS,EAAE,KAAK,KAAK,CAA9F,GAAkG,KAAK,CAAvG,GAA2GA,EAAE,CAACO,OAArH;MACH,CAPD;IAQH,CAfD,CAgBA;;;IACA,MAAMC,MAAM,GAAG,CAAC,GAAGvB,MAAM,CAACwB,UAAX,EAAuBb,OAAvB,CAAf;IACAT,gBAAgB,CAACC,UAAjB,KAAgC,IAAhC,IAAwCD,gBAAgB,CAACC,UAAjB,KAAgC,KAAK,CAA7E,GAAiF,KAAK,CAAtF,GAA0FD,gBAAgB,CAACC,UAAjB,CAA4BgB,WAA5B,CAAwC;MAAEV,EAAF;MAAMc;IAAN,CAAxC,CAA1F,CAlBA,CAmBA;EACH,CApBD,CAqBA,OAAOE,KAAP,EAAc;IACV;IACA,MAAM;MAAEC,SAAF;MAAaC,IAAb;MAAmBC,IAAnB;MAAyBC,MAAzB;MAAiCP,OAAjC;MAA0CQ;IAA1C,IAAoDL,KAA1D;IACAvB,gBAAgB,CAACC,UAAjB,KAAgC,IAAhC,IAAwCD,gBAAgB,CAACC,UAAjB,KAAgC,KAAK,CAA7E,GAAiF,KAAK,CAAtF,GAA0FD,gBAAgB,CAACC,UAAjB,CAA4BgB,WAA5B,CAAwC;MAAEV,EAAF;MAAMgB,KAAK,EAAE;QAAEC,SAAF;QAAaC,IAAb;QAAmBC,IAAnB;QAAyBC,MAAzB;QAAiCP,OAAjC;QAA0CQ;MAA1C;IAAb,CAAxC,CAA1F;EACH;AACJ,CA3BD"},"metadata":{},"sourceType":"script"}