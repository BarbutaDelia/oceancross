{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exec = exec;\nexports.findPackageJSONDir = findPackageJSONDir;\nexports.getPostcssImplementation = getPostcssImplementation;\nexports.getPostcssOptions = getPostcssOptions;\nexports.loadConfig = loadConfig;\nexports.normalizeSourceMap = normalizeSourceMap;\nexports.normalizeSourceMapAfterPostcss = normalizeSourceMapAfterPostcss;\nexports.reportError = reportError;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _module = _interopRequireDefault(require(\"module\"));\n\nvar _full = require(\"klona/full\");\n\nvar _cosmiconfig = require(\"cosmiconfig\");\n\nvar _Error = _interopRequireDefault(require(\"./Error\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst parentModule = module;\n\nconst stat = (inputFileSystem, filePath) => new Promise((resolve, reject) => {\n  inputFileSystem.stat(filePath, (err, stats) => {\n    if (err) {\n      reject(err);\n    }\n\n    resolve(stats);\n  });\n});\n\nfunction exec(code, loaderContext) {\n  const {\n    resource,\n    context\n  } = loaderContext;\n  const module = new _module.default(resource, parentModule); // eslint-disable-next-line no-underscore-dangle\n\n  module.paths = _module.default._nodeModulePaths(context);\n  module.filename = resource; // eslint-disable-next-line no-underscore-dangle\n\n  module._compile(code, resource);\n\n  return module.exports;\n}\n\nfunction loadConfig(_x, _x2, _x3) {\n  return _loadConfig.apply(this, arguments);\n}\n\nfunction _loadConfig() {\n  _loadConfig = _asyncToGenerator(function* (loaderContext, config, postcssOptions) {\n    const searchPath = typeof config === \"string\" ? _path.default.resolve(config) : _path.default.dirname(loaderContext.resourcePath);\n    let stats;\n\n    try {\n      stats = yield stat(loaderContext.fs, searchPath);\n    } catch (errorIgnore) {\n      throw new Error(`No PostCSS config found in: ${searchPath}`);\n    }\n\n    const explorer = (0, _cosmiconfig.cosmiconfig)(\"postcss\");\n    let result;\n\n    try {\n      if (stats.isFile()) {\n        result = yield explorer.load(searchPath);\n      } else {\n        result = yield explorer.search(searchPath);\n      }\n    } catch (error) {\n      throw error;\n    }\n\n    if (!result) {\n      return {};\n    }\n\n    loaderContext.addBuildDependency(result.filepath);\n    loaderContext.addDependency(result.filepath);\n\n    if (result.isEmpty) {\n      return result;\n    }\n\n    if (typeof result.config === \"function\") {\n      const api = {\n        mode: loaderContext.mode,\n        file: loaderContext.resourcePath,\n        // For complex use\n        webpackLoaderContext: loaderContext,\n        // Partial compatibility with `postcss-cli`\n        env: loaderContext.mode,\n        options: postcssOptions || {}\n      };\n      result.config = result.config(api);\n    }\n\n    result = (0, _full.klona)(result);\n    return result;\n  });\n  return _loadConfig.apply(this, arguments);\n}\n\nfunction loadPlugin(plugin, options, file) {\n  try {\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    let loadedPlugin = require(plugin);\n\n    if (loadedPlugin.default) {\n      loadedPlugin = loadedPlugin.default;\n    }\n\n    if (!options || Object.keys(options).length === 0) {\n      return loadedPlugin;\n    }\n\n    return loadedPlugin(options);\n  } catch (error) {\n    throw new Error(`Loading PostCSS \"${plugin}\" plugin failed: ${error.message}\\n\\n(@${file})`);\n  }\n}\n\nfunction pluginFactory() {\n  const listOfPlugins = new Map();\n  return plugins => {\n    if (typeof plugins === \"undefined\") {\n      return listOfPlugins;\n    }\n\n    if (Array.isArray(plugins)) {\n      for (const plugin of plugins) {\n        if (Array.isArray(plugin)) {\n          const [name, options] = plugin;\n          listOfPlugins.set(name, options);\n        } else if (plugin && typeof plugin === \"function\") {\n          listOfPlugins.set(plugin);\n        } else if (plugin && Object.keys(plugin).length === 1 && (typeof plugin[Object.keys(plugin)[0]] === \"object\" || typeof plugin[Object.keys(plugin)[0]] === \"boolean\") && plugin[Object.keys(plugin)[0]] !== null) {\n          const [name] = Object.keys(plugin);\n          const options = plugin[name];\n\n          if (options === false) {\n            listOfPlugins.delete(name);\n          } else {\n            listOfPlugins.set(name, options);\n          }\n        } else if (plugin) {\n          listOfPlugins.set(plugin);\n        }\n      }\n    } else {\n      const objectPlugins = Object.entries(plugins);\n\n      for (const [name, options] of objectPlugins) {\n        if (options === false) {\n          listOfPlugins.delete(name);\n        } else {\n          listOfPlugins.set(name, options);\n        }\n      }\n    }\n\n    return listOfPlugins;\n  };\n}\n\nfunction tryRequireThenImport(_x4) {\n  return _tryRequireThenImport.apply(this, arguments);\n}\n\nfunction _tryRequireThenImport() {\n  _tryRequireThenImport = _asyncToGenerator(function* (module) {\n    let exports;\n\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      exports = require(module);\n      return exports;\n    } catch (requireError) {\n      let importESM;\n\n      try {\n        // eslint-disable-next-line no-new-func\n        importESM = new Function(\"id\", \"return import(id);\");\n      } catch (e) {\n        importESM = null;\n      }\n\n      if (requireError.code === \"ERR_REQUIRE_ESM\" && importESM) {\n        exports = yield importESM(module);\n        return exports.default;\n      }\n\n      throw requireError;\n    }\n  });\n  return _tryRequireThenImport.apply(this, arguments);\n}\n\nfunction getPostcssOptions(_x5) {\n  return _getPostcssOptions.apply(this, arguments);\n}\n\nfunction _getPostcssOptions() {\n  _getPostcssOptions = _asyncToGenerator(function* (loaderContext, loadedConfig = {}, postcssOptions = {}) {\n    const file = loaderContext.resourcePath;\n    let normalizedPostcssOptions = postcssOptions;\n\n    if (typeof normalizedPostcssOptions === \"function\") {\n      normalizedPostcssOptions = normalizedPostcssOptions(loaderContext);\n    }\n\n    let plugins = [];\n\n    try {\n      const factory = pluginFactory();\n\n      if (loadedConfig.config && loadedConfig.config.plugins) {\n        factory(loadedConfig.config.plugins);\n      }\n\n      factory(normalizedPostcssOptions.plugins);\n      plugins = [...factory()].map(item => {\n        const [plugin, options] = item;\n\n        if (typeof plugin === \"string\") {\n          return loadPlugin(plugin, options, file);\n        }\n\n        return plugin;\n      });\n    } catch (error) {\n      loaderContext.emitError(error);\n    }\n\n    const processOptionsFromConfig = loadedConfig.config || {};\n\n    if (processOptionsFromConfig.from) {\n      processOptionsFromConfig.from = _path.default.resolve(_path.default.dirname(loadedConfig.filepath), processOptionsFromConfig.from);\n    }\n\n    if (processOptionsFromConfig.to) {\n      processOptionsFromConfig.to = _path.default.resolve(_path.default.dirname(loadedConfig.filepath), processOptionsFromConfig.to);\n    } // No need them for processOptions\n\n\n    delete processOptionsFromConfig.plugins;\n    const processOptionsFromOptions = (0, _full.klona)(normalizedPostcssOptions);\n\n    if (processOptionsFromOptions.from) {\n      processOptionsFromOptions.from = _path.default.resolve(loaderContext.rootContext, processOptionsFromOptions.from);\n    }\n\n    if (processOptionsFromOptions.to) {\n      processOptionsFromOptions.to = _path.default.resolve(loaderContext.rootContext, processOptionsFromOptions.to);\n    } // No need them for processOptions\n\n\n    delete processOptionsFromOptions.config;\n    delete processOptionsFromOptions.plugins;\n    const processOptions = {\n      from: file,\n      to: file,\n      map: false,\n      ...processOptionsFromConfig,\n      ...processOptionsFromOptions\n    };\n\n    if (typeof processOptions.parser === \"string\") {\n      try {\n        processOptions.parser = yield tryRequireThenImport(processOptions.parser);\n      } catch (error) {\n        loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.parser}\" parser failed: ${error.message}\\n\\n(@${file})`));\n      }\n    }\n\n    if (typeof processOptions.stringifier === \"string\") {\n      try {\n        processOptions.stringifier = yield tryRequireThenImport(processOptions.stringifier);\n      } catch (error) {\n        loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.stringifier}\" stringifier failed: ${error.message}\\n\\n(@${file})`));\n      }\n    }\n\n    if (typeof processOptions.syntax === \"string\") {\n      try {\n        processOptions.syntax = yield tryRequireThenImport(processOptions.syntax);\n      } catch (error) {\n        loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.syntax}\" syntax failed: ${error.message}\\n\\n(@${file})`));\n      }\n    }\n\n    if (processOptions.map === true) {\n      // https://github.com/postcss/postcss/blob/master/docs/source-maps.md\n      processOptions.map = {\n        inline: true\n      };\n    }\n\n    return {\n      plugins,\n      processOptions\n    };\n  });\n  return _getPostcssOptions.apply(this, arguments);\n}\n\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\nconst ABSOLUTE_SCHEME = /^[a-z0-9+\\-.]+:/i;\n\nfunction getURLType(source) {\n  if (source[0] === \"/\") {\n    if (source[1] === \"/\") {\n      return \"scheme-relative\";\n    }\n\n    return \"path-absolute\";\n  }\n\n  if (IS_NATIVE_WIN32_PATH.test(source)) {\n    return \"path-absolute\";\n  }\n\n  return ABSOLUTE_SCHEME.test(source) ? \"absolute\" : \"path-relative\";\n}\n\nfunction normalizeSourceMap(map, resourceContext) {\n  let newMap = map; // Some loader emit source map as string\n  // Strip any JSON XSSI avoidance prefix from the string (as documented in the source maps specification), and then parse the string as JSON.\n\n  if (typeof newMap === \"string\") {\n    newMap = JSON.parse(newMap);\n  }\n\n  delete newMap.file;\n  const {\n    sourceRoot\n  } = newMap;\n  delete newMap.sourceRoot;\n\n  if (newMap.sources) {\n    newMap.sources = newMap.sources.map(source => {\n      const sourceType = getURLType(source); // Do no touch `scheme-relative` and `absolute` URLs\n\n      if (sourceType === \"path-relative\" || sourceType === \"path-absolute\") {\n        const absoluteSource = sourceType === \"path-relative\" && sourceRoot ? _path.default.resolve(sourceRoot, _path.default.normalize(source)) : _path.default.normalize(source);\n        return _path.default.relative(resourceContext, absoluteSource);\n      }\n\n      return source;\n    });\n  }\n\n  return newMap;\n}\n\nfunction normalizeSourceMapAfterPostcss(map, resourceContext) {\n  const newMap = map; // result.map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  delete newMap.file; // eslint-disable-next-line no-param-reassign\n\n  newMap.sourceRoot = \"\"; // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => {\n    if (source.indexOf(\"<\") === 0) {\n      return source;\n    }\n\n    const sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types\n\n    if (sourceType === \"path-relative\") {\n      return _path.default.resolve(resourceContext, source);\n    }\n\n    return source;\n  });\n  return newMap;\n}\n\nfunction findPackageJSONDir(cwd, statSync) {\n  let dir = cwd;\n\n  for (;;) {\n    try {\n      if (statSync(_path.default.join(dir, \"package.json\")).isFile()) {\n        break;\n      }\n    } catch (error) {// Nothing\n    }\n\n    const parent = _path.default.dirname(dir);\n\n    if (dir === parent) {\n      dir = null;\n      break;\n    }\n\n    dir = parent;\n  }\n\n  return dir;\n}\n\nfunction getPostcssImplementation(loaderContext, implementation) {\n  let resolvedImplementation = implementation;\n\n  if (!implementation || typeof implementation === \"string\") {\n    const postcssImplPkg = implementation || \"postcss\";\n\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      resolvedImplementation = require(postcssImplPkg);\n    } catch (error) {\n      loaderContext.emitError(error); // eslint-disable-next-line consistent-return\n\n      return;\n    }\n  } // eslint-disable-next-line consistent-return\n\n\n  return resolvedImplementation;\n}\n\nfunction reportError(loaderContext, callback, error) {\n  if (error.file) {\n    loaderContext.addDependency(error.file);\n  }\n\n  if (error.name === \"CssSyntaxError\") {\n    callback(new _Error.default(error));\n  } else {\n    callback(error);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","exec","findPackageJSONDir","getPostcssImplementation","getPostcssOptions","loadConfig","normalizeSourceMap","normalizeSourceMapAfterPostcss","reportError","_path","_interopRequireDefault","require","_module","_full","_cosmiconfig","_Error","obj","__esModule","default","parentModule","module","stat","inputFileSystem","filePath","Promise","resolve","reject","err","stats","code","loaderContext","resource","context","paths","_nodeModulePaths","filename","_compile","config","postcssOptions","searchPath","dirname","resourcePath","fs","errorIgnore","Error","explorer","cosmiconfig","result","isFile","load","search","error","addBuildDependency","filepath","addDependency","isEmpty","api","mode","file","webpackLoaderContext","env","options","klona","loadPlugin","plugin","loadedPlugin","keys","length","message","pluginFactory","listOfPlugins","Map","plugins","Array","isArray","name","set","delete","objectPlugins","entries","tryRequireThenImport","requireError","importESM","Function","e","loadedConfig","normalizedPostcssOptions","factory","map","item","emitError","processOptionsFromConfig","from","to","processOptionsFromOptions","rootContext","processOptions","parser","stringifier","syntax","inline","IS_NATIVE_WIN32_PATH","ABSOLUTE_SCHEME","getURLType","source","test","resourceContext","newMap","JSON","parse","sourceRoot","sources","sourceType","absoluteSource","normalize","relative","indexOf","cwd","statSync","dir","join","parent","implementation","resolvedImplementation","postcssImplPkg","callback"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/postcss-loader/dist/utils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exec = exec;\nexports.findPackageJSONDir = findPackageJSONDir;\nexports.getPostcssImplementation = getPostcssImplementation;\nexports.getPostcssOptions = getPostcssOptions;\nexports.loadConfig = loadConfig;\nexports.normalizeSourceMap = normalizeSourceMap;\nexports.normalizeSourceMapAfterPostcss = normalizeSourceMapAfterPostcss;\nexports.reportError = reportError;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _module = _interopRequireDefault(require(\"module\"));\n\nvar _full = require(\"klona/full\");\n\nvar _cosmiconfig = require(\"cosmiconfig\");\n\nvar _Error = _interopRequireDefault(require(\"./Error\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst parentModule = module;\n\nconst stat = (inputFileSystem, filePath) => new Promise((resolve, reject) => {\n  inputFileSystem.stat(filePath, (err, stats) => {\n    if (err) {\n      reject(err);\n    }\n\n    resolve(stats);\n  });\n});\n\nfunction exec(code, loaderContext) {\n  const {\n    resource,\n    context\n  } = loaderContext;\n  const module = new _module.default(resource, parentModule); // eslint-disable-next-line no-underscore-dangle\n\n  module.paths = _module.default._nodeModulePaths(context);\n  module.filename = resource; // eslint-disable-next-line no-underscore-dangle\n\n  module._compile(code, resource);\n\n  return module.exports;\n}\n\nasync function loadConfig(loaderContext, config, postcssOptions) {\n  const searchPath = typeof config === \"string\" ? _path.default.resolve(config) : _path.default.dirname(loaderContext.resourcePath);\n  let stats;\n\n  try {\n    stats = await stat(loaderContext.fs, searchPath);\n  } catch (errorIgnore) {\n    throw new Error(`No PostCSS config found in: ${searchPath}`);\n  }\n\n  const explorer = (0, _cosmiconfig.cosmiconfig)(\"postcss\");\n  let result;\n\n  try {\n    if (stats.isFile()) {\n      result = await explorer.load(searchPath);\n    } else {\n      result = await explorer.search(searchPath);\n    }\n  } catch (error) {\n    throw error;\n  }\n\n  if (!result) {\n    return {};\n  }\n\n  loaderContext.addBuildDependency(result.filepath);\n  loaderContext.addDependency(result.filepath);\n\n  if (result.isEmpty) {\n    return result;\n  }\n\n  if (typeof result.config === \"function\") {\n    const api = {\n      mode: loaderContext.mode,\n      file: loaderContext.resourcePath,\n      // For complex use\n      webpackLoaderContext: loaderContext,\n      // Partial compatibility with `postcss-cli`\n      env: loaderContext.mode,\n      options: postcssOptions || {}\n    };\n    result.config = result.config(api);\n  }\n\n  result = (0, _full.klona)(result);\n  return result;\n}\n\nfunction loadPlugin(plugin, options, file) {\n  try {\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    let loadedPlugin = require(plugin);\n\n    if (loadedPlugin.default) {\n      loadedPlugin = loadedPlugin.default;\n    }\n\n    if (!options || Object.keys(options).length === 0) {\n      return loadedPlugin;\n    }\n\n    return loadedPlugin(options);\n  } catch (error) {\n    throw new Error(`Loading PostCSS \"${plugin}\" plugin failed: ${error.message}\\n\\n(@${file})`);\n  }\n}\n\nfunction pluginFactory() {\n  const listOfPlugins = new Map();\n  return plugins => {\n    if (typeof plugins === \"undefined\") {\n      return listOfPlugins;\n    }\n\n    if (Array.isArray(plugins)) {\n      for (const plugin of plugins) {\n        if (Array.isArray(plugin)) {\n          const [name, options] = plugin;\n          listOfPlugins.set(name, options);\n        } else if (plugin && typeof plugin === \"function\") {\n          listOfPlugins.set(plugin);\n        } else if (plugin && Object.keys(plugin).length === 1 && (typeof plugin[Object.keys(plugin)[0]] === \"object\" || typeof plugin[Object.keys(plugin)[0]] === \"boolean\") && plugin[Object.keys(plugin)[0]] !== null) {\n          const [name] = Object.keys(plugin);\n          const options = plugin[name];\n\n          if (options === false) {\n            listOfPlugins.delete(name);\n          } else {\n            listOfPlugins.set(name, options);\n          }\n        } else if (plugin) {\n          listOfPlugins.set(plugin);\n        }\n      }\n    } else {\n      const objectPlugins = Object.entries(plugins);\n\n      for (const [name, options] of objectPlugins) {\n        if (options === false) {\n          listOfPlugins.delete(name);\n        } else {\n          listOfPlugins.set(name, options);\n        }\n      }\n    }\n\n    return listOfPlugins;\n  };\n}\n\nasync function tryRequireThenImport(module) {\n  let exports;\n\n  try {\n    // eslint-disable-next-line import/no-dynamic-require, global-require\n    exports = require(module);\n    return exports;\n  } catch (requireError) {\n    let importESM;\n\n    try {\n      // eslint-disable-next-line no-new-func\n      importESM = new Function(\"id\", \"return import(id);\");\n    } catch (e) {\n      importESM = null;\n    }\n\n    if (requireError.code === \"ERR_REQUIRE_ESM\" && importESM) {\n      exports = await importESM(module);\n      return exports.default;\n    }\n\n    throw requireError;\n  }\n}\n\nasync function getPostcssOptions(loaderContext, loadedConfig = {}, postcssOptions = {}) {\n  const file = loaderContext.resourcePath;\n  let normalizedPostcssOptions = postcssOptions;\n\n  if (typeof normalizedPostcssOptions === \"function\") {\n    normalizedPostcssOptions = normalizedPostcssOptions(loaderContext);\n  }\n\n  let plugins = [];\n\n  try {\n    const factory = pluginFactory();\n\n    if (loadedConfig.config && loadedConfig.config.plugins) {\n      factory(loadedConfig.config.plugins);\n    }\n\n    factory(normalizedPostcssOptions.plugins);\n    plugins = [...factory()].map(item => {\n      const [plugin, options] = item;\n\n      if (typeof plugin === \"string\") {\n        return loadPlugin(plugin, options, file);\n      }\n\n      return plugin;\n    });\n  } catch (error) {\n    loaderContext.emitError(error);\n  }\n\n  const processOptionsFromConfig = loadedConfig.config || {};\n\n  if (processOptionsFromConfig.from) {\n    processOptionsFromConfig.from = _path.default.resolve(_path.default.dirname(loadedConfig.filepath), processOptionsFromConfig.from);\n  }\n\n  if (processOptionsFromConfig.to) {\n    processOptionsFromConfig.to = _path.default.resolve(_path.default.dirname(loadedConfig.filepath), processOptionsFromConfig.to);\n  } // No need them for processOptions\n\n\n  delete processOptionsFromConfig.plugins;\n  const processOptionsFromOptions = (0, _full.klona)(normalizedPostcssOptions);\n\n  if (processOptionsFromOptions.from) {\n    processOptionsFromOptions.from = _path.default.resolve(loaderContext.rootContext, processOptionsFromOptions.from);\n  }\n\n  if (processOptionsFromOptions.to) {\n    processOptionsFromOptions.to = _path.default.resolve(loaderContext.rootContext, processOptionsFromOptions.to);\n  } // No need them for processOptions\n\n\n  delete processOptionsFromOptions.config;\n  delete processOptionsFromOptions.plugins;\n  const processOptions = {\n    from: file,\n    to: file,\n    map: false,\n    ...processOptionsFromConfig,\n    ...processOptionsFromOptions\n  };\n\n  if (typeof processOptions.parser === \"string\") {\n    try {\n      processOptions.parser = await tryRequireThenImport(processOptions.parser);\n    } catch (error) {\n      loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.parser}\" parser failed: ${error.message}\\n\\n(@${file})`));\n    }\n  }\n\n  if (typeof processOptions.stringifier === \"string\") {\n    try {\n      processOptions.stringifier = await tryRequireThenImport(processOptions.stringifier);\n    } catch (error) {\n      loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.stringifier}\" stringifier failed: ${error.message}\\n\\n(@${file})`));\n    }\n  }\n\n  if (typeof processOptions.syntax === \"string\") {\n    try {\n      processOptions.syntax = await tryRequireThenImport(processOptions.syntax);\n    } catch (error) {\n      loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.syntax}\" syntax failed: ${error.message}\\n\\n(@${file})`));\n    }\n  }\n\n  if (processOptions.map === true) {\n    // https://github.com/postcss/postcss/blob/master/docs/source-maps.md\n    processOptions.map = {\n      inline: true\n    };\n  }\n\n  return {\n    plugins,\n    processOptions\n  };\n}\n\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\nconst ABSOLUTE_SCHEME = /^[a-z0-9+\\-.]+:/i;\n\nfunction getURLType(source) {\n  if (source[0] === \"/\") {\n    if (source[1] === \"/\") {\n      return \"scheme-relative\";\n    }\n\n    return \"path-absolute\";\n  }\n\n  if (IS_NATIVE_WIN32_PATH.test(source)) {\n    return \"path-absolute\";\n  }\n\n  return ABSOLUTE_SCHEME.test(source) ? \"absolute\" : \"path-relative\";\n}\n\nfunction normalizeSourceMap(map, resourceContext) {\n  let newMap = map; // Some loader emit source map as string\n  // Strip any JSON XSSI avoidance prefix from the string (as documented in the source maps specification), and then parse the string as JSON.\n\n  if (typeof newMap === \"string\") {\n    newMap = JSON.parse(newMap);\n  }\n\n  delete newMap.file;\n  const {\n    sourceRoot\n  } = newMap;\n  delete newMap.sourceRoot;\n\n  if (newMap.sources) {\n    newMap.sources = newMap.sources.map(source => {\n      const sourceType = getURLType(source); // Do no touch `scheme-relative` and `absolute` URLs\n\n      if (sourceType === \"path-relative\" || sourceType === \"path-absolute\") {\n        const absoluteSource = sourceType === \"path-relative\" && sourceRoot ? _path.default.resolve(sourceRoot, _path.default.normalize(source)) : _path.default.normalize(source);\n        return _path.default.relative(resourceContext, absoluteSource);\n      }\n\n      return source;\n    });\n  }\n\n  return newMap;\n}\n\nfunction normalizeSourceMapAfterPostcss(map, resourceContext) {\n  const newMap = map; // result.map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  delete newMap.file; // eslint-disable-next-line no-param-reassign\n\n  newMap.sourceRoot = \"\"; // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => {\n    if (source.indexOf(\"<\") === 0) {\n      return source;\n    }\n\n    const sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types\n\n    if (sourceType === \"path-relative\") {\n      return _path.default.resolve(resourceContext, source);\n    }\n\n    return source;\n  });\n  return newMap;\n}\n\nfunction findPackageJSONDir(cwd, statSync) {\n  let dir = cwd;\n\n  for (;;) {\n    try {\n      if (statSync(_path.default.join(dir, \"package.json\")).isFile()) {\n        break;\n      }\n    } catch (error) {// Nothing\n    }\n\n    const parent = _path.default.dirname(dir);\n\n    if (dir === parent) {\n      dir = null;\n      break;\n    }\n\n    dir = parent;\n  }\n\n  return dir;\n}\n\nfunction getPostcssImplementation(loaderContext, implementation) {\n  let resolvedImplementation = implementation;\n\n  if (!implementation || typeof implementation === \"string\") {\n    const postcssImplPkg = implementation || \"postcss\";\n\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      resolvedImplementation = require(postcssImplPkg);\n    } catch (error) {\n      loaderContext.emitError(error); // eslint-disable-next-line consistent-return\n\n      return;\n    }\n  } // eslint-disable-next-line consistent-return\n\n\n  return resolvedImplementation;\n}\n\nfunction reportError(loaderContext, callback, error) {\n  if (error.file) {\n    loaderContext.addDependency(error.file);\n  }\n\n  if (error.name === \"CssSyntaxError\") {\n    callback(new _Error.default(error));\n  } else {\n    callback(error);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}