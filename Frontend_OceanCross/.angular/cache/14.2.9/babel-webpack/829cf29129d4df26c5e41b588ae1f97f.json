{"ast":null,"code":"const dateFormat = require('date-format');\n\nconst os = require('os');\n\nconst util = require('util');\n\nconst path = require('path');\n\nconst url = require('url');\n\nconst debug = require('debug')('log4js:layouts');\n\nconst styles = {\n  // styles\n  bold: [1, 22],\n  italic: [3, 23],\n  underline: [4, 24],\n  inverse: [7, 27],\n  // grayscale\n  white: [37, 39],\n  grey: [90, 39],\n  black: [90, 39],\n  // colors\n  blue: [34, 39],\n  cyan: [36, 39],\n  green: [32, 39],\n  magenta: [35, 39],\n  red: [91, 39],\n  yellow: [33, 39]\n};\n\nfunction colorizeStart(style) {\n  return style ? `\\x1B[${styles[style][0]}m` : '';\n}\n\nfunction colorizeEnd(style) {\n  return style ? `\\x1B[${styles[style][1]}m` : '';\n}\n/**\n * Taken from masylum's fork (https://github.com/masylum/log4js-node)\n */\n\n\nfunction colorize(str, style) {\n  return colorizeStart(style) + str + colorizeEnd(style);\n}\n\nfunction timestampLevelAndCategory(loggingEvent, colour) {\n  return colorize(util.format('[%s] [%s] %s - ', dateFormat.asString(loggingEvent.startTime), loggingEvent.level.toString(), loggingEvent.categoryName), colour);\n}\n/**\n * BasicLayout is a simple layout for storing the logs. The logs are stored\n * in following format:\n * <pre>\n * [startTime] [logLevel] categoryName - message\\n\n * </pre>\n *\n * @author Stephan Strittmatter\n */\n\n\nfunction basicLayout(loggingEvent) {\n  return timestampLevelAndCategory(loggingEvent) + util.format(...loggingEvent.data);\n}\n/**\n * colouredLayout - taken from masylum's fork.\n * same as basicLayout, but with colours.\n */\n\n\nfunction colouredLayout(loggingEvent) {\n  return timestampLevelAndCategory(loggingEvent, loggingEvent.level.colour) + util.format(...loggingEvent.data);\n}\n\nfunction messagePassThroughLayout(loggingEvent) {\n  return util.format(...loggingEvent.data);\n}\n\nfunction dummyLayout(loggingEvent) {\n  return loggingEvent.data[0];\n}\n/**\n * PatternLayout\n * Format for specifiers is %[padding].[truncation][field]{[format]}\n * e.g. %5.10p - left pad the log level by 5 characters, up to a max of 10\n * both padding and truncation can be negative.\n * Negative truncation = trunc from end of string\n * Positive truncation = trunc from start of string\n * Negative padding = pad right\n * Positive padding = pad left\n *\n * Fields can be any of:\n *  - %r time in toLocaleTimeString format\n *  - %p log level\n *  - %c log category\n *  - %h hostname\n *  - %m log data\n *  - %d date in constious formats\n *  - %% %\n *  - %n newline\n *  - %z pid\n *  - %f filename\n *  - %l line number\n *  - %o column postion\n *  - %s call stack\n *  - %C class name [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %M method or function name [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %A method or function alias [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %F fully qualified caller name [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %x{<tokenname>} add dynamic tokens to your log. Tokens are specified in the tokens parameter\n *  - %X{<tokenname>} add dynamic tokens to your log. Tokens are specified in logger context\n * You can use %[ and %] to define a colored block.\n *\n * Tokens are specified as simple key:value objects.\n * The key represents the token name whereas the value can be a string or function\n * which is called to extract the value to put in the log message. If token is not\n * found, it doesn't replace the field.\n *\n * A sample token would be: { 'pid' : function() { return process.pid; } }\n *\n * Takes a pattern string, array of tokens and returns a layout function.\n * @return {Function}\n * @param pattern\n * @param tokens\n * @param timezoneOffset\n *\n * @authors ['Stephan Strittmatter', 'Jan Schmidle']\n */\n\n\nfunction patternLayout(pattern, tokens) {\n  const TTCC_CONVERSION_PATTERN = '%r %p %c - %m%n';\n  const regex = /%(-?[0-9]+)?(\\.?-?[0-9]+)?([[\\]cdhmnprzxXyflosCMAF%])(\\{([^}]+)\\})?|([^%]+)/;\n  pattern = pattern || TTCC_CONVERSION_PATTERN;\n\n  function categoryName(loggingEvent, specifier) {\n    let loggerName = loggingEvent.categoryName;\n\n    if (specifier) {\n      const precision = parseInt(specifier, 10);\n      const loggerNameBits = loggerName.split('.');\n\n      if (precision < loggerNameBits.length) {\n        loggerName = loggerNameBits.slice(loggerNameBits.length - precision).join('.');\n      }\n    }\n\n    return loggerName;\n  }\n\n  function formatAsDate(loggingEvent, specifier) {\n    let format = dateFormat.ISO8601_FORMAT;\n\n    if (specifier) {\n      format = specifier; // Pick up special cases\n\n      switch (format) {\n        case 'ISO8601':\n        case 'ISO8601_FORMAT':\n          format = dateFormat.ISO8601_FORMAT;\n          break;\n\n        case 'ISO8601_WITH_TZ_OFFSET':\n        case 'ISO8601_WITH_TZ_OFFSET_FORMAT':\n          format = dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT;\n          break;\n\n        case 'ABSOLUTE':\n          process.emitWarning('Pattern %d{ABSOLUTE} is deprecated in favor of %d{ABSOLUTETIME}. ' + 'Please use %d{ABSOLUTETIME} instead.', 'DeprecationWarning', 'log4js-node-DEP0003');\n          debug('[log4js-node-DEP0003]', 'DEPRECATION: Pattern %d{ABSOLUTE} is deprecated and replaced by %d{ABSOLUTETIME}.');\n        // falls through\n\n        case 'ABSOLUTETIME':\n        case 'ABSOLUTETIME_FORMAT':\n          format = dateFormat.ABSOLUTETIME_FORMAT;\n          break;\n\n        case 'DATE':\n          process.emitWarning('Pattern %d{DATE} is deprecated due to the confusion it causes when used. ' + 'Please use %d{DATETIME} instead.', 'DeprecationWarning', 'log4js-node-DEP0004');\n          debug('[log4js-node-DEP0004]', 'DEPRECATION: Pattern %d{DATE} is deprecated and replaced by %d{DATETIME}.');\n        // falls through\n\n        case 'DATETIME':\n        case 'DATETIME_FORMAT':\n          format = dateFormat.DATETIME_FORMAT;\n          break;\n        // no default\n      }\n    } // Format the date\n\n\n    return dateFormat.asString(format, loggingEvent.startTime);\n  }\n\n  function hostname() {\n    return os.hostname().toString();\n  }\n\n  function formatMessage(loggingEvent) {\n    return util.format(...loggingEvent.data);\n  }\n\n  function endOfLine() {\n    return os.EOL;\n  }\n\n  function logLevel(loggingEvent) {\n    return loggingEvent.level.toString();\n  }\n\n  function startTime(loggingEvent) {\n    return dateFormat.asString('hh:mm:ss', loggingEvent.startTime);\n  }\n\n  function startColour(loggingEvent) {\n    return colorizeStart(loggingEvent.level.colour);\n  }\n\n  function endColour(loggingEvent) {\n    return colorizeEnd(loggingEvent.level.colour);\n  }\n\n  function percent() {\n    return '%';\n  }\n\n  function pid(loggingEvent) {\n    return loggingEvent && loggingEvent.pid ? loggingEvent.pid.toString() : process.pid.toString();\n  }\n\n  function clusterInfo() {\n    // this used to try to return the master and worker pids,\n    // but it would never have worked because master pid is not available to workers\n    // leaving this here to maintain compatibility for patterns\n    return pid();\n  }\n\n  function userDefined(loggingEvent, specifier) {\n    if (typeof tokens[specifier] !== 'undefined') {\n      return typeof tokens[specifier] === 'function' ? tokens[specifier](loggingEvent) : tokens[specifier];\n    }\n\n    return null;\n  }\n\n  function contextDefined(loggingEvent, specifier) {\n    const resolver = loggingEvent.context[specifier];\n\n    if (typeof resolver !== 'undefined') {\n      return typeof resolver === 'function' ? resolver(loggingEvent) : resolver;\n    }\n\n    return null;\n  }\n\n  function fileName(loggingEvent, specifier) {\n    let filename = loggingEvent.fileName || ''; // support for ESM as it uses url instead of path for file\n\n    /* istanbul ignore next: unsure how to simulate ESM for test coverage */\n\n    const convertFileURLToPath = function (filepath) {\n      const urlPrefix = 'file://';\n\n      if (filepath.startsWith(urlPrefix)) {\n        // https://nodejs.org/api/url.html#urlfileurltopathurl\n        if (typeof url.fileURLToPath === 'function') {\n          filepath = url.fileURLToPath(filepath);\n        } // backward-compatible for nodejs pre-10.12.0 (without url.fileURLToPath method)\n        else {\n          // posix: file:///hello/world/foo.txt -> /hello/world/foo.txt -> /hello/world/foo.txt\n          // win32: file:///C:/path/foo.txt     -> /C:/path/foo.txt     -> \\C:\\path\\foo.txt     -> C:\\path\\foo.txt\n          // win32: file://nas/foo.txt          -> //nas/foo.txt        -> nas\\foo.txt          -> \\\\nas\\foo.txt\n          filepath = path.normalize(filepath.replace(new RegExp(`^${urlPrefix}`), ''));\n\n          if (process.platform === 'win32') {\n            if (filepath.startsWith('\\\\')) {\n              filepath = filepath.slice(1);\n            } else {\n              filepath = path.sep + path.sep + filepath;\n            }\n          }\n        }\n      }\n\n      return filepath;\n    };\n\n    filename = convertFileURLToPath(filename);\n\n    if (specifier) {\n      const fileDepth = parseInt(specifier, 10);\n      const fileList = filename.split(path.sep);\n\n      if (fileList.length > fileDepth) {\n        filename = fileList.slice(-fileDepth).join(path.sep);\n      }\n    }\n\n    return filename;\n  }\n\n  function lineNumber(loggingEvent) {\n    return loggingEvent.lineNumber ? `${loggingEvent.lineNumber}` : '';\n  }\n\n  function columnNumber(loggingEvent) {\n    return loggingEvent.columnNumber ? `${loggingEvent.columnNumber}` : '';\n  }\n\n  function callStack(loggingEvent) {\n    return loggingEvent.callStack || '';\n  }\n\n  function className(loggingEvent) {\n    return loggingEvent.className || '';\n  }\n\n  function functionName(loggingEvent) {\n    return loggingEvent.functionName || '';\n  }\n\n  function functionAlias(loggingEvent) {\n    return loggingEvent.functionAlias || '';\n  }\n\n  function callerName(loggingEvent) {\n    return loggingEvent.callerName || '';\n  }\n\n  const replacers = {\n    c: categoryName,\n    d: formatAsDate,\n    h: hostname,\n    m: formatMessage,\n    n: endOfLine,\n    p: logLevel,\n    r: startTime,\n    '[': startColour,\n    ']': endColour,\n    y: clusterInfo,\n    z: pid,\n    '%': percent,\n    x: userDefined,\n    X: contextDefined,\n    f: fileName,\n    l: lineNumber,\n    o: columnNumber,\n    s: callStack,\n    C: className,\n    M: functionName,\n    A: functionAlias,\n    F: callerName\n  };\n\n  function replaceToken(conversionCharacter, loggingEvent, specifier) {\n    return replacers[conversionCharacter](loggingEvent, specifier);\n  }\n\n  function truncate(truncation, toTruncate) {\n    let len;\n\n    if (truncation) {\n      len = parseInt(truncation.slice(1), 10); // negative truncate length means truncate from end of string\n\n      return len > 0 ? toTruncate.slice(0, len) : toTruncate.slice(len);\n    }\n\n    return toTruncate;\n  }\n\n  function pad(padding, toPad) {\n    let len;\n\n    if (padding) {\n      if (padding.charAt(0) === '-') {\n        len = parseInt(padding.slice(1), 10); // Right pad with spaces\n\n        while (toPad.length < len) {\n          toPad += ' ';\n        }\n      } else {\n        len = parseInt(padding, 10); // Left pad with spaces\n\n        while (toPad.length < len) {\n          toPad = ` ${toPad}`;\n        }\n      }\n    }\n\n    return toPad;\n  }\n\n  function truncateAndPad(toTruncAndPad, truncation, padding) {\n    let replacement = toTruncAndPad;\n    replacement = truncate(truncation, replacement);\n    replacement = pad(padding, replacement);\n    return replacement;\n  }\n\n  return function (loggingEvent) {\n    let formattedString = '';\n    let result;\n    let searchString = pattern;\n\n    while ((result = regex.exec(searchString)) !== null) {\n      // const matchedString = result[0];\n      const padding = result[1];\n      const truncation = result[2];\n      const conversionCharacter = result[3];\n      const specifier = result[5];\n      const text = result[6]; // Check if the pattern matched was just normal text\n\n      if (text) {\n        formattedString += text.toString();\n      } else {\n        // Create a raw replacement string based on the conversion\n        // character and specifier\n        const replacement = replaceToken(conversionCharacter, loggingEvent, specifier);\n        formattedString += truncateAndPad(replacement, truncation, padding);\n      }\n\n      searchString = searchString.slice(result.index + result[0].length);\n    }\n\n    return formattedString;\n  };\n}\n\nconst layoutMakers = {\n  messagePassThrough() {\n    return messagePassThroughLayout;\n  },\n\n  basic() {\n    return basicLayout;\n  },\n\n  colored() {\n    return colouredLayout;\n  },\n\n  coloured() {\n    return colouredLayout;\n  },\n\n  pattern(config) {\n    return patternLayout(config && config.pattern, config && config.tokens);\n  },\n\n  dummy() {\n    return dummyLayout;\n  }\n\n};\nmodule.exports = {\n  basicLayout,\n  messagePassThroughLayout,\n  patternLayout,\n  colouredLayout,\n  coloredLayout: colouredLayout,\n  dummyLayout,\n\n  addLayout(name, serializerGenerator) {\n    layoutMakers[name] = serializerGenerator;\n  },\n\n  layout(name, config) {\n    return layoutMakers[name] && layoutMakers[name](config);\n  }\n\n};","map":{"version":3,"names":["dateFormat","require","os","util","path","url","debug","styles","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","colorizeStart","style","colorizeEnd","colorize","str","timestampLevelAndCategory","loggingEvent","colour","format","asString","startTime","level","toString","categoryName","basicLayout","data","colouredLayout","messagePassThroughLayout","dummyLayout","patternLayout","pattern","tokens","TTCC_CONVERSION_PATTERN","regex","specifier","loggerName","precision","parseInt","loggerNameBits","split","length","slice","join","formatAsDate","ISO8601_FORMAT","ISO8601_WITH_TZ_OFFSET_FORMAT","process","emitWarning","ABSOLUTETIME_FORMAT","DATETIME_FORMAT","hostname","formatMessage","endOfLine","EOL","logLevel","startColour","endColour","percent","pid","clusterInfo","userDefined","contextDefined","resolver","context","fileName","filename","convertFileURLToPath","filepath","urlPrefix","startsWith","fileURLToPath","normalize","replace","RegExp","platform","sep","fileDepth","fileList","lineNumber","columnNumber","callStack","className","functionName","functionAlias","callerName","replacers","c","d","h","m","n","p","r","y","z","x","X","f","l","o","s","C","M","A","F","replaceToken","conversionCharacter","truncate","truncation","toTruncate","len","pad","padding","toPad","charAt","truncateAndPad","toTruncAndPad","replacement","formattedString","result","searchString","exec","text","index","layoutMakers","messagePassThrough","basic","colored","coloured","config","dummy","module","exports","coloredLayout","addLayout","name","serializerGenerator","layout"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/log4js/lib/layouts.js"],"sourcesContent":["const dateFormat = require('date-format');\nconst os = require('os');\nconst util = require('util');\nconst path = require('path');\nconst url = require('url');\nconst debug = require('debug')('log4js:layouts');\n\nconst styles = {\n  // styles\n  bold: [1, 22],\n  italic: [3, 23],\n  underline: [4, 24],\n  inverse: [7, 27],\n  // grayscale\n  white: [37, 39],\n  grey: [90, 39],\n  black: [90, 39],\n  // colors\n  blue: [34, 39],\n  cyan: [36, 39],\n  green: [32, 39],\n  magenta: [35, 39],\n  red: [91, 39],\n  yellow: [33, 39],\n};\n\nfunction colorizeStart(style) {\n  return style ? `\\x1B[${styles[style][0]}m` : '';\n}\n\nfunction colorizeEnd(style) {\n  return style ? `\\x1B[${styles[style][1]}m` : '';\n}\n\n/**\n * Taken from masylum's fork (https://github.com/masylum/log4js-node)\n */\nfunction colorize(str, style) {\n  return colorizeStart(style) + str + colorizeEnd(style);\n}\n\nfunction timestampLevelAndCategory(loggingEvent, colour) {\n  return colorize(\n    util.format(\n      '[%s] [%s] %s - ',\n      dateFormat.asString(loggingEvent.startTime),\n      loggingEvent.level.toString(),\n      loggingEvent.categoryName\n    ),\n    colour\n  );\n}\n\n/**\n * BasicLayout is a simple layout for storing the logs. The logs are stored\n * in following format:\n * <pre>\n * [startTime] [logLevel] categoryName - message\\n\n * </pre>\n *\n * @author Stephan Strittmatter\n */\nfunction basicLayout(loggingEvent) {\n  return (\n    timestampLevelAndCategory(loggingEvent) + util.format(...loggingEvent.data)\n  );\n}\n\n/**\n * colouredLayout - taken from masylum's fork.\n * same as basicLayout, but with colours.\n */\nfunction colouredLayout(loggingEvent) {\n  return (\n    timestampLevelAndCategory(loggingEvent, loggingEvent.level.colour) +\n    util.format(...loggingEvent.data)\n  );\n}\n\nfunction messagePassThroughLayout(loggingEvent) {\n  return util.format(...loggingEvent.data);\n}\n\nfunction dummyLayout(loggingEvent) {\n  return loggingEvent.data[0];\n}\n\n/**\n * PatternLayout\n * Format for specifiers is %[padding].[truncation][field]{[format]}\n * e.g. %5.10p - left pad the log level by 5 characters, up to a max of 10\n * both padding and truncation can be negative.\n * Negative truncation = trunc from end of string\n * Positive truncation = trunc from start of string\n * Negative padding = pad right\n * Positive padding = pad left\n *\n * Fields can be any of:\n *  - %r time in toLocaleTimeString format\n *  - %p log level\n *  - %c log category\n *  - %h hostname\n *  - %m log data\n *  - %d date in constious formats\n *  - %% %\n *  - %n newline\n *  - %z pid\n *  - %f filename\n *  - %l line number\n *  - %o column postion\n *  - %s call stack\n *  - %C class name [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %M method or function name [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %A method or function alias [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %F fully qualified caller name [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %x{<tokenname>} add dynamic tokens to your log. Tokens are specified in the tokens parameter\n *  - %X{<tokenname>} add dynamic tokens to your log. Tokens are specified in logger context\n * You can use %[ and %] to define a colored block.\n *\n * Tokens are specified as simple key:value objects.\n * The key represents the token name whereas the value can be a string or function\n * which is called to extract the value to put in the log message. If token is not\n * found, it doesn't replace the field.\n *\n * A sample token would be: { 'pid' : function() { return process.pid; } }\n *\n * Takes a pattern string, array of tokens and returns a layout function.\n * @return {Function}\n * @param pattern\n * @param tokens\n * @param timezoneOffset\n *\n * @authors ['Stephan Strittmatter', 'Jan Schmidle']\n */\nfunction patternLayout(pattern, tokens) {\n  const TTCC_CONVERSION_PATTERN = '%r %p %c - %m%n';\n  const regex =\n    /%(-?[0-9]+)?(\\.?-?[0-9]+)?([[\\]cdhmnprzxXyflosCMAF%])(\\{([^}]+)\\})?|([^%]+)/;\n\n  pattern = pattern || TTCC_CONVERSION_PATTERN;\n\n  function categoryName(loggingEvent, specifier) {\n    let loggerName = loggingEvent.categoryName;\n    if (specifier) {\n      const precision = parseInt(specifier, 10);\n      const loggerNameBits = loggerName.split('.');\n      if (precision < loggerNameBits.length) {\n        loggerName = loggerNameBits\n          .slice(loggerNameBits.length - precision)\n          .join('.');\n      }\n    }\n    return loggerName;\n  }\n\n  function formatAsDate(loggingEvent, specifier) {\n    let format = dateFormat.ISO8601_FORMAT;\n    if (specifier) {\n      format = specifier;\n      // Pick up special cases\n      switch (format) {\n        case 'ISO8601':\n        case 'ISO8601_FORMAT':\n          format = dateFormat.ISO8601_FORMAT;\n          break;\n        case 'ISO8601_WITH_TZ_OFFSET':\n        case 'ISO8601_WITH_TZ_OFFSET_FORMAT':\n          format = dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT;\n          break;\n        case 'ABSOLUTE':\n          process.emitWarning(\n            'Pattern %d{ABSOLUTE} is deprecated in favor of %d{ABSOLUTETIME}. ' +\n              'Please use %d{ABSOLUTETIME} instead.',\n            'DeprecationWarning',\n            'log4js-node-DEP0003'\n          );\n          debug(\n            '[log4js-node-DEP0003]',\n            'DEPRECATION: Pattern %d{ABSOLUTE} is deprecated and replaced by %d{ABSOLUTETIME}.'\n          );\n        // falls through\n        case 'ABSOLUTETIME':\n        case 'ABSOLUTETIME_FORMAT':\n          format = dateFormat.ABSOLUTETIME_FORMAT;\n          break;\n        case 'DATE':\n          process.emitWarning(\n            'Pattern %d{DATE} is deprecated due to the confusion it causes when used. ' +\n              'Please use %d{DATETIME} instead.',\n            'DeprecationWarning',\n            'log4js-node-DEP0004'\n          );\n          debug(\n            '[log4js-node-DEP0004]',\n            'DEPRECATION: Pattern %d{DATE} is deprecated and replaced by %d{DATETIME}.'\n          );\n        // falls through\n        case 'DATETIME':\n        case 'DATETIME_FORMAT':\n          format = dateFormat.DATETIME_FORMAT;\n          break;\n        // no default\n      }\n    }\n    // Format the date\n    return dateFormat.asString(format, loggingEvent.startTime);\n  }\n\n  function hostname() {\n    return os.hostname().toString();\n  }\n\n  function formatMessage(loggingEvent) {\n    return util.format(...loggingEvent.data);\n  }\n\n  function endOfLine() {\n    return os.EOL;\n  }\n\n  function logLevel(loggingEvent) {\n    return loggingEvent.level.toString();\n  }\n\n  function startTime(loggingEvent) {\n    return dateFormat.asString('hh:mm:ss', loggingEvent.startTime);\n  }\n\n  function startColour(loggingEvent) {\n    return colorizeStart(loggingEvent.level.colour);\n  }\n\n  function endColour(loggingEvent) {\n    return colorizeEnd(loggingEvent.level.colour);\n  }\n\n  function percent() {\n    return '%';\n  }\n\n  function pid(loggingEvent) {\n    return loggingEvent && loggingEvent.pid\n      ? loggingEvent.pid.toString()\n      : process.pid.toString();\n  }\n\n  function clusterInfo() {\n    // this used to try to return the master and worker pids,\n    // but it would never have worked because master pid is not available to workers\n    // leaving this here to maintain compatibility for patterns\n    return pid();\n  }\n\n  function userDefined(loggingEvent, specifier) {\n    if (typeof tokens[specifier] !== 'undefined') {\n      return typeof tokens[specifier] === 'function'\n        ? tokens[specifier](loggingEvent)\n        : tokens[specifier];\n    }\n\n    return null;\n  }\n\n  function contextDefined(loggingEvent, specifier) {\n    const resolver = loggingEvent.context[specifier];\n\n    if (typeof resolver !== 'undefined') {\n      return typeof resolver === 'function' ? resolver(loggingEvent) : resolver;\n    }\n\n    return null;\n  }\n\n  function fileName(loggingEvent, specifier) {\n    let filename = loggingEvent.fileName || '';\n\n    // support for ESM as it uses url instead of path for file\n    /* istanbul ignore next: unsure how to simulate ESM for test coverage */\n    const convertFileURLToPath = function (filepath) {\n      const urlPrefix = 'file://';\n      if (filepath.startsWith(urlPrefix)) {\n        // https://nodejs.org/api/url.html#urlfileurltopathurl\n        if (typeof url.fileURLToPath === 'function') {\n          filepath = url.fileURLToPath(filepath);\n        }\n        // backward-compatible for nodejs pre-10.12.0 (without url.fileURLToPath method)\n        else {\n          // posix: file:///hello/world/foo.txt -> /hello/world/foo.txt -> /hello/world/foo.txt\n          // win32: file:///C:/path/foo.txt     -> /C:/path/foo.txt     -> \\C:\\path\\foo.txt     -> C:\\path\\foo.txt\n          // win32: file://nas/foo.txt          -> //nas/foo.txt        -> nas\\foo.txt          -> \\\\nas\\foo.txt\n          filepath = path.normalize(\n            filepath.replace(new RegExp(`^${urlPrefix}`), '')\n          );\n          if (process.platform === 'win32') {\n            if (filepath.startsWith('\\\\')) {\n              filepath = filepath.slice(1);\n            } else {\n              filepath = path.sep + path.sep + filepath;\n            }\n          }\n        }\n      }\n      return filepath;\n    };\n    filename = convertFileURLToPath(filename);\n\n    if (specifier) {\n      const fileDepth = parseInt(specifier, 10);\n      const fileList = filename.split(path.sep);\n      if (fileList.length > fileDepth) {\n        filename = fileList.slice(-fileDepth).join(path.sep);\n      }\n    }\n\n    return filename;\n  }\n\n  function lineNumber(loggingEvent) {\n    return loggingEvent.lineNumber ? `${loggingEvent.lineNumber}` : '';\n  }\n\n  function columnNumber(loggingEvent) {\n    return loggingEvent.columnNumber ? `${loggingEvent.columnNumber}` : '';\n  }\n\n  function callStack(loggingEvent) {\n    return loggingEvent.callStack || '';\n  }\n\n  function className(loggingEvent) {\n    return loggingEvent.className || '';\n  }\n\n  function functionName(loggingEvent) {\n    return loggingEvent.functionName || '';\n  }\n\n  function functionAlias(loggingEvent) {\n    return loggingEvent.functionAlias || '';\n  }\n\n  function callerName(loggingEvent) {\n    return loggingEvent.callerName || '';\n  }\n\n  const replacers = {\n    c: categoryName,\n    d: formatAsDate,\n    h: hostname,\n    m: formatMessage,\n    n: endOfLine,\n    p: logLevel,\n    r: startTime,\n    '[': startColour,\n    ']': endColour,\n    y: clusterInfo,\n    z: pid,\n    '%': percent,\n    x: userDefined,\n    X: contextDefined,\n    f: fileName,\n    l: lineNumber,\n    o: columnNumber,\n    s: callStack,\n    C: className,\n    M: functionName,\n    A: functionAlias,\n    F: callerName,\n  };\n\n  function replaceToken(conversionCharacter, loggingEvent, specifier) {\n    return replacers[conversionCharacter](loggingEvent, specifier);\n  }\n\n  function truncate(truncation, toTruncate) {\n    let len;\n    if (truncation) {\n      len = parseInt(truncation.slice(1), 10);\n      // negative truncate length means truncate from end of string\n      return len > 0 ? toTruncate.slice(0, len) : toTruncate.slice(len);\n    }\n\n    return toTruncate;\n  }\n\n  function pad(padding, toPad) {\n    let len;\n    if (padding) {\n      if (padding.charAt(0) === '-') {\n        len = parseInt(padding.slice(1), 10);\n        // Right pad with spaces\n        while (toPad.length < len) {\n          toPad += ' ';\n        }\n      } else {\n        len = parseInt(padding, 10);\n        // Left pad with spaces\n        while (toPad.length < len) {\n          toPad = ` ${toPad}`;\n        }\n      }\n    }\n    return toPad;\n  }\n\n  function truncateAndPad(toTruncAndPad, truncation, padding) {\n    let replacement = toTruncAndPad;\n    replacement = truncate(truncation, replacement);\n    replacement = pad(padding, replacement);\n    return replacement;\n  }\n\n  return function (loggingEvent) {\n    let formattedString = '';\n    let result;\n    let searchString = pattern;\n\n    while ((result = regex.exec(searchString)) !== null) {\n      // const matchedString = result[0];\n      const padding = result[1];\n      const truncation = result[2];\n      const conversionCharacter = result[3];\n      const specifier = result[5];\n      const text = result[6];\n\n      // Check if the pattern matched was just normal text\n      if (text) {\n        formattedString += text.toString();\n      } else {\n        // Create a raw replacement string based on the conversion\n        // character and specifier\n        const replacement = replaceToken(\n          conversionCharacter,\n          loggingEvent,\n          specifier\n        );\n        formattedString += truncateAndPad(replacement, truncation, padding);\n      }\n      searchString = searchString.slice(result.index + result[0].length);\n    }\n    return formattedString;\n  };\n}\n\nconst layoutMakers = {\n  messagePassThrough() {\n    return messagePassThroughLayout;\n  },\n  basic() {\n    return basicLayout;\n  },\n  colored() {\n    return colouredLayout;\n  },\n  coloured() {\n    return colouredLayout;\n  },\n  pattern(config) {\n    return patternLayout(config && config.pattern, config && config.tokens);\n  },\n  dummy() {\n    return dummyLayout;\n  },\n};\n\nmodule.exports = {\n  basicLayout,\n  messagePassThroughLayout,\n  patternLayout,\n  colouredLayout,\n  coloredLayout: colouredLayout,\n  dummyLayout,\n  addLayout(name, serializerGenerator) {\n    layoutMakers[name] = serializerGenerator;\n  },\n  layout(name, config) {\n    return layoutMakers[name] && layoutMakers[name](config);\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}