{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.markAsyncChunksNonInitial = void 0;\n/**\n * Webpack stats may incorrectly mark extra entry points `initial` chunks, when\n * they are actually loaded asynchronously and thus not in the main bundle. This\n * function finds extra entry points in Webpack stats and corrects this value\n * whereever necessary. Does not modify {@param webpackStats}.\n */\n\nfunction markAsyncChunksNonInitial(webpackStats, extraEntryPoints) {\n  const {\n    chunks = [],\n    entrypoints: entryPoints = {}\n  } = webpackStats; // Find all Webpack chunk IDs not injected into the main bundle. We don't have\n  // to worry about transitive dependencies because extra entry points cannot be\n  // depended upon in Webpack, thus any extra entry point with `inject: false`,\n  // **cannot** be loaded in main bundle.\n\n  const asyncChunkIds = extraEntryPoints.filter(entryPoint => !entryPoint.inject && entryPoints[entryPoint.bundleName]).flatMap(entryPoint => {\n    var _a;\n\n    return (_a = entryPoints[entryPoint.bundleName].chunks) === null || _a === void 0 ? void 0 : _a.filter(n => n !== 'runtime');\n  }); // Find chunks for each ID.\n\n  const asyncChunks = asyncChunkIds.map(chunkId => {\n    const chunk = chunks.find(chunk => chunk.id === chunkId);\n\n    if (!chunk) {\n      throw new Error(`Failed to find chunk (${chunkId}) in set:\\n${JSON.stringify(chunks)}`);\n    }\n\n    return chunk;\n  }); // A chunk is considered `initial` only if Webpack already belives it to be initial\n  // and the application developer did not mark it async via an extra entry point.\n\n  return chunks.map(chunk => {\n    return asyncChunks.find(asyncChunk => asyncChunk === chunk) ? { ...chunk,\n      initial: false\n    } : chunk;\n  });\n}\n\nexports.markAsyncChunksNonInitial = markAsyncChunksNonInitial;","map":{"version":3,"names":["Object","defineProperty","exports","value","markAsyncChunksNonInitial","webpackStats","extraEntryPoints","chunks","entrypoints","entryPoints","asyncChunkIds","filter","entryPoint","inject","bundleName","flatMap","_a","n","asyncChunks","map","chunkId","chunk","find","id","Error","JSON","stringify","asyncChunk","initial"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@angular-devkit/build-angular/src/webpack/utils/async-chunks.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.markAsyncChunksNonInitial = void 0;\n/**\n * Webpack stats may incorrectly mark extra entry points `initial` chunks, when\n * they are actually loaded asynchronously and thus not in the main bundle. This\n * function finds extra entry points in Webpack stats and corrects this value\n * whereever necessary. Does not modify {@param webpackStats}.\n */\nfunction markAsyncChunksNonInitial(webpackStats, extraEntryPoints) {\n    const { chunks = [], entrypoints: entryPoints = {} } = webpackStats;\n    // Find all Webpack chunk IDs not injected into the main bundle. We don't have\n    // to worry about transitive dependencies because extra entry points cannot be\n    // depended upon in Webpack, thus any extra entry point with `inject: false`,\n    // **cannot** be loaded in main bundle.\n    const asyncChunkIds = extraEntryPoints\n        .filter((entryPoint) => !entryPoint.inject && entryPoints[entryPoint.bundleName])\n        .flatMap((entryPoint) => { var _a; return (_a = entryPoints[entryPoint.bundleName].chunks) === null || _a === void 0 ? void 0 : _a.filter((n) => n !== 'runtime'); });\n    // Find chunks for each ID.\n    const asyncChunks = asyncChunkIds.map((chunkId) => {\n        const chunk = chunks.find((chunk) => chunk.id === chunkId);\n        if (!chunk) {\n            throw new Error(`Failed to find chunk (${chunkId}) in set:\\n${JSON.stringify(chunks)}`);\n        }\n        return chunk;\n    });\n    // A chunk is considered `initial` only if Webpack already belives it to be initial\n    // and the application developer did not mark it async via an extra entry point.\n    return chunks.map((chunk) => {\n        return asyncChunks.find((asyncChunk) => asyncChunk === chunk)\n            ? {\n                ...chunk,\n                initial: false,\n            }\n            : chunk;\n    });\n}\nexports.markAsyncChunksNonInitial = markAsyncChunksNonInitial;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,yBAAR,GAAoC,KAAK,CAAzC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,yBAAT,CAAmCC,YAAnC,EAAiDC,gBAAjD,EAAmE;EAC/D,MAAM;IAAEC,MAAM,GAAG,EAAX;IAAeC,WAAW,EAAEC,WAAW,GAAG;EAA1C,IAAiDJ,YAAvD,CAD+D,CAE/D;EACA;EACA;EACA;;EACA,MAAMK,aAAa,GAAGJ,gBAAgB,CACjCK,MADiB,CACTC,UAAD,IAAgB,CAACA,UAAU,CAACC,MAAZ,IAAsBJ,WAAW,CAACG,UAAU,CAACE,UAAZ,CADvC,EAEjBC,OAFiB,CAERH,UAAD,IAAgB;IAAE,IAAII,EAAJ;;IAAQ,OAAO,CAACA,EAAE,GAAGP,WAAW,CAACG,UAAU,CAACE,UAAZ,CAAX,CAAmCP,MAAzC,MAAqD,IAArD,IAA6DS,EAAE,KAAK,KAAK,CAAzE,GAA6E,KAAK,CAAlF,GAAsFA,EAAE,CAACL,MAAH,CAAWM,CAAD,IAAOA,CAAC,KAAK,SAAvB,CAA7F;EAAiI,CAFlJ,CAAtB,CAN+D,CAS/D;;EACA,MAAMC,WAAW,GAAGR,aAAa,CAACS,GAAd,CAAmBC,OAAD,IAAa;IAC/C,MAAMC,KAAK,GAAGd,MAAM,CAACe,IAAP,CAAaD,KAAD,IAAWA,KAAK,CAACE,EAAN,KAAaH,OAApC,CAAd;;IACA,IAAI,CAACC,KAAL,EAAY;MACR,MAAM,IAAIG,KAAJ,CAAW,yBAAwBJ,OAAQ,cAAaK,IAAI,CAACC,SAAL,CAAenB,MAAf,CAAuB,EAA/E,CAAN;IACH;;IACD,OAAOc,KAAP;EACH,CANmB,CAApB,CAV+D,CAiB/D;EACA;;EACA,OAAOd,MAAM,CAACY,GAAP,CAAYE,KAAD,IAAW;IACzB,OAAOH,WAAW,CAACI,IAAZ,CAAkBK,UAAD,IAAgBA,UAAU,KAAKN,KAAhD,IACD,EACE,GAAGA,KADL;MAEEO,OAAO,EAAE;IAFX,CADC,GAKDP,KALN;EAMH,CAPM,CAAP;AAQH;;AACDnB,OAAO,CAACE,yBAAR,GAAoCA,yBAApC"},"metadata":{},"sourceType":"script"}