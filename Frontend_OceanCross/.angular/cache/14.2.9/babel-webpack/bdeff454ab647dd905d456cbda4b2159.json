{"ast":null,"code":"\"use strict\";\n\nconst webpack = require(\"webpack\");\n\nconst {\n  isColorSupported\n} = require(\"colorette\");\n/** @typedef {import(\"webpack\").Configuration} Configuration */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").MultiCompiler} MultiCompiler */\n\n/** @typedef {import(\"webpack\").Stats} Stats */\n\n/** @typedef {import(\"webpack\").MultiStats} MultiStats */\n\n/** @typedef {import(\"../index.js\").IncomingMessage} IncomingMessage */\n\n/** @typedef {import(\"../index.js\").ServerResponse} ServerResponse */\n\n/** @typedef {Configuration[\"stats\"]} StatsOptions */\n\n/** @typedef {{ children: Configuration[\"stats\"][] }} MultiStatsOptions */\n\n/** @typedef {Exclude<Configuration[\"stats\"], boolean | string | undefined>} NormalizedStatsOptions */\n// TODO remove `color` after dropping webpack v4\n\n/** @typedef {{ children: StatsOptions[], colors?: any }} MultiNormalizedStatsOptions */\n\n/**\n * @template {IncomingMessage} Request\n * @template {ServerResponse} Response\n * @param {import(\"../index.js\").Context<Request, Response>} context\n */\n\n\nfunction setupHooks(context) {\n  function invalid() {\n    if (context.state) {\n      context.logger.log(\"Compilation starting...\");\n    } // We are now in invalid state\n    // eslint-disable-next-line no-param-reassign\n\n\n    context.state = false; // eslint-disable-next-line no-param-reassign, no-undefined\n\n    context.stats = undefined;\n  } // @ts-ignore\n\n\n  const statsForWebpack4 = webpack.Stats && webpack.Stats.presetToOptions;\n  /**\n   * @param {Configuration[\"stats\"]} statsOptions\n   * @returns {NormalizedStatsOptions}\n   */\n\n  function normalizeStatsOptions(statsOptions) {\n    if (statsForWebpack4) {\n      if (typeof statsOptions === \"undefined\") {\n        // eslint-disable-next-line no-param-reassign\n        statsOptions = {};\n      } else if (typeof statsOptions === \"boolean\" || typeof statsOptions === \"string\") {\n        // @ts-ignore\n        // eslint-disable-next-line no-param-reassign\n        statsOptions = webpack.Stats.presetToOptions(statsOptions);\n      } // @ts-ignore\n\n\n      return statsOptions;\n    }\n\n    if (typeof statsOptions === \"undefined\") {\n      // eslint-disable-next-line no-param-reassign\n      statsOptions = {\n        preset: \"normal\"\n      };\n    } else if (typeof statsOptions === \"boolean\") {\n      // eslint-disable-next-line no-param-reassign\n      statsOptions = statsOptions ? {\n        preset: \"normal\"\n      } : {\n        preset: \"none\"\n      };\n    } else if (typeof statsOptions === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      statsOptions = {\n        preset: statsOptions\n      };\n    }\n\n    return statsOptions;\n  }\n  /**\n   * @param {Stats | MultiStats} stats\n   */\n\n\n  function done(stats) {\n    // We are now on valid state\n    // eslint-disable-next-line no-param-reassign\n    context.state = true; // eslint-disable-next-line no-param-reassign\n\n    context.stats = stats; // Do the stuff in nextTick, because bundle may be invalidated if a change happened while compiling\n\n    process.nextTick(() => {\n      const {\n        compiler,\n        logger,\n        options,\n        state,\n        callbacks\n      } = context; // Check if still in valid state\n\n      if (!state) {\n        return;\n      }\n\n      logger.log(\"Compilation finished\");\n      const isMultiCompilerMode = Boolean(\n      /** @type {MultiCompiler} */\n      compiler.compilers);\n      /**\n       * @type {StatsOptions | MultiStatsOptions | NormalizedStatsOptions | MultiNormalizedStatsOptions}\n       */\n\n      let statsOptions;\n\n      if (typeof options.stats !== \"undefined\") {\n        statsOptions = isMultiCompilerMode ? {\n          children:\n          /** @type {MultiCompiler} */\n          compiler.compilers.map(() => options.stats)\n        } : options.stats;\n      } else {\n        statsOptions = isMultiCompilerMode ? {\n          children:\n          /** @type {MultiCompiler} */\n          compiler.compilers.map(child => child.options.stats)\n        } :\n        /** @type {Compiler} */\n        compiler.options.stats;\n      }\n\n      if (isMultiCompilerMode) {\n        /** @type {MultiNormalizedStatsOptions} */\n        statsOptions.children =\n        /** @type {MultiStatsOptions} */\n        statsOptions.children.map(\n        /**\n         * @param {StatsOptions} childStatsOptions\n         * @return {NormalizedStatsOptions}\n         */\n        childStatsOptions => {\n          // eslint-disable-next-line no-param-reassign\n          childStatsOptions = normalizeStatsOptions(childStatsOptions);\n\n          if (typeof childStatsOptions.colors === \"undefined\") {\n            // eslint-disable-next-line no-param-reassign\n            childStatsOptions.colors = isColorSupported;\n          }\n\n          return childStatsOptions;\n        });\n      } else {\n        /** @type {NormalizedStatsOptions} */\n        statsOptions = normalizeStatsOptions(\n        /** @type {StatsOptions} */\n        statsOptions);\n\n        if (typeof statsOptions.colors === \"undefined\") {\n          statsOptions.colors = isColorSupported;\n        }\n      } // TODO webpack@4 doesn't support `{ children: [{ colors: true }, { colors: true }] }` for stats\n\n\n      if (\n      /** @type {MultiCompiler} */\n      compiler.compilers && statsForWebpack4) {\n        /** @type {MultiNormalizedStatsOptions} */\n        statsOptions.colors =\n        /** @type {MultiNormalizedStatsOptions} */\n        statsOptions.children.some(\n        /**\n         * @param {StatsOptions} child\n         */\n        // @ts-ignore\n        child => child.colors);\n      }\n\n      const printedStats = stats.toString(statsOptions); // Avoid extra empty line when `stats: 'none'`\n\n      if (printedStats) {\n        // eslint-disable-next-line no-console\n        console.log(printedStats);\n      } // eslint-disable-next-line no-param-reassign\n\n\n      context.callbacks = []; // Execute callback that are delayed\n\n      callbacks.forEach(\n      /**\n       * @param {(...args: any[]) => Stats | MultiStats} callback\n       */\n      callback => {\n        callback(stats);\n      });\n    });\n  }\n\n  context.compiler.hooks.watchRun.tap(\"webpack-dev-middleware\", invalid);\n  context.compiler.hooks.invalid.tap(\"webpack-dev-middleware\", invalid);\n  context.compiler.hooks.done.tap(\"webpack-dev-middleware\", done);\n}\n\nmodule.exports = setupHooks;","map":{"version":3,"names":["webpack","require","isColorSupported","setupHooks","context","invalid","state","logger","log","stats","undefined","statsForWebpack4","Stats","presetToOptions","normalizeStatsOptions","statsOptions","preset","done","process","nextTick","compiler","options","callbacks","isMultiCompilerMode","Boolean","compilers","children","map","child","childStatsOptions","colors","some","printedStats","toString","console","forEach","callback","hooks","watchRun","tap","module","exports"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/webpack-dev-middleware/dist/utils/setupHooks.js"],"sourcesContent":["\"use strict\";\n\nconst webpack = require(\"webpack\");\n\nconst {\n  isColorSupported\n} = require(\"colorette\");\n/** @typedef {import(\"webpack\").Configuration} Configuration */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").MultiCompiler} MultiCompiler */\n\n/** @typedef {import(\"webpack\").Stats} Stats */\n\n/** @typedef {import(\"webpack\").MultiStats} MultiStats */\n\n/** @typedef {import(\"../index.js\").IncomingMessage} IncomingMessage */\n\n/** @typedef {import(\"../index.js\").ServerResponse} ServerResponse */\n\n/** @typedef {Configuration[\"stats\"]} StatsOptions */\n\n/** @typedef {{ children: Configuration[\"stats\"][] }} MultiStatsOptions */\n\n/** @typedef {Exclude<Configuration[\"stats\"], boolean | string | undefined>} NormalizedStatsOptions */\n// TODO remove `color` after dropping webpack v4\n\n/** @typedef {{ children: StatsOptions[], colors?: any }} MultiNormalizedStatsOptions */\n\n/**\n * @template {IncomingMessage} Request\n * @template {ServerResponse} Response\n * @param {import(\"../index.js\").Context<Request, Response>} context\n */\n\n\nfunction setupHooks(context) {\n  function invalid() {\n    if (context.state) {\n      context.logger.log(\"Compilation starting...\");\n    } // We are now in invalid state\n    // eslint-disable-next-line no-param-reassign\n\n\n    context.state = false; // eslint-disable-next-line no-param-reassign, no-undefined\n\n    context.stats = undefined;\n  } // @ts-ignore\n\n\n  const statsForWebpack4 = webpack.Stats && webpack.Stats.presetToOptions;\n  /**\n   * @param {Configuration[\"stats\"]} statsOptions\n   * @returns {NormalizedStatsOptions}\n   */\n\n  function normalizeStatsOptions(statsOptions) {\n    if (statsForWebpack4) {\n      if (typeof statsOptions === \"undefined\") {\n        // eslint-disable-next-line no-param-reassign\n        statsOptions = {};\n      } else if (typeof statsOptions === \"boolean\" || typeof statsOptions === \"string\") {\n        // @ts-ignore\n        // eslint-disable-next-line no-param-reassign\n        statsOptions = webpack.Stats.presetToOptions(statsOptions);\n      } // @ts-ignore\n\n\n      return statsOptions;\n    }\n\n    if (typeof statsOptions === \"undefined\") {\n      // eslint-disable-next-line no-param-reassign\n      statsOptions = {\n        preset: \"normal\"\n      };\n    } else if (typeof statsOptions === \"boolean\") {\n      // eslint-disable-next-line no-param-reassign\n      statsOptions = statsOptions ? {\n        preset: \"normal\"\n      } : {\n        preset: \"none\"\n      };\n    } else if (typeof statsOptions === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      statsOptions = {\n        preset: statsOptions\n      };\n    }\n\n    return statsOptions;\n  }\n  /**\n   * @param {Stats | MultiStats} stats\n   */\n\n\n  function done(stats) {\n    // We are now on valid state\n    // eslint-disable-next-line no-param-reassign\n    context.state = true; // eslint-disable-next-line no-param-reassign\n\n    context.stats = stats; // Do the stuff in nextTick, because bundle may be invalidated if a change happened while compiling\n\n    process.nextTick(() => {\n      const {\n        compiler,\n        logger,\n        options,\n        state,\n        callbacks\n      } = context; // Check if still in valid state\n\n      if (!state) {\n        return;\n      }\n\n      logger.log(\"Compilation finished\");\n      const isMultiCompilerMode = Boolean(\n      /** @type {MultiCompiler} */\n      compiler.compilers);\n      /**\n       * @type {StatsOptions | MultiStatsOptions | NormalizedStatsOptions | MultiNormalizedStatsOptions}\n       */\n\n      let statsOptions;\n\n      if (typeof options.stats !== \"undefined\") {\n        statsOptions = isMultiCompilerMode ? {\n          children:\n          /** @type {MultiCompiler} */\n          compiler.compilers.map(() => options.stats)\n        } : options.stats;\n      } else {\n        statsOptions = isMultiCompilerMode ? {\n          children:\n          /** @type {MultiCompiler} */\n          compiler.compilers.map(child => child.options.stats)\n        } :\n        /** @type {Compiler} */\n        compiler.options.stats;\n      }\n\n      if (isMultiCompilerMode) {\n        /** @type {MultiNormalizedStatsOptions} */\n        statsOptions.children =\n        /** @type {MultiStatsOptions} */\n        statsOptions.children.map(\n        /**\n         * @param {StatsOptions} childStatsOptions\n         * @return {NormalizedStatsOptions}\n         */\n        childStatsOptions => {\n          // eslint-disable-next-line no-param-reassign\n          childStatsOptions = normalizeStatsOptions(childStatsOptions);\n\n          if (typeof childStatsOptions.colors === \"undefined\") {\n            // eslint-disable-next-line no-param-reassign\n            childStatsOptions.colors = isColorSupported;\n          }\n\n          return childStatsOptions;\n        });\n      } else {\n        /** @type {NormalizedStatsOptions} */\n        statsOptions = normalizeStatsOptions(\n        /** @type {StatsOptions} */\n        statsOptions);\n\n        if (typeof statsOptions.colors === \"undefined\") {\n          statsOptions.colors = isColorSupported;\n        }\n      } // TODO webpack@4 doesn't support `{ children: [{ colors: true }, { colors: true }] }` for stats\n\n\n      if (\n      /** @type {MultiCompiler} */\n      compiler.compilers && statsForWebpack4) {\n        /** @type {MultiNormalizedStatsOptions} */\n        statsOptions.colors =\n        /** @type {MultiNormalizedStatsOptions} */\n        statsOptions.children.some(\n        /**\n         * @param {StatsOptions} child\n         */\n        // @ts-ignore\n        child => child.colors);\n      }\n\n      const printedStats = stats.toString(statsOptions); // Avoid extra empty line when `stats: 'none'`\n\n      if (printedStats) {\n        // eslint-disable-next-line no-console\n        console.log(printedStats);\n      } // eslint-disable-next-line no-param-reassign\n\n\n      context.callbacks = []; // Execute callback that are delayed\n\n      callbacks.forEach(\n      /**\n       * @param {(...args: any[]) => Stats | MultiStats} callback\n       */\n      callback => {\n        callback(stats);\n      });\n    });\n  }\n\n  context.compiler.hooks.watchRun.tap(\"webpack-dev-middleware\", invalid);\n  context.compiler.hooks.invalid.tap(\"webpack-dev-middleware\", invalid);\n  context.compiler.hooks.done.tap(\"webpack-dev-middleware\", done);\n}\n\nmodule.exports = setupHooks;"],"mappings":"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"},"metadata":{},"sourceType":"script"}