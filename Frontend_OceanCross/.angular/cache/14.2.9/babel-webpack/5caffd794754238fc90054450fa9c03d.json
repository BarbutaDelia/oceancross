{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SingleTestTransformLoader = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst path_1 = require(\"path\");\n\nexports.SingleTestTransformLoader = __filename;\n/**\n * This loader transforms the default test file to only run tests\n * for some specs instead of all specs.\n * It works by replacing the known content of the auto-generated test file:\n *   const context = require.context('./', true, /\\.spec\\.ts$/);\n *   context.keys().map(context);\n * with:\n *   const context = { keys: () => ({ map: (_a) => { } }) };\n *   context.keys().map(context);\n * So that it does nothing.\n * Then it adds import statements for each file in the files options\n * array to import them directly, and thus run the tests there.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction loader(source) {\n  const {\n    files = [],\n    logger = console\n  } = this.getOptions(); // signal the user that expected content is not present.\n\n  if (!source.includes('require.context(')) {\n    logger.error(core_1.tags.stripIndent`The 'include' option requires that the 'main' file for tests includes the below line:\n      const context = require.context('./', true, /\\.spec\\.ts$/);\n      Arguments passed to require.context are not strict and can be changed.`);\n    return source;\n  }\n\n  const targettedImports = files.map(path => `require('./${path.replace('.' + (0, path_1.extname)(path), '')}');`).join('\\n');\n  const mockedRequireContext = 'Object.assign(() => { }, { keys: () => [], resolve: () => undefined });\\n';\n  source = source.replace(/require\\.context\\(.*/, mockedRequireContext + targettedImports);\n  return source;\n}\n\nexports.default = loader;","map":{"version":3,"names":["Object","defineProperty","exports","value","SingleTestTransformLoader","core_1","require","path_1","__filename","loader","source","files","logger","console","getOptions","includes","error","tags","stripIndent","targettedImports","map","path","replace","extname","join","mockedRequireContext","default"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@angular-devkit/build-angular/src/webpack/plugins/single-test-transform.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SingleTestTransformLoader = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst path_1 = require(\"path\");\nexports.SingleTestTransformLoader = __filename;\n/**\n * This loader transforms the default test file to only run tests\n * for some specs instead of all specs.\n * It works by replacing the known content of the auto-generated test file:\n *   const context = require.context('./', true, /\\.spec\\.ts$/);\n *   context.keys().map(context);\n * with:\n *   const context = { keys: () => ({ map: (_a) => { } }) };\n *   context.keys().map(context);\n * So that it does nothing.\n * Then it adds import statements for each file in the files options\n * array to import them directly, and thus run the tests there.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction loader(source) {\n    const { files = [], logger = console } = this.getOptions();\n    // signal the user that expected content is not present.\n    if (!source.includes('require.context(')) {\n        logger.error(core_1.tags.stripIndent `The 'include' option requires that the 'main' file for tests includes the below line:\n      const context = require.context('./', true, /\\.spec\\.ts$/);\n      Arguments passed to require.context are not strict and can be changed.`);\n        return source;\n    }\n    const targettedImports = files\n        .map((path) => `require('./${path.replace('.' + (0, path_1.extname)(path), '')}');`)\n        .join('\\n');\n    const mockedRequireContext = 'Object.assign(() => { }, { keys: () => [], resolve: () => undefined });\\n';\n    source = source.replace(/require\\.context\\(.*/, mockedRequireContext + targettedImports);\n    return source;\n}\nexports.default = loader;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,yBAAR,GAAoC,KAAK,CAAzC;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,MAAD,CAAtB;;AACAJ,OAAO,CAACE,yBAAR,GAAoCI,UAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;EACpB,MAAM;IAAEC,KAAK,GAAG,EAAV;IAAcC,MAAM,GAAGC;EAAvB,IAAmC,KAAKC,UAAL,EAAzC,CADoB,CAEpB;;EACA,IAAI,CAACJ,MAAM,CAACK,QAAP,CAAgB,kBAAhB,CAAL,EAA0C;IACtCH,MAAM,CAACI,KAAP,CAAaX,MAAM,CAACY,IAAP,CAAYC,WAAa;AAC9C;AACA,6EAFQ;IAGA,OAAOR,MAAP;EACH;;EACD,MAAMS,gBAAgB,GAAGR,KAAK,CACzBS,GADoB,CACfC,IAAD,IAAW,cAAaA,IAAI,CAACC,OAAL,CAAa,MAAM,CAAC,GAAGf,MAAM,CAACgB,OAAX,EAAoBF,IAApB,CAAnB,EAA8C,EAA9C,CAAkD,KAD1D,EAEpBG,IAFoB,CAEf,IAFe,CAAzB;EAGA,MAAMC,oBAAoB,GAAG,2EAA7B;EACAf,MAAM,GAAGA,MAAM,CAACY,OAAP,CAAe,sBAAf,EAAuCG,oBAAoB,GAAGN,gBAA9D,CAAT;EACA,OAAOT,MAAP;AACH;;AACDR,OAAO,CAACwB,OAAR,GAAkBjB,MAAlB"},"metadata":{},"sourceType":"script"}