{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runModuleAsObservableFork = void 0;\n\nconst child_process_1 = require(\"child_process\");\n\nconst path_1 = require(\"path\");\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst treeKill = require('tree-kill');\n\nfunction runModuleAsObservableFork(cwd, modulePath, exportName, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nargs) {\n  return new rxjs_1.Observable(obs => {\n    const workerPath = (0, path_1.resolve)(__dirname, './run-module-worker.js');\n    const debugArgRegex = /--inspect(?:-brk|-port)?|--debug(?:-brk|-port)/;\n    const execArgv = process.execArgv.filter(arg => {\n      // Remove debug args.\n      // Workaround for https://github.com/nodejs/node/issues/9435\n      return !debugArgRegex.test(arg);\n    });\n    const forkOptions = {\n      cwd,\n      execArgv\n    }; // TODO: support passing in a logger to use as stdio streams\n    // if (logger) {\n    //   (forkOptions as any).stdio = [\n    //     'ignore',\n    //     logger.info, // make it a stream\n    //     logger.error, // make it a stream\n    //   ];\n    // }\n\n    const forkedProcess = (0, child_process_1.fork)(workerPath, undefined, forkOptions); // Cleanup.\n\n    const killForkedProcess = () => {\n      if (forkedProcess && forkedProcess.pid) {\n        treeKill(forkedProcess.pid, 'SIGTERM');\n      }\n    }; // Handle child process exit.\n\n\n    const handleChildProcessExit = code => {\n      killForkedProcess();\n\n      if (code && code !== 0) {\n        obs.error();\n      }\n\n      obs.next({\n        success: true\n      });\n      obs.complete();\n    };\n\n    forkedProcess.once('exit', handleChildProcessExit);\n    forkedProcess.once('SIGINT', handleChildProcessExit);\n    forkedProcess.once('uncaughtException', handleChildProcessExit); // Handle parent process exit.\n\n    const handleParentProcessExit = () => {\n      killForkedProcess();\n    };\n\n    process.once('exit', handleParentProcessExit);\n    process.once('SIGINT', handleParentProcessExit);\n    process.once('uncaughtException', handleParentProcessExit); // Run module.\n\n    forkedProcess.send({\n      hash: '5d4b9a5c0a4e0f9977598437b0e85bcc',\n      modulePath,\n      exportName,\n      args\n    }); // Teardown logic. When unsubscribing, kill the forked process.\n\n    return killForkedProcess;\n  });\n}\n\nexports.runModuleAsObservableFork = runModuleAsObservableFork;","map":{"version":3,"names":["Object","defineProperty","exports","value","runModuleAsObservableFork","child_process_1","require","path_1","rxjs_1","treeKill","cwd","modulePath","exportName","args","Observable","obs","workerPath","resolve","__dirname","debugArgRegex","execArgv","process","filter","arg","test","forkOptions","forkedProcess","fork","undefined","killForkedProcess","pid","handleChildProcessExit","code","error","next","success","complete","once","handleParentProcessExit","send","hash"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@angular-devkit/build-angular/src/utils/run-module-as-observable-fork.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.runModuleAsObservableFork = void 0;\nconst child_process_1 = require(\"child_process\");\nconst path_1 = require(\"path\");\nconst rxjs_1 = require(\"rxjs\");\nconst treeKill = require('tree-kill');\nfunction runModuleAsObservableFork(cwd, modulePath, exportName, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nargs) {\n    return new rxjs_1.Observable((obs) => {\n        const workerPath = (0, path_1.resolve)(__dirname, './run-module-worker.js');\n        const debugArgRegex = /--inspect(?:-brk|-port)?|--debug(?:-brk|-port)/;\n        const execArgv = process.execArgv.filter((arg) => {\n            // Remove debug args.\n            // Workaround for https://github.com/nodejs/node/issues/9435\n            return !debugArgRegex.test(arg);\n        });\n        const forkOptions = {\n            cwd,\n            execArgv,\n        };\n        // TODO: support passing in a logger to use as stdio streams\n        // if (logger) {\n        //   (forkOptions as any).stdio = [\n        //     'ignore',\n        //     logger.info, // make it a stream\n        //     logger.error, // make it a stream\n        //   ];\n        // }\n        const forkedProcess = (0, child_process_1.fork)(workerPath, undefined, forkOptions);\n        // Cleanup.\n        const killForkedProcess = () => {\n            if (forkedProcess && forkedProcess.pid) {\n                treeKill(forkedProcess.pid, 'SIGTERM');\n            }\n        };\n        // Handle child process exit.\n        const handleChildProcessExit = (code) => {\n            killForkedProcess();\n            if (code && code !== 0) {\n                obs.error();\n            }\n            obs.next({ success: true });\n            obs.complete();\n        };\n        forkedProcess.once('exit', handleChildProcessExit);\n        forkedProcess.once('SIGINT', handleChildProcessExit);\n        forkedProcess.once('uncaughtException', handleChildProcessExit);\n        // Handle parent process exit.\n        const handleParentProcessExit = () => {\n            killForkedProcess();\n        };\n        process.once('exit', handleParentProcessExit);\n        process.once('SIGINT', handleParentProcessExit);\n        process.once('uncaughtException', handleParentProcessExit);\n        // Run module.\n        forkedProcess.send({\n            hash: '5d4b9a5c0a4e0f9977598437b0e85bcc',\n            modulePath,\n            exportName,\n            args,\n        });\n        // Teardown logic. When unsubscribing, kill the forked process.\n        return killForkedProcess;\n    });\n}\nexports.runModuleAsObservableFork = runModuleAsObservableFork;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,yBAAR,GAAoC,KAAK,CAAzC;;AACA,MAAMC,eAAe,GAAGC,OAAO,CAAC,eAAD,CAA/B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;;AACA,SAASF,yBAAT,CAAmCM,GAAnC,EAAwCC,UAAxC,EAAoDC,UAApD,EACA;AACAC,IAFA,EAEM;EACF,OAAO,IAAIL,MAAM,CAACM,UAAX,CAAuBC,GAAD,IAAS;IAClC,MAAMC,UAAU,GAAG,CAAC,GAAGT,MAAM,CAACU,OAAX,EAAoBC,SAApB,EAA+B,wBAA/B,CAAnB;IACA,MAAMC,aAAa,GAAG,gDAAtB;IACA,MAAMC,QAAQ,GAAGC,OAAO,CAACD,QAAR,CAAiBE,MAAjB,CAAyBC,GAAD,IAAS;MAC9C;MACA;MACA,OAAO,CAACJ,aAAa,CAACK,IAAd,CAAmBD,GAAnB,CAAR;IACH,CAJgB,CAAjB;IAKA,MAAME,WAAW,GAAG;MAChBf,GADgB;MAEhBU;IAFgB,CAApB,CARkC,CAYlC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA,MAAMM,aAAa,GAAG,CAAC,GAAGrB,eAAe,CAACsB,IAApB,EAA0BX,UAA1B,EAAsCY,SAAtC,EAAiDH,WAAjD,CAAtB,CApBkC,CAqBlC;;IACA,MAAMI,iBAAiB,GAAG,MAAM;MAC5B,IAAIH,aAAa,IAAIA,aAAa,CAACI,GAAnC,EAAwC;QACpCrB,QAAQ,CAACiB,aAAa,CAACI,GAAf,EAAoB,SAApB,CAAR;MACH;IACJ,CAJD,CAtBkC,CA2BlC;;;IACA,MAAMC,sBAAsB,GAAIC,IAAD,IAAU;MACrCH,iBAAiB;;MACjB,IAAIG,IAAI,IAAIA,IAAI,KAAK,CAArB,EAAwB;QACpBjB,GAAG,CAACkB,KAAJ;MACH;;MACDlB,GAAG,CAACmB,IAAJ,CAAS;QAAEC,OAAO,EAAE;MAAX,CAAT;MACApB,GAAG,CAACqB,QAAJ;IACH,CAPD;;IAQAV,aAAa,CAACW,IAAd,CAAmB,MAAnB,EAA2BN,sBAA3B;IACAL,aAAa,CAACW,IAAd,CAAmB,QAAnB,EAA6BN,sBAA7B;IACAL,aAAa,CAACW,IAAd,CAAmB,mBAAnB,EAAwCN,sBAAxC,EAtCkC,CAuClC;;IACA,MAAMO,uBAAuB,GAAG,MAAM;MAClCT,iBAAiB;IACpB,CAFD;;IAGAR,OAAO,CAACgB,IAAR,CAAa,MAAb,EAAqBC,uBAArB;IACAjB,OAAO,CAACgB,IAAR,CAAa,QAAb,EAAuBC,uBAAvB;IACAjB,OAAO,CAACgB,IAAR,CAAa,mBAAb,EAAkCC,uBAAlC,EA7CkC,CA8ClC;;IACAZ,aAAa,CAACa,IAAd,CAAmB;MACfC,IAAI,EAAE,kCADS;MAEf7B,UAFe;MAGfC,UAHe;MAIfC;IAJe,CAAnB,EA/CkC,CAqDlC;;IACA,OAAOgB,iBAAP;EACH,CAvDM,CAAP;AAwDH;;AACD3B,OAAO,CAACE,yBAAR,GAAoCA,yBAApC"},"metadata":{},"sourceType":"script"}