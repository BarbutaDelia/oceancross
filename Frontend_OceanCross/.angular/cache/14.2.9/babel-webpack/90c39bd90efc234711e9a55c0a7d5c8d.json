{"ast":null,"code":"'use strict';\n\nconst BrowserResult = require('./browser_result');\n\nconst helper = require('./helper');\n\nclass BrowserCollection {\n  constructor(emitter, browsers = []) {\n    this.browsers = browsers;\n    this.emitter = emitter;\n  }\n\n  add(browser) {\n    this.browsers.push(browser);\n    this.emitter.emit('browsers_change', this);\n  }\n\n  remove(browser) {\n    if (helper.arrayRemove(this.browsers, browser)) {\n      this.emitter.emit('browsers_change', this);\n      return true;\n    }\n\n    return false;\n  }\n\n  getById(browserId) {\n    return this.browsers.find(browser => browser.id === browserId) || null;\n  }\n\n  getNonReady() {\n    return this.browsers.filter(browser => !browser.isConnected());\n  }\n\n  areAllReady() {\n    return this.browsers.every(browser => browser.isConnected());\n  }\n\n  serialize() {\n    return this.browsers.map(browser => browser.serialize());\n  }\n\n  calculateExitCode(results, singleRunBrowserNotCaptured, config) {\n    config = config || {};\n\n    if (results.disconnected || singleRunBrowserNotCaptured) {\n      return 1;\n    }\n\n    if (results.skipped && config.failOnSkippedTests) {\n      return 1;\n    }\n\n    if (results.success + results.failed === 0 && !!config.failOnEmptyTestSuite) {\n      return 1;\n    }\n\n    if (results.error) {\n      return 1;\n    }\n\n    if (config.failOnFailingTestSuite === false) {\n      return 0; // Tests executed without infrastructure error, exit with 0 independent of test status.\n    }\n\n    return results.failed ? 1 : 0;\n  }\n\n  getResults(singleRunBrowserNotCaptured, config) {\n    const results = {\n      success: 0,\n      failed: 0,\n      skipped: 0,\n      error: false,\n      disconnected: false,\n      exitCode: 0\n    };\n    this.browsers.forEach(browser => {\n      results.success += browser.lastResult.success;\n      results.failed += browser.lastResult.failed;\n      results.skipped += browser.lastResult.skipped;\n      results.error = results.error || browser.lastResult.error;\n      results.disconnected = results.disconnected || browser.lastResult.disconnected;\n    });\n    results.exitCode = this.calculateExitCode(results, singleRunBrowserNotCaptured, config);\n    return results;\n  }\n\n  clearResults() {\n    this.browsers.forEach(browser => {\n      browser.lastResult = new BrowserResult();\n    });\n  }\n\n  clone() {\n    return new BrowserCollection(this.emitter, this.browsers.slice());\n  } // Array APIs\n\n\n  map(callback, context) {\n    return this.browsers.map(callback, context);\n  }\n\n  forEach(callback, context) {\n    return this.browsers.forEach(callback, context);\n  }\n\n  get length() {\n    return this.browsers.length;\n  }\n\n}\n\nBrowserCollection.factory = function (emitter) {\n  return new BrowserCollection(emitter);\n};\n\nmodule.exports = BrowserCollection;","map":{"version":3,"names":["BrowserResult","require","helper","BrowserCollection","constructor","emitter","browsers","add","browser","push","emit","remove","arrayRemove","getById","browserId","find","id","getNonReady","filter","isConnected","areAllReady","every","serialize","map","calculateExitCode","results","singleRunBrowserNotCaptured","config","disconnected","skipped","failOnSkippedTests","success","failed","failOnEmptyTestSuite","error","failOnFailingTestSuite","getResults","exitCode","forEach","lastResult","clearResults","clone","slice","callback","context","length","factory","module","exports"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/karma/lib/browser_collection.js"],"sourcesContent":["'use strict'\n\nconst BrowserResult = require('./browser_result')\nconst helper = require('./helper')\n\nclass BrowserCollection {\n  constructor (emitter, browsers = []) {\n    this.browsers = browsers\n    this.emitter = emitter\n  }\n\n  add (browser) {\n    this.browsers.push(browser)\n    this.emitter.emit('browsers_change', this)\n  }\n\n  remove (browser) {\n    if (helper.arrayRemove(this.browsers, browser)) {\n      this.emitter.emit('browsers_change', this)\n      return true\n    }\n    return false\n  }\n\n  getById (browserId) {\n    return this.browsers.find((browser) => browser.id === browserId) || null\n  }\n\n  getNonReady () {\n    return this.browsers.filter((browser) => !browser.isConnected())\n  }\n\n  areAllReady () {\n    return this.browsers.every((browser) => browser.isConnected())\n  }\n\n  serialize () {\n    return this.browsers.map((browser) => browser.serialize())\n  }\n\n  calculateExitCode (results, singleRunBrowserNotCaptured, config) {\n    config = config || {}\n    if (results.disconnected || singleRunBrowserNotCaptured) {\n      return 1\n    }\n    if (results.skipped && config.failOnSkippedTests) {\n      return 1\n    }\n    if (results.success + results.failed === 0 && !!config.failOnEmptyTestSuite) {\n      return 1\n    }\n    if (results.error) {\n      return 1\n    }\n    if (config.failOnFailingTestSuite === false) {\n      return 0 // Tests executed without infrastructure error, exit with 0 independent of test status.\n    }\n    return results.failed ? 1 : 0\n  }\n\n  getResults (singleRunBrowserNotCaptured, config) {\n    const results = { success: 0, failed: 0, skipped: 0, error: false, disconnected: false, exitCode: 0 }\n    this.browsers.forEach((browser) => {\n      results.success += browser.lastResult.success\n      results.failed += browser.lastResult.failed\n      results.skipped += browser.lastResult.skipped\n      results.error = results.error || browser.lastResult.error\n      results.disconnected = results.disconnected || browser.lastResult.disconnected\n    })\n\n    results.exitCode = this.calculateExitCode(results, singleRunBrowserNotCaptured, config)\n    return results\n  }\n\n  clearResults () {\n    this.browsers.forEach((browser) => {\n      browser.lastResult = new BrowserResult()\n    })\n  }\n\n  clone () {\n    return new BrowserCollection(this.emitter, this.browsers.slice())\n  }\n\n  // Array APIs\n  map (callback, context) {\n    return this.browsers.map(callback, context)\n  }\n\n  forEach (callback, context) {\n    return this.browsers.forEach(callback, context)\n  }\n\n  get length () {\n    return this.browsers.length\n  }\n}\n\nBrowserCollection.factory = function (emitter) {\n  return new BrowserCollection(emitter)\n}\n\nmodule.exports = BrowserCollection\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}