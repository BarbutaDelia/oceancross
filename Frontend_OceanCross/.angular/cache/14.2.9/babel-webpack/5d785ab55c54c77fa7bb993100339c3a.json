{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBinaryFileSync = exports.isBinaryFile = void 0;\n\nconst fs = require(\"fs\");\n\nconst util_1 = require(\"util\");\n\nconst statAsync = util_1.promisify(fs.stat);\nconst openAsync = util_1.promisify(fs.open);\nconst closeAsync = util_1.promisify(fs.close);\nconst MAX_BYTES = 512; // A very basic non-exception raising reader. Read bytes and\n// at the end use hasError() to check whether this worked.\n\nclass Reader {\n  constructor(fileBuffer, size) {\n    this.fileBuffer = fileBuffer;\n    this.size = size;\n    this.offset = 0;\n    this.error = false;\n  }\n\n  hasError() {\n    return this.error;\n  }\n\n  nextByte() {\n    if (this.offset === this.size || this.hasError()) {\n      this.error = true;\n      return 0xff;\n    }\n\n    return this.fileBuffer[this.offset++];\n  }\n\n  next(len) {\n    const n = new Array();\n\n    for (let i = 0; i < len; i++) {\n      n[i] = this.nextByte();\n    }\n\n    return n;\n  }\n\n} // Read a Google Protobuf var(iable)int from the buffer.\n\n\nfunction readProtoVarInt(reader) {\n  let idx = 0;\n  let varInt = 0;\n\n  while (!reader.hasError()) {\n    const b = reader.nextByte();\n    varInt = varInt | (b & 0x7f) << 7 * idx;\n\n    if ((b & 0x80) === 0) {\n      break;\n    }\n\n    idx++;\n  }\n\n  return varInt;\n} // Attempt to taste a full Google Protobuf message.\n\n\nfunction readProtoMessage(reader) {\n  const varInt = readProtoVarInt(reader);\n  const wireType = varInt & 0x7;\n\n  switch (wireType) {\n    case 0:\n      readProtoVarInt(reader);\n      return true;\n\n    case 1:\n      reader.next(8);\n      return true;\n\n    case 2:\n      const len = readProtoVarInt(reader);\n      reader.next(len);\n      return true;\n\n    case 5:\n      reader.next(4);\n      return true;\n  }\n\n  return false;\n} // Check whether this seems to be a valid protobuf file.\n\n\nfunction isBinaryProto(fileBuffer, totalBytes) {\n  const reader = new Reader(fileBuffer, totalBytes);\n  let numMessages = 0;\n\n  while (true) {\n    // Definitely not a valid protobuf\n    if (!readProtoMessage(reader) && !reader.hasError()) {\n      return false;\n    } // Short read?\n\n\n    if (reader.hasError()) {\n      break;\n    }\n\n    numMessages++;\n  }\n\n  return numMessages > 0;\n}\n\nfunction isBinaryFile(file, size) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (isString(file)) {\n      const stat = yield statAsync(file);\n      isStatFile(stat);\n      const fileDescriptor = yield openAsync(file, 'r');\n      const allocBuffer = Buffer.alloc(MAX_BYTES); // Read the file with no encoding for raw buffer access.\n      // NB: something is severely wrong with promisify, had to construct my own Promise\n\n      return new Promise((fulfill, reject) => {\n        fs.read(fileDescriptor, allocBuffer, 0, MAX_BYTES, 0, (err, bytesRead, _) => {\n          closeAsync(fileDescriptor);\n\n          if (err) {\n            reject(err);\n          } else {\n            fulfill(isBinaryCheck(allocBuffer, bytesRead));\n          }\n        });\n      });\n    } else {\n      if (size === undefined) {\n        size = file.length;\n      }\n\n      return isBinaryCheck(file, size);\n    }\n  });\n}\n\nexports.isBinaryFile = isBinaryFile;\n\nfunction isBinaryFileSync(file, size) {\n  if (isString(file)) {\n    const stat = fs.statSync(file);\n    isStatFile(stat);\n    const fileDescriptor = fs.openSync(file, 'r');\n    const allocBuffer = Buffer.alloc(MAX_BYTES);\n    const bytesRead = fs.readSync(fileDescriptor, allocBuffer, 0, MAX_BYTES, 0);\n    fs.closeSync(fileDescriptor);\n    return isBinaryCheck(allocBuffer, bytesRead);\n  } else {\n    if (size === undefined) {\n      size = file.length;\n    }\n\n    return isBinaryCheck(file, size);\n  }\n}\n\nexports.isBinaryFileSync = isBinaryFileSync;\n\nfunction isBinaryCheck(fileBuffer, bytesRead) {\n  // empty file. no clue what it is.\n  if (bytesRead === 0) {\n    return false;\n  }\n\n  let suspiciousBytes = 0;\n  const totalBytes = Math.min(bytesRead, MAX_BYTES); // UTF-8 BOM\n\n  if (bytesRead >= 3 && fileBuffer[0] === 0xef && fileBuffer[1] === 0xbb && fileBuffer[2] === 0xbf) {\n    return false;\n  } // UTF-32 BOM\n\n\n  if (bytesRead >= 4 && fileBuffer[0] === 0x00 && fileBuffer[1] === 0x00 && fileBuffer[2] === 0xfe && fileBuffer[3] === 0xff) {\n    return false;\n  } // UTF-32 LE BOM\n\n\n  if (bytesRead >= 4 && fileBuffer[0] === 0xff && fileBuffer[1] === 0xfe && fileBuffer[2] === 0x00 && fileBuffer[3] === 0x00) {\n    return false;\n  } // GB BOM\n\n\n  if (bytesRead >= 4 && fileBuffer[0] === 0x84 && fileBuffer[1] === 0x31 && fileBuffer[2] === 0x95 && fileBuffer[3] === 0x33) {\n    return false;\n  }\n\n  if (totalBytes >= 5 && fileBuffer.slice(0, 5).toString() === '%PDF-') {\n    /* PDF. This is binary. */\n    return true;\n  } // UTF-16 BE BOM\n\n\n  if (bytesRead >= 2 && fileBuffer[0] === 0xfe && fileBuffer[1] === 0xff) {\n    return false;\n  } // UTF-16 LE BOM\n\n\n  if (bytesRead >= 2 && fileBuffer[0] === 0xff && fileBuffer[1] === 0xfe) {\n    return false;\n  }\n\n  for (let i = 0; i < totalBytes; i++) {\n    if (fileBuffer[i] === 0) {\n      // NULL byte--it's binary!\n      return true;\n    } else if ((fileBuffer[i] < 7 || fileBuffer[i] > 14) && (fileBuffer[i] < 32 || fileBuffer[i] > 127)) {\n      // UTF-8 detection\n      if (fileBuffer[i] > 193 && fileBuffer[i] < 224 && i + 1 < totalBytes) {\n        i++;\n\n        if (fileBuffer[i] > 127 && fileBuffer[i] < 192) {\n          continue;\n        }\n      } else if (fileBuffer[i] > 223 && fileBuffer[i] < 240 && i + 2 < totalBytes) {\n        i++;\n\n        if (fileBuffer[i] > 127 && fileBuffer[i] < 192 && fileBuffer[i + 1] > 127 && fileBuffer[i + 1] < 192) {\n          i++;\n          continue;\n        }\n      }\n\n      suspiciousBytes++; // Read at least 32 fileBuffer before making a decision\n\n      if (i >= 32 && suspiciousBytes * 100 / totalBytes > 10) {\n        return true;\n      }\n    }\n  }\n\n  if (suspiciousBytes * 100 / totalBytes > 10) {\n    return true;\n  }\n\n  if (suspiciousBytes > 1 && isBinaryProto(fileBuffer, totalBytes)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isString(x) {\n  return typeof x === 'string';\n}\n\nfunction isStatFile(stat) {\n  if (!stat.isFile()) {\n    throw new Error(`Path provided was not a file!`);\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","isBinaryFileSync","isBinaryFile","fs","require","util_1","statAsync","promisify","stat","openAsync","open","closeAsync","close","MAX_BYTES","Reader","constructor","fileBuffer","size","offset","error","hasError","nextByte","len","n","Array","i","readProtoVarInt","reader","idx","varInt","b","readProtoMessage","wireType","isBinaryProto","totalBytes","numMessages","file","isString","isStatFile","fileDescriptor","allocBuffer","Buffer","alloc","fulfill","read","err","bytesRead","_","isBinaryCheck","undefined","length","statSync","openSync","readSync","closeSync","suspiciousBytes","Math","min","slice","toString","x","isFile","Error"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/isbinaryfile/lib/index.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isBinaryFileSync = exports.isBinaryFile = void 0;\nconst fs = require(\"fs\");\nconst util_1 = require(\"util\");\nconst statAsync = util_1.promisify(fs.stat);\nconst openAsync = util_1.promisify(fs.open);\nconst closeAsync = util_1.promisify(fs.close);\nconst MAX_BYTES = 512;\n// A very basic non-exception raising reader. Read bytes and\n// at the end use hasError() to check whether this worked.\nclass Reader {\n    constructor(fileBuffer, size) {\n        this.fileBuffer = fileBuffer;\n        this.size = size;\n        this.offset = 0;\n        this.error = false;\n    }\n    hasError() {\n        return this.error;\n    }\n    nextByte() {\n        if (this.offset === this.size || this.hasError()) {\n            this.error = true;\n            return 0xff;\n        }\n        return this.fileBuffer[this.offset++];\n    }\n    next(len) {\n        const n = new Array();\n        for (let i = 0; i < len; i++) {\n            n[i] = this.nextByte();\n        }\n        return n;\n    }\n}\n// Read a Google Protobuf var(iable)int from the buffer.\nfunction readProtoVarInt(reader) {\n    let idx = 0;\n    let varInt = 0;\n    while (!reader.hasError()) {\n        const b = reader.nextByte();\n        varInt = varInt | ((b & 0x7f) << (7 * idx));\n        if ((b & 0x80) === 0) {\n            break;\n        }\n        idx++;\n    }\n    return varInt;\n}\n// Attempt to taste a full Google Protobuf message.\nfunction readProtoMessage(reader) {\n    const varInt = readProtoVarInt(reader);\n    const wireType = varInt & 0x7;\n    switch (wireType) {\n        case 0:\n            readProtoVarInt(reader);\n            return true;\n        case 1:\n            reader.next(8);\n            return true;\n        case 2:\n            const len = readProtoVarInt(reader);\n            reader.next(len);\n            return true;\n        case 5:\n            reader.next(4);\n            return true;\n    }\n    return false;\n}\n// Check whether this seems to be a valid protobuf file.\nfunction isBinaryProto(fileBuffer, totalBytes) {\n    const reader = new Reader(fileBuffer, totalBytes);\n    let numMessages = 0;\n    while (true) {\n        // Definitely not a valid protobuf\n        if (!readProtoMessage(reader) && !reader.hasError()) {\n            return false;\n        }\n        // Short read?\n        if (reader.hasError()) {\n            break;\n        }\n        numMessages++;\n    }\n    return numMessages > 0;\n}\nfunction isBinaryFile(file, size) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (isString(file)) {\n            const stat = yield statAsync(file);\n            isStatFile(stat);\n            const fileDescriptor = yield openAsync(file, 'r');\n            const allocBuffer = Buffer.alloc(MAX_BYTES);\n            // Read the file with no encoding for raw buffer access.\n            // NB: something is severely wrong with promisify, had to construct my own Promise\n            return new Promise((fulfill, reject) => {\n                fs.read(fileDescriptor, allocBuffer, 0, MAX_BYTES, 0, (err, bytesRead, _) => {\n                    closeAsync(fileDescriptor);\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        fulfill(isBinaryCheck(allocBuffer, bytesRead));\n                    }\n                });\n            });\n        }\n        else {\n            if (size === undefined) {\n                size = file.length;\n            }\n            return isBinaryCheck(file, size);\n        }\n    });\n}\nexports.isBinaryFile = isBinaryFile;\nfunction isBinaryFileSync(file, size) {\n    if (isString(file)) {\n        const stat = fs.statSync(file);\n        isStatFile(stat);\n        const fileDescriptor = fs.openSync(file, 'r');\n        const allocBuffer = Buffer.alloc(MAX_BYTES);\n        const bytesRead = fs.readSync(fileDescriptor, allocBuffer, 0, MAX_BYTES, 0);\n        fs.closeSync(fileDescriptor);\n        return isBinaryCheck(allocBuffer, bytesRead);\n    }\n    else {\n        if (size === undefined) {\n            size = file.length;\n        }\n        return isBinaryCheck(file, size);\n    }\n}\nexports.isBinaryFileSync = isBinaryFileSync;\nfunction isBinaryCheck(fileBuffer, bytesRead) {\n    // empty file. no clue what it is.\n    if (bytesRead === 0) {\n        return false;\n    }\n    let suspiciousBytes = 0;\n    const totalBytes = Math.min(bytesRead, MAX_BYTES);\n    // UTF-8 BOM\n    if (bytesRead >= 3 && fileBuffer[0] === 0xef && fileBuffer[1] === 0xbb && fileBuffer[2] === 0xbf) {\n        return false;\n    }\n    // UTF-32 BOM\n    if (bytesRead >= 4 &&\n        fileBuffer[0] === 0x00 &&\n        fileBuffer[1] === 0x00 &&\n        fileBuffer[2] === 0xfe &&\n        fileBuffer[3] === 0xff) {\n        return false;\n    }\n    // UTF-32 LE BOM\n    if (bytesRead >= 4 &&\n        fileBuffer[0] === 0xff &&\n        fileBuffer[1] === 0xfe &&\n        fileBuffer[2] === 0x00 &&\n        fileBuffer[3] === 0x00) {\n        return false;\n    }\n    // GB BOM\n    if (bytesRead >= 4 &&\n        fileBuffer[0] === 0x84 &&\n        fileBuffer[1] === 0x31 &&\n        fileBuffer[2] === 0x95 &&\n        fileBuffer[3] === 0x33) {\n        return false;\n    }\n    if (totalBytes >= 5 && fileBuffer.slice(0, 5).toString() === '%PDF-') {\n        /* PDF. This is binary. */\n        return true;\n    }\n    // UTF-16 BE BOM\n    if (bytesRead >= 2 && fileBuffer[0] === 0xfe && fileBuffer[1] === 0xff) {\n        return false;\n    }\n    // UTF-16 LE BOM\n    if (bytesRead >= 2 && fileBuffer[0] === 0xff && fileBuffer[1] === 0xfe) {\n        return false;\n    }\n    for (let i = 0; i < totalBytes; i++) {\n        if (fileBuffer[i] === 0) {\n            // NULL byte--it's binary!\n            return true;\n        }\n        else if ((fileBuffer[i] < 7 || fileBuffer[i] > 14) && (fileBuffer[i] < 32 || fileBuffer[i] > 127)) {\n            // UTF-8 detection\n            if (fileBuffer[i] > 193 && fileBuffer[i] < 224 && i + 1 < totalBytes) {\n                i++;\n                if (fileBuffer[i] > 127 && fileBuffer[i] < 192) {\n                    continue;\n                }\n            }\n            else if (fileBuffer[i] > 223 && fileBuffer[i] < 240 && i + 2 < totalBytes) {\n                i++;\n                if (fileBuffer[i] > 127 && fileBuffer[i] < 192 && fileBuffer[i + 1] > 127 && fileBuffer[i + 1] < 192) {\n                    i++;\n                    continue;\n                }\n            }\n            suspiciousBytes++;\n            // Read at least 32 fileBuffer before making a decision\n            if (i >= 32 && (suspiciousBytes * 100) / totalBytes > 10) {\n                return true;\n            }\n        }\n    }\n    if ((suspiciousBytes * 100) / totalBytes > 10) {\n        return true;\n    }\n    if (suspiciousBytes > 1 && isBinaryProto(fileBuffer, totalBytes)) {\n        return true;\n    }\n    return false;\n}\nfunction isString(x) {\n    return typeof x === 'string';\n}\nfunction isStatFile(stat) {\n    if (!stat.isFile()) {\n        throw new Error(`Path provided was not a file!`);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}