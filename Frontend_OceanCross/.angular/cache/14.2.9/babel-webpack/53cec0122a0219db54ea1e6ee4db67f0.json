{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Service = void 0;\n\nconst os_1 = __importDefault(require(\"os\"));\n\nconst dns_txt_1 = __importDefault(require(\"./dns-txt\"));\n\nconst events_1 = require(\"events\");\n\nconst service_types_1 = require(\"./service-types\");\n\nconst TLD = '.local';\n\nclass Service extends events_1.EventEmitter {\n  constructor(config) {\n    super();\n    this.probe = true;\n    this.published = false;\n    this.activated = false;\n    this.destroyed = false;\n    this.txtService = new dns_txt_1.default();\n    if (!config.name) throw new Error('ServiceConfig requires `name` property to be set');\n    if (!config.type) throw new Error('ServiceConfig requires `type` property to be set');\n    if (!config.port) throw new Error('ServiceConfig requires `port` property to be set');\n    this.name = config.name;\n    this.protocol = config.protocol || 'tcp';\n    this.type = (0, service_types_1.toString)({\n      name: config.type,\n      protocol: this.protocol\n    });\n    this.port = config.port;\n    this.host = config.host || os_1.default.hostname();\n    this.fqdn = `${this.name}.${this.type}${TLD}`;\n    this.txt = config.txt;\n    this.subtypes = config.subtypes;\n  }\n\n  records() {\n    var records = [this.RecordPTR(this), this.RecordSRV(this), this.RecordTXT(this)];\n    let ifaces = Object.values(os_1.default.networkInterfaces());\n\n    for (let iface of ifaces) {\n      let addrs = iface;\n\n      for (let addr of addrs) {\n        if (addr.internal || addr.mac === '00:00:00:00:00:00') continue;\n\n        switch (addr.family) {\n          case 'IPv4':\n            records.push(this.RecordA(this, addr.address));\n            break;\n\n          case 'IPv6':\n            records.push(this.RecordAAAA(this, addr.address));\n            break;\n        }\n      }\n    }\n\n    return records;\n  }\n\n  RecordPTR(service) {\n    return {\n      name: `${service.type}${TLD}`,\n      type: 'PTR',\n      ttl: 28800,\n      data: service.fqdn\n    };\n  }\n\n  RecordSRV(service) {\n    return {\n      name: service.fqdn,\n      type: 'SRV',\n      ttl: 120,\n      data: {\n        port: service.port,\n        target: service.host\n      }\n    };\n  }\n\n  RecordTXT(service) {\n    return {\n      name: service.fqdn,\n      type: 'TXT',\n      ttl: 4500,\n      data: this.txtService.encode(service.txt)\n    };\n  }\n\n  RecordA(service, ip) {\n    return {\n      name: service.host,\n      type: 'A',\n      ttl: 120,\n      data: ip\n    };\n  }\n\n  RecordAAAA(service, ip) {\n    return {\n      name: service.host,\n      type: 'AAAA',\n      ttl: 120,\n      data: ip\n    };\n  }\n\n}\n\nexports.Service = Service;\nexports.default = Service;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Service","os_1","require","dns_txt_1","events_1","service_types_1","TLD","EventEmitter","constructor","config","probe","published","activated","destroyed","txtService","default","name","Error","type","port","protocol","toString","host","hostname","fqdn","txt","subtypes","records","RecordPTR","RecordSRV","RecordTXT","ifaces","values","networkInterfaces","iface","addrs","addr","internal","mac","family","push","RecordA","address","RecordAAAA","service","ttl","data","target","encode","ip"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/bonjour-service/dist/lib/service.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Service = void 0;\nconst os_1 = __importDefault(require(\"os\"));\nconst dns_txt_1 = __importDefault(require(\"./dns-txt\"));\nconst events_1 = require(\"events\");\nconst service_types_1 = require(\"./service-types\");\nconst TLD = '.local';\nclass Service extends events_1.EventEmitter {\n    constructor(config) {\n        super();\n        this.probe = true;\n        this.published = false;\n        this.activated = false;\n        this.destroyed = false;\n        this.txtService = new dns_txt_1.default();\n        if (!config.name)\n            throw new Error('ServiceConfig requires `name` property to be set');\n        if (!config.type)\n            throw new Error('ServiceConfig requires `type` property to be set');\n        if (!config.port)\n            throw new Error('ServiceConfig requires `port` property to be set');\n        this.name = config.name;\n        this.protocol = config.protocol || 'tcp';\n        this.type = (0, service_types_1.toString)({ name: config.type, protocol: this.protocol });\n        this.port = config.port;\n        this.host = config.host || os_1.default.hostname();\n        this.fqdn = `${this.name}.${this.type}${TLD}`;\n        this.txt = config.txt;\n        this.subtypes = config.subtypes;\n    }\n    records() {\n        var records = [this.RecordPTR(this), this.RecordSRV(this), this.RecordTXT(this)];\n        let ifaces = Object.values(os_1.default.networkInterfaces());\n        for (let iface of ifaces) {\n            let addrs = iface;\n            for (let addr of addrs) {\n                if (addr.internal || addr.mac === '00:00:00:00:00:00')\n                    continue;\n                switch (addr.family) {\n                    case 'IPv4':\n                        records.push(this.RecordA(this, addr.address));\n                        break;\n                    case 'IPv6':\n                        records.push(this.RecordAAAA(this, addr.address));\n                        break;\n                }\n            }\n        }\n        return records;\n    }\n    RecordPTR(service) {\n        return {\n            name: `${service.type}${TLD}`,\n            type: 'PTR',\n            ttl: 28800,\n            data: service.fqdn\n        };\n    }\n    RecordSRV(service) {\n        return {\n            name: service.fqdn,\n            type: 'SRV',\n            ttl: 120,\n            data: {\n                port: service.port,\n                target: service.host\n            }\n        };\n    }\n    RecordTXT(service) {\n        return {\n            name: service.fqdn,\n            type: 'TXT',\n            ttl: 4500,\n            data: this.txtService.encode(service.txt)\n        };\n    }\n    RecordA(service, ip) {\n        return {\n            name: service.host,\n            type: 'A',\n            ttl: 120,\n            data: ip\n        };\n    }\n    RecordAAAA(service, ip) {\n        return {\n            name: service.host,\n            type: 'AAAA',\n            ttl: 120,\n            data: ip\n        };\n    }\n}\nexports.Service = Service;\nexports.default = Service;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}