{"ast":null,"code":"const debug = require('debug')('log4js:clustering');\n\nconst LoggingEvent = require('./LoggingEvent');\n\nconst configuration = require('./configuration');\n\nlet disabled = false;\nlet cluster = null;\n\ntry {\n  // eslint-disable-next-line global-require\n  cluster = require('cluster');\n} catch (e) {\n  debug('cluster module not present');\n  disabled = true;\n}\n\nconst listeners = [];\nlet pm2 = false;\nlet pm2InstanceVar = 'NODE_APP_INSTANCE';\n\nconst isPM2Master = () => pm2 && process.env[pm2InstanceVar] === '0';\n\nconst isMaster = () => disabled || cluster && cluster.isMaster || isPM2Master();\n\nconst sendToListeners = logEvent => {\n  listeners.forEach(l => l(logEvent));\n}; // in a multi-process node environment, worker loggers will use\n// process.send\n\n\nconst receiver = (worker, message) => {\n  // prior to node v6, the worker parameter was not passed (args were message, handle)\n  debug('cluster message received from worker ', worker, ': ', message);\n\n  if (worker.topic && worker.data) {\n    message = worker;\n    worker = undefined;\n  }\n\n  if (message && message.topic && message.topic === 'log4js:message') {\n    debug('received message: ', message.data);\n    const logEvent = LoggingEvent.deserialise(message.data);\n    sendToListeners(logEvent);\n  }\n};\n\nif (!disabled) {\n  configuration.addListener(config => {\n    // clear out the listeners, because configure has been called.\n    listeners.length = 0;\n    ({\n      pm2,\n      disableClustering: disabled,\n      pm2InstanceVar = 'NODE_APP_INSTANCE'\n    } = config);\n    debug(`clustering disabled ? ${disabled}`);\n    debug(`cluster.isMaster ? ${cluster && cluster.isMaster}`);\n    debug(`pm2 enabled ? ${pm2}`);\n    debug(`pm2InstanceVar = ${pm2InstanceVar}`);\n    debug(`process.env[${pm2InstanceVar}] = ${process.env[pm2InstanceVar]}`); // just in case configure is called after shutdown\n\n    if (pm2) {\n      process.removeListener('message', receiver);\n    }\n\n    if (cluster && cluster.removeListener) {\n      cluster.removeListener('message', receiver);\n    }\n\n    if (disabled || config.disableClustering) {\n      debug('Not listening for cluster messages, because clustering disabled.');\n    } else if (isPM2Master()) {\n      // PM2 cluster support\n      // PM2 runs everything as workers - install pm2-intercom for this to work.\n      // we only want one of the app instances to write logs\n      debug('listening for PM2 broadcast messages');\n      process.on('message', receiver);\n    } else if (cluster && cluster.isMaster) {\n      debug('listening for cluster messages');\n      cluster.on('message', receiver);\n    } else {\n      debug('not listening for messages, because we are not a master process');\n    }\n  });\n}\n\nmodule.exports = {\n  onlyOnMaster: (fn, notMaster) => isMaster() ? fn() : notMaster,\n  isMaster,\n  send: msg => {\n    if (isMaster()) {\n      sendToListeners(msg);\n    } else {\n      if (!pm2) {\n        msg.cluster = {\n          workerId: cluster.worker.id,\n          worker: process.pid\n        };\n      }\n\n      process.send({\n        topic: 'log4js:message',\n        data: msg.serialise()\n      });\n    }\n  },\n  onMessage: listener => {\n    listeners.push(listener);\n  }\n};","map":{"version":3,"names":["debug","require","LoggingEvent","configuration","disabled","cluster","e","listeners","pm2","pm2InstanceVar","isPM2Master","process","env","isMaster","sendToListeners","logEvent","forEach","l","receiver","worker","message","topic","data","undefined","deserialise","addListener","config","length","disableClustering","removeListener","on","module","exports","onlyOnMaster","fn","notMaster","send","msg","workerId","id","pid","serialise","onMessage","listener","push"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/log4js/lib/clustering.js"],"sourcesContent":["const debug = require('debug')('log4js:clustering');\nconst LoggingEvent = require('./LoggingEvent');\nconst configuration = require('./configuration');\n\nlet disabled = false;\nlet cluster = null;\ntry {\n  // eslint-disable-next-line global-require\n  cluster = require('cluster');\n} catch (e) {\n  debug('cluster module not present');\n  disabled = true;\n}\n\nconst listeners = [];\n\nlet pm2 = false;\nlet pm2InstanceVar = 'NODE_APP_INSTANCE';\n\nconst isPM2Master = () => pm2 && process.env[pm2InstanceVar] === '0';\nconst isMaster = () =>\n  disabled || (cluster && cluster.isMaster) || isPM2Master();\n\nconst sendToListeners = (logEvent) => {\n  listeners.forEach((l) => l(logEvent));\n};\n\n// in a multi-process node environment, worker loggers will use\n// process.send\nconst receiver = (worker, message) => {\n  // prior to node v6, the worker parameter was not passed (args were message, handle)\n  debug('cluster message received from worker ', worker, ': ', message);\n  if (worker.topic && worker.data) {\n    message = worker;\n    worker = undefined;\n  }\n  if (message && message.topic && message.topic === 'log4js:message') {\n    debug('received message: ', message.data);\n    const logEvent = LoggingEvent.deserialise(message.data);\n    sendToListeners(logEvent);\n  }\n};\n\nif (!disabled) {\n  configuration.addListener((config) => {\n    // clear out the listeners, because configure has been called.\n    listeners.length = 0;\n\n    ({\n      pm2,\n      disableClustering: disabled,\n      pm2InstanceVar = 'NODE_APP_INSTANCE',\n    } = config);\n\n    debug(`clustering disabled ? ${disabled}`);\n    debug(`cluster.isMaster ? ${cluster && cluster.isMaster}`);\n    debug(`pm2 enabled ? ${pm2}`);\n    debug(`pm2InstanceVar = ${pm2InstanceVar}`);\n    debug(`process.env[${pm2InstanceVar}] = ${process.env[pm2InstanceVar]}`);\n\n    // just in case configure is called after shutdown\n    if (pm2) {\n      process.removeListener('message', receiver);\n    }\n    if (cluster && cluster.removeListener) {\n      cluster.removeListener('message', receiver);\n    }\n\n    if (disabled || config.disableClustering) {\n      debug('Not listening for cluster messages, because clustering disabled.');\n    } else if (isPM2Master()) {\n      // PM2 cluster support\n      // PM2 runs everything as workers - install pm2-intercom for this to work.\n      // we only want one of the app instances to write logs\n      debug('listening for PM2 broadcast messages');\n      process.on('message', receiver);\n    } else if (cluster && cluster.isMaster) {\n      debug('listening for cluster messages');\n      cluster.on('message', receiver);\n    } else {\n      debug('not listening for messages, because we are not a master process');\n    }\n  });\n}\n\nmodule.exports = {\n  onlyOnMaster: (fn, notMaster) => (isMaster() ? fn() : notMaster),\n  isMaster,\n  send: (msg) => {\n    if (isMaster()) {\n      sendToListeners(msg);\n    } else {\n      if (!pm2) {\n        msg.cluster = {\n          workerId: cluster.worker.id,\n          worker: process.pid,\n        };\n      }\n      process.send({ topic: 'log4js:message', data: msg.serialise() });\n    }\n  },\n  onMessage: (listener) => {\n    listeners.push(listener);\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}