{"ast":null,"code":"\"use strict\";\n/** @typedef {import(\"webpack\").Compilation[\"inputFileSystem\"] } InputFileSystem */\n\n/** @typedef {import(\"fs\").Stats } Stats */\n\n/**\n * @param {InputFileSystem} inputFileSystem\n * @param {string} path\n * @return {Promise<undefined | Stats>}\n */\n\nfunction stat(inputFileSystem, path) {\n  return new Promise((resolve, reject) => {\n    inputFileSystem.stat(path,\n    /**\n     * @param {null | undefined | NodeJS.ErrnoException} err\n     * @param {undefined | Stats} stats\n     */\n    // @ts-ignore\n    (err, stats) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(stats);\n    });\n  });\n}\n/**\n * @param {InputFileSystem} inputFileSystem\n * @param {string} path\n * @return {Promise<string | Buffer>}\n */\n\n\nfunction readFile(inputFileSystem, path) {\n  return new Promise((resolve, reject) => {\n    inputFileSystem.readFile(path,\n    /**\n     * @param {null | undefined | NodeJS.ErrnoException} err\n     * @param {undefined | string | Buffer} data\n     */\n    (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(\n      /** @type {string | Buffer} */\n      data);\n    });\n  });\n}\n\nconst notSettled = Symbol(`not-settled`);\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\n\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n\n      if (done) {\n        const isLast = !result.includes(notSettled);\n\n        if (isLast) {\n          resolve(\n          /** @type{T[]} **/\n          result);\n        }\n\n        return;\n      }\n\n      const [index, task] = value;\n      /**\n       * @param {T} x\n       */\n\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n\n      task().then(onFulfilled, reject);\n    };\n\n    Array(limit).fill(0).forEach(next);\n  });\n}\n\nmodule.exports = {\n  stat,\n  readFile,\n  throttleAll\n};","map":{"version":3,"names":["stat","inputFileSystem","path","Promise","resolve","reject","err","stats","readFile","data","notSettled","Symbol","throttleAll","limit","tasks","Number","isInteger","TypeError","Array","isArray","every","task","result","length","fill","entries","next","done","value","isLast","includes","index","onFulfilled","x","then","forEach","module","exports"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/copy-webpack-plugin/dist/utils.js"],"sourcesContent":["\"use strict\";\n\n/** @typedef {import(\"webpack\").Compilation[\"inputFileSystem\"] } InputFileSystem */\n\n/** @typedef {import(\"fs\").Stats } Stats */\n\n/**\n * @param {InputFileSystem} inputFileSystem\n * @param {string} path\n * @return {Promise<undefined | Stats>}\n */\nfunction stat(inputFileSystem, path) {\n  return new Promise((resolve, reject) => {\n    inputFileSystem.stat(path,\n    /**\n     * @param {null | undefined | NodeJS.ErrnoException} err\n     * @param {undefined | Stats} stats\n     */\n    // @ts-ignore\n    (err, stats) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(stats);\n    });\n  });\n}\n/**\n * @param {InputFileSystem} inputFileSystem\n * @param {string} path\n * @return {Promise<string | Buffer>}\n */\n\n\nfunction readFile(inputFileSystem, path) {\n  return new Promise((resolve, reject) => {\n    inputFileSystem.readFile(path,\n    /**\n     * @param {null | undefined | NodeJS.ErrnoException} err\n     * @param {undefined | string | Buffer} data\n     */\n    (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(\n      /** @type {string | Buffer} */\n      data);\n    });\n  });\n}\n\nconst notSettled = Symbol(`not-settled`);\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\n\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n\n      if (done) {\n        const isLast = !result.includes(notSettled);\n\n        if (isLast) {\n          resolve(\n          /** @type{T[]} **/\n          result);\n        }\n\n        return;\n      }\n\n      const [index, task] = value;\n      /**\n       * @param {T} x\n       */\n\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n\n      task().then(onFulfilled, reject);\n    };\n\n    Array(limit).fill(0).forEach(next);\n  });\n}\n\nmodule.exports = {\n  stat,\n  readFile,\n  throttleAll\n};"],"mappings":"AAAA;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,IAAT,CAAcC,eAAd,EAA+BC,IAA/B,EAAqC;EACnC,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtCJ,eAAe,CAACD,IAAhB,CAAqBE,IAArB;IACA;AACJ;AACA;AACA;IACI;IACA,CAACI,GAAD,EAAMC,KAAN,KAAgB;MACd,IAAID,GAAJ,EAAS;QACPD,MAAM,CAACC,GAAD,CAAN;QACA;MACD;;MAEDF,OAAO,CAACG,KAAD,CAAP;IACD,CAbD;EAcD,CAfM,CAAP;AAgBD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASC,QAAT,CAAkBP,eAAlB,EAAmCC,IAAnC,EAAyC;EACvC,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtCJ,eAAe,CAACO,QAAhB,CAAyBN,IAAzB;IACA;AACJ;AACA;AACA;IACI,CAACI,GAAD,EAAMG,IAAN,KAAe;MACb,IAAIH,GAAJ,EAAS;QACPD,MAAM,CAACC,GAAD,CAAN;QACA;MACD;;MAEDF,OAAO;MACP;MACAK,IAFO,CAAP;IAGD,CAdD;EAeD,CAhBM,CAAP;AAiBD;;AAED,MAAMC,UAAU,GAAGC,MAAM,CAAE,aAAF,CAAzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;EACjC,IAAI,CAACC,MAAM,CAACC,SAAP,CAAiBH,KAAjB,CAAD,IAA4BA,KAAK,GAAG,CAAxC,EAA2C;IACzC,MAAM,IAAII,SAAJ,CAAe,uDAAsDJ,KAAM,OAAM,OAAOA,KAAM,GAA9F,CAAN;EACD;;EAED,IAAI,CAACK,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAD,IAAyB,CAACA,KAAK,CAACM,KAAN,CAAYC,IAAI,IAAI,OAAOA,IAAP,KAAiB,UAArC,CAA9B,EAA+E;IAC7E,MAAM,IAAIJ,SAAJ,CAAe,kEAAf,CAAN;EACD;;EAED,OAAO,IAAId,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtC,MAAMiB,MAAM,GAAGJ,KAAK,CAACJ,KAAK,CAACS,MAAP,CAAL,CAAoBC,IAApB,CAAyBd,UAAzB,CAAf;IACA,MAAMe,OAAO,GAAGX,KAAK,CAACW,OAAN,EAAhB;;IAEA,MAAMC,IAAI,GAAG,MAAM;MACjB,MAAM;QACJC,IADI;QAEJC;MAFI,IAGFH,OAAO,CAACC,IAAR,EAHJ;;MAKA,IAAIC,IAAJ,EAAU;QACR,MAAME,MAAM,GAAG,CAACP,MAAM,CAACQ,QAAP,CAAgBpB,UAAhB,CAAhB;;QAEA,IAAImB,MAAJ,EAAY;UACVzB,OAAO;UACP;UACAkB,MAFO,CAAP;QAGD;;QAED;MACD;;MAED,MAAM,CAACS,KAAD,EAAQV,IAAR,IAAgBO,KAAtB;MACA;AACN;AACA;;MAEM,MAAMI,WAAW,GAAGC,CAAC,IAAI;QACvBX,MAAM,CAACS,KAAD,CAAN,GAAgBE,CAAhB;QACAP,IAAI;MACL,CAHD;;MAKAL,IAAI,GAAGa,IAAP,CAAYF,WAAZ,EAAyB3B,MAAzB;IACD,CA7BD;;IA+BAa,KAAK,CAACL,KAAD,CAAL,CAAaW,IAAb,CAAkB,CAAlB,EAAqBW,OAArB,CAA6BT,IAA7B;EACD,CApCM,CAAP;AAqCD;;AAEDU,MAAM,CAACC,OAAP,GAAiB;EACfrC,IADe;EAEfQ,QAFe;EAGfI;AAHe,CAAjB"},"metadata":{},"sourceType":"script"}