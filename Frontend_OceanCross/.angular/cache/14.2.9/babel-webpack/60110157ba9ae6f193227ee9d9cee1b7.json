{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requiresLinking = void 0;\n\nconst babel_loader_1 = require(\"babel-loader\");\n\nconst typescript_1 = require(\"typescript\");\n\nconst load_esm_1 = require(\"../utils/load-esm\");\n\nconst package_version_1 = require(\"../utils/package-version\");\n/**\n * Cached instance of the compiler-cli linker's needsLinking function.\n */\n\n\nlet needsLinking;\n/**\n * Cached instance of the compiler-cli linker's Babel plugin factory function.\n */\n\nlet linkerPluginCreator;\n/**\n * Cached instance of the localize Babel plugins factory functions.\n */\n\nlet i18nPluginCreators;\n\nfunction requiresLinking(_x, _x2) {\n  return _requiresLinking.apply(this, arguments);\n}\n\nfunction _requiresLinking() {\n  _requiresLinking = _asyncToGenerator(function* (path, source) {\n    // @angular/core and @angular/compiler will cause false positives\n    // Also, TypeScript files do not require linking\n    if (/[\\\\/]@angular[\\\\/](?:compiler|core)|\\.tsx?$/.test(path)) {\n      return false;\n    }\n\n    if (!needsLinking) {\n      // Load ESM `@angular/compiler-cli/linker` using the TypeScript dynamic import workaround.\n      // Once TypeScript provides support for keeping the dynamic import this workaround can be\n      // changed to a direct dynamic import.\n      const linkerModule = yield (0, load_esm_1.loadEsmModule)('@angular/compiler-cli/linker');\n      needsLinking = linkerModule.needsLinking;\n    }\n\n    return needsLinking(path, source);\n  });\n  return _requiresLinking.apply(this, arguments);\n}\n\nexports.requiresLinking = requiresLinking; // eslint-disable-next-line max-lines-per-function\n\nexports.default = (0, babel_loader_1.custom)(() => {\n  const baseOptions = Object.freeze({\n    babelrc: false,\n    configFile: false,\n    compact: false,\n    cacheCompression: false,\n    sourceType: 'unambiguous',\n    inputSourceMap: false\n  });\n  return {\n    customOptions(options, {\n      source,\n      map\n    }) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        var _a, _b, _c;\n\n        const {\n          i18n,\n          scriptTarget,\n          aot,\n          optimize,\n          instrumentCode,\n          supportedBrowsers,\n          ...rawOptions\n        } = options; // Must process file if plugins are added\n\n        let shouldProcess = Array.isArray(rawOptions.plugins) && rawOptions.plugins.length > 0;\n        const customOptions = {\n          forceAsyncTransformation: false,\n          forcePresetEnv: false,\n          angularLinker: undefined,\n          i18n: undefined,\n          instrumentCode: undefined,\n          supportedBrowsers\n        }; // Analyze file for linking\n\n        if (yield requiresLinking(_this.resourcePath, source)) {\n          // Load ESM `@angular/compiler-cli/linker/babel` using the TypeScript dynamic import workaround.\n          // Once TypeScript provides support for keeping the dynamic import this workaround can be\n          // changed to a direct dynamic import.\n          linkerPluginCreator !== null && linkerPluginCreator !== void 0 ? linkerPluginCreator : linkerPluginCreator = (yield (0, load_esm_1.loadEsmModule)('@angular/compiler-cli/linker/babel')).createEs2015LinkerPlugin;\n          customOptions.angularLinker = {\n            shouldLink: true,\n            jitMode: aot !== true,\n            linkerPluginCreator\n          };\n          shouldProcess = true;\n        } // Analyze for ES target processing\n\n\n        const esTarget = scriptTarget;\n        const isJsFile = /\\.[cm]?js$/.test(_this.resourcePath); // The below should be dropped when we no longer support ES5 TypeScript output.\n\n        if (esTarget === typescript_1.ScriptTarget.ES5) {\n          // This is needed because when target is ES5 we change the TypeScript target to ES2015\n          // because it simplifies build-optimization passes.\n          // @see https://github.com/angular/angular-cli/blob/22af6520834171d01413d4c7e4a9f13fb752252e/packages/angular_devkit/build_angular/src/webpack/plugins/typescript.ts#L51-L56\n          customOptions.forcePresetEnv = true; // Comparable behavior to tsconfig target of ES5\n\n          customOptions.supportedBrowsers = ['IE 9'];\n        } else if (isJsFile && ((_a = customOptions.supportedBrowsers) === null || _a === void 0 ? void 0 : _a.length)) {\n          // Applications code ES version can be controlled using TypeScript's `target` option.\n          // However, this doesn't effect libraries and hence we use preset-env to downlevel ES fetaures\n          // based on the supported browsers in browserlist.\n          customOptions.forcePresetEnv = true;\n        }\n\n        if (esTarget !== undefined && esTarget >= typescript_1.ScriptTarget.ES2017 || isJsFile) {\n          // Application code (TS files) will only contain native async if target is ES2017+.\n          // However, third-party libraries can regardless of the target option.\n          // APF packages with code in [f]esm2015 directories is downlevelled to ES2015 and\n          // will not have native async.\n          customOptions.forceAsyncTransformation = !/[\\\\/][_f]?esm2015[\\\\/]/.test(_this.resourcePath) && source.includes('async');\n        }\n\n        shouldProcess || (shouldProcess = customOptions.forceAsyncTransformation || customOptions.forcePresetEnv || false); // Analyze for i18n inlining\n\n        if (i18n && !/[\\\\/]@angular[\\\\/](?:compiler|localize)/.test(_this.resourcePath) && source.includes('$localize')) {\n          // Load the i18n plugin creators from the new `@angular/localize/tools` entry point.\n          // This may fail during the transition to ESM due to the entry point not yet existing.\n          // During the transition, this will always attempt to load the entry point for each file.\n          // This will only occur during prerelease and will be automatically corrected once the new\n          // entry point exists.\n          if (i18nPluginCreators === undefined) {\n            // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n            // Once TypeScript provides support for keeping the dynamic import this workaround can be\n            // changed to a direct dynamic import.\n            i18nPluginCreators = yield (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n          }\n\n          customOptions.i18n = { ...i18n,\n            pluginCreators: i18nPluginCreators\n          }; // Add translation files as dependencies of the file to support rebuilds\n          // Except for `@angular/core` which needs locale injection but has no translations\n\n          if (customOptions.i18n.translationFiles && !/[\\\\/]@angular[\\\\/]core/.test(_this.resourcePath)) {\n            for (const file of customOptions.i18n.translationFiles) {\n              _this.addDependency(file);\n            }\n          }\n\n          shouldProcess = true;\n        }\n\n        if (optimize) {\n          const angularPackage = /[\\\\/]node_modules[\\\\/]@angular[\\\\/]/.test(_this.resourcePath);\n          customOptions.optimize = {\n            // Angular packages provide additional tested side effects guarantees and can use\n            // otherwise unsafe optimizations.\n            looseEnums: angularPackage,\n            pureTopLevel: angularPackage,\n            // JavaScript modules that are marked as side effect free are considered to have\n            // no decorators that contain non-local effects.\n            wrapDecorators: !!((_c = (_b = _this._module) === null || _b === void 0 ? void 0 : _b.factoryMeta) === null || _c === void 0 ? void 0 : _c.sideEffectFree)\n          };\n          shouldProcess = true;\n        }\n\n        if (instrumentCode && !instrumentCode.excludedPaths.has(_this.resourcePath) && !/\\.(e2e|spec)\\.tsx?$|[\\\\/]node_modules[\\\\/]/.test(_this.resourcePath) && _this.resourcePath.startsWith(instrumentCode.includedBasePath)) {\n          // `babel-plugin-istanbul` has it's own includes but we do the below so that we avoid running the the loader.\n          customOptions.instrumentCode = {\n            includedBasePath: instrumentCode.includedBasePath,\n            inputSourceMap: map\n          };\n          shouldProcess = true;\n        } // Add provided loader options to default base options\n\n\n        const loaderOptions = { ...baseOptions,\n          ...rawOptions,\n          cacheIdentifier: JSON.stringify({\n            buildAngular: package_version_1.VERSION,\n            customOptions,\n            baseOptions,\n            rawOptions\n          })\n        }; // Skip babel processing if no actions are needed\n\n        if (!shouldProcess) {\n          // Force the current file to be ignored\n          loaderOptions.ignore = [() => true];\n        }\n\n        return {\n          custom: customOptions,\n          loader: loaderOptions\n        };\n      })();\n    },\n\n    config(configuration, {\n      customOptions\n    }) {\n      var _a;\n\n      return { ...configuration.options,\n        // Using `false` disables babel from attempting to locate sourcemaps or process any inline maps.\n        // The babel types do not include the false option even though it is valid\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        inputSourceMap: (_a = configuration.options.inputSourceMap) !== null && _a !== void 0 ? _a : false,\n        presets: [...(configuration.options.presets || []), [require('./presets/application').default, { ...customOptions,\n          diagnosticReporter: (type, message) => {\n            switch (type) {\n              case 'error':\n                this.emitError(message);\n                break;\n\n              case 'info': // Webpack does not currently have an informational diagnostic\n\n              case 'warning':\n                this.emitWarning(message);\n                break;\n            }\n          }\n        }]]\n      };\n    }\n\n  };\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","requiresLinking","babel_loader_1","require","typescript_1","load_esm_1","package_version_1","needsLinking","linkerPluginCreator","i18nPluginCreators","path","source","test","linkerModule","loadEsmModule","default","custom","baseOptions","freeze","babelrc","configFile","compact","cacheCompression","sourceType","inputSourceMap","customOptions","options","map","_a","_b","_c","i18n","scriptTarget","aot","optimize","instrumentCode","supportedBrowsers","rawOptions","shouldProcess","Array","isArray","plugins","length","forceAsyncTransformation","forcePresetEnv","angularLinker","undefined","resourcePath","createEs2015LinkerPlugin","shouldLink","jitMode","esTarget","isJsFile","ScriptTarget","ES5","ES2017","includes","pluginCreators","translationFiles","file","addDependency","angularPackage","looseEnums","pureTopLevel","wrapDecorators","_module","factoryMeta","sideEffectFree","excludedPaths","has","startsWith","includedBasePath","loaderOptions","cacheIdentifier","JSON","stringify","buildAngular","VERSION","ignore","loader","config","configuration","presets","diagnosticReporter","type","message","emitError","emitWarning"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@angular-devkit/build-angular/src/babel/webpack-loader.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.requiresLinking = void 0;\nconst babel_loader_1 = require(\"babel-loader\");\nconst typescript_1 = require(\"typescript\");\nconst load_esm_1 = require(\"../utils/load-esm\");\nconst package_version_1 = require(\"../utils/package-version\");\n/**\n * Cached instance of the compiler-cli linker's needsLinking function.\n */\nlet needsLinking;\n/**\n * Cached instance of the compiler-cli linker's Babel plugin factory function.\n */\nlet linkerPluginCreator;\n/**\n * Cached instance of the localize Babel plugins factory functions.\n */\nlet i18nPluginCreators;\nasync function requiresLinking(path, source) {\n    // @angular/core and @angular/compiler will cause false positives\n    // Also, TypeScript files do not require linking\n    if (/[\\\\/]@angular[\\\\/](?:compiler|core)|\\.tsx?$/.test(path)) {\n        return false;\n    }\n    if (!needsLinking) {\n        // Load ESM `@angular/compiler-cli/linker` using the TypeScript dynamic import workaround.\n        // Once TypeScript provides support for keeping the dynamic import this workaround can be\n        // changed to a direct dynamic import.\n        const linkerModule = await (0, load_esm_1.loadEsmModule)('@angular/compiler-cli/linker');\n        needsLinking = linkerModule.needsLinking;\n    }\n    return needsLinking(path, source);\n}\nexports.requiresLinking = requiresLinking;\n// eslint-disable-next-line max-lines-per-function\nexports.default = (0, babel_loader_1.custom)(() => {\n    const baseOptions = Object.freeze({\n        babelrc: false,\n        configFile: false,\n        compact: false,\n        cacheCompression: false,\n        sourceType: 'unambiguous',\n        inputSourceMap: false,\n    });\n    return {\n        async customOptions(options, { source, map }) {\n            var _a, _b, _c;\n            const { i18n, scriptTarget, aot, optimize, instrumentCode, supportedBrowsers, ...rawOptions } = options;\n            // Must process file if plugins are added\n            let shouldProcess = Array.isArray(rawOptions.plugins) && rawOptions.plugins.length > 0;\n            const customOptions = {\n                forceAsyncTransformation: false,\n                forcePresetEnv: false,\n                angularLinker: undefined,\n                i18n: undefined,\n                instrumentCode: undefined,\n                supportedBrowsers,\n            };\n            // Analyze file for linking\n            if (await requiresLinking(this.resourcePath, source)) {\n                // Load ESM `@angular/compiler-cli/linker/babel` using the TypeScript dynamic import workaround.\n                // Once TypeScript provides support for keeping the dynamic import this workaround can be\n                // changed to a direct dynamic import.\n                linkerPluginCreator !== null && linkerPluginCreator !== void 0 ? linkerPluginCreator : (linkerPluginCreator = (await (0, load_esm_1.loadEsmModule)('@angular/compiler-cli/linker/babel')).createEs2015LinkerPlugin);\n                customOptions.angularLinker = {\n                    shouldLink: true,\n                    jitMode: aot !== true,\n                    linkerPluginCreator,\n                };\n                shouldProcess = true;\n            }\n            // Analyze for ES target processing\n            const esTarget = scriptTarget;\n            const isJsFile = /\\.[cm]?js$/.test(this.resourcePath);\n            // The below should be dropped when we no longer support ES5 TypeScript output.\n            if (esTarget === typescript_1.ScriptTarget.ES5) {\n                // This is needed because when target is ES5 we change the TypeScript target to ES2015\n                // because it simplifies build-optimization passes.\n                // @see https://github.com/angular/angular-cli/blob/22af6520834171d01413d4c7e4a9f13fb752252e/packages/angular_devkit/build_angular/src/webpack/plugins/typescript.ts#L51-L56\n                customOptions.forcePresetEnv = true;\n                // Comparable behavior to tsconfig target of ES5\n                customOptions.supportedBrowsers = ['IE 9'];\n            }\n            else if (isJsFile && ((_a = customOptions.supportedBrowsers) === null || _a === void 0 ? void 0 : _a.length)) {\n                // Applications code ES version can be controlled using TypeScript's `target` option.\n                // However, this doesn't effect libraries and hence we use preset-env to downlevel ES fetaures\n                // based on the supported browsers in browserlist.\n                customOptions.forcePresetEnv = true;\n            }\n            if ((esTarget !== undefined && esTarget >= typescript_1.ScriptTarget.ES2017) || isJsFile) {\n                // Application code (TS files) will only contain native async if target is ES2017+.\n                // However, third-party libraries can regardless of the target option.\n                // APF packages with code in [f]esm2015 directories is downlevelled to ES2015 and\n                // will not have native async.\n                customOptions.forceAsyncTransformation =\n                    !/[\\\\/][_f]?esm2015[\\\\/]/.test(this.resourcePath) && source.includes('async');\n            }\n            shouldProcess || (shouldProcess = customOptions.forceAsyncTransformation || customOptions.forcePresetEnv || false);\n            // Analyze for i18n inlining\n            if (i18n &&\n                !/[\\\\/]@angular[\\\\/](?:compiler|localize)/.test(this.resourcePath) &&\n                source.includes('$localize')) {\n                // Load the i18n plugin creators from the new `@angular/localize/tools` entry point.\n                // This may fail during the transition to ESM due to the entry point not yet existing.\n                // During the transition, this will always attempt to load the entry point for each file.\n                // This will only occur during prerelease and will be automatically corrected once the new\n                // entry point exists.\n                if (i18nPluginCreators === undefined) {\n                    // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n                    // Once TypeScript provides support for keeping the dynamic import this workaround can be\n                    // changed to a direct dynamic import.\n                    i18nPluginCreators = await (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n                }\n                customOptions.i18n = {\n                    ...i18n,\n                    pluginCreators: i18nPluginCreators,\n                };\n                // Add translation files as dependencies of the file to support rebuilds\n                // Except for `@angular/core` which needs locale injection but has no translations\n                if (customOptions.i18n.translationFiles &&\n                    !/[\\\\/]@angular[\\\\/]core/.test(this.resourcePath)) {\n                    for (const file of customOptions.i18n.translationFiles) {\n                        this.addDependency(file);\n                    }\n                }\n                shouldProcess = true;\n            }\n            if (optimize) {\n                const angularPackage = /[\\\\/]node_modules[\\\\/]@angular[\\\\/]/.test(this.resourcePath);\n                customOptions.optimize = {\n                    // Angular packages provide additional tested side effects guarantees and can use\n                    // otherwise unsafe optimizations.\n                    looseEnums: angularPackage,\n                    pureTopLevel: angularPackage,\n                    // JavaScript modules that are marked as side effect free are considered to have\n                    // no decorators that contain non-local effects.\n                    wrapDecorators: !!((_c = (_b = this._module) === null || _b === void 0 ? void 0 : _b.factoryMeta) === null || _c === void 0 ? void 0 : _c.sideEffectFree),\n                };\n                shouldProcess = true;\n            }\n            if (instrumentCode &&\n                !instrumentCode.excludedPaths.has(this.resourcePath) &&\n                !/\\.(e2e|spec)\\.tsx?$|[\\\\/]node_modules[\\\\/]/.test(this.resourcePath) &&\n                this.resourcePath.startsWith(instrumentCode.includedBasePath)) {\n                // `babel-plugin-istanbul` has it's own includes but we do the below so that we avoid running the the loader.\n                customOptions.instrumentCode = {\n                    includedBasePath: instrumentCode.includedBasePath,\n                    inputSourceMap: map,\n                };\n                shouldProcess = true;\n            }\n            // Add provided loader options to default base options\n            const loaderOptions = {\n                ...baseOptions,\n                ...rawOptions,\n                cacheIdentifier: JSON.stringify({\n                    buildAngular: package_version_1.VERSION,\n                    customOptions,\n                    baseOptions,\n                    rawOptions,\n                }),\n            };\n            // Skip babel processing if no actions are needed\n            if (!shouldProcess) {\n                // Force the current file to be ignored\n                loaderOptions.ignore = [() => true];\n            }\n            return { custom: customOptions, loader: loaderOptions };\n        },\n        config(configuration, { customOptions }) {\n            var _a;\n            return {\n                ...configuration.options,\n                // Using `false` disables babel from attempting to locate sourcemaps or process any inline maps.\n                // The babel types do not include the false option even though it is valid\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                inputSourceMap: (_a = configuration.options.inputSourceMap) !== null && _a !== void 0 ? _a : false,\n                presets: [\n                    ...(configuration.options.presets || []),\n                    [\n                        require('./presets/application').default,\n                        {\n                            ...customOptions,\n                            diagnosticReporter: (type, message) => {\n                                switch (type) {\n                                    case 'error':\n                                        this.emitError(message);\n                                        break;\n                                    case 'info':\n                                    // Webpack does not currently have an informational diagnostic\n                                    case 'warning':\n                                        this.emitWarning(message);\n                                        break;\n                                }\n                            },\n                        },\n                    ],\n                ],\n            };\n        },\n    };\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}