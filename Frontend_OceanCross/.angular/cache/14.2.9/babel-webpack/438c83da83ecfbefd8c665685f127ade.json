{"ast":null,"code":"'use strict';\n\nvar childProcess = require('child_process');\n\nvar spawn = childProcess.spawn;\nvar exec = childProcess.exec;\n\nmodule.exports = function (pid, signal, callback) {\n  if (typeof signal === 'function' && callback === undefined) {\n    callback = signal;\n    signal = undefined;\n  }\n\n  pid = parseInt(pid);\n\n  if (Number.isNaN(pid)) {\n    if (callback) {\n      return callback(new Error(\"pid must be a number\"));\n    } else {\n      throw new Error(\"pid must be a number\");\n    }\n  }\n\n  var tree = {};\n  var pidsToProcess = {};\n  tree[pid] = [];\n  pidsToProcess[pid] = 1;\n\n  switch (process.platform) {\n    case 'win32':\n      exec('taskkill /pid ' + pid + ' /T /F', callback);\n      break;\n\n    case 'darwin':\n      buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n        return spawn('pgrep', ['-P', parentPid]);\n      }, function () {\n        killAll(tree, signal, callback);\n      });\n      break;\n    // case 'sunos':\n    //     buildProcessTreeSunOS(pid, tree, pidsToProcess, function () {\n    //         killAll(tree, signal, callback);\n    //     });\n    //     break;\n\n    default:\n      // Linux\n      buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n        return spawn('ps', ['-o', 'pid', '--no-headers', '--ppid', parentPid]);\n      }, function () {\n        killAll(tree, signal, callback);\n      });\n      break;\n  }\n};\n\nfunction killAll(tree, signal, callback) {\n  var killed = {};\n\n  try {\n    Object.keys(tree).forEach(function (pid) {\n      tree[pid].forEach(function (pidpid) {\n        if (!killed[pidpid]) {\n          killPid(pidpid, signal);\n          killed[pidpid] = 1;\n        }\n      });\n\n      if (!killed[pid]) {\n        killPid(pid, signal);\n        killed[pid] = 1;\n      }\n    });\n  } catch (err) {\n    if (callback) {\n      return callback(err);\n    } else {\n      throw err;\n    }\n  }\n\n  if (callback) {\n    return callback();\n  }\n}\n\nfunction killPid(pid, signal) {\n  try {\n    process.kill(parseInt(pid, 10), signal);\n  } catch (err) {\n    if (err.code !== 'ESRCH') throw err;\n  }\n}\n\nfunction buildProcessTree(parentPid, tree, pidsToProcess, spawnChildProcessesList, cb) {\n  var ps = spawnChildProcessesList(parentPid);\n  var allData = '';\n  ps.stdout.on('data', function (data) {\n    var data = data.toString('ascii');\n    allData += data;\n  });\n\n  var onClose = function (code) {\n    delete pidsToProcess[parentPid];\n\n    if (code != 0) {\n      // no more parent processes\n      if (Object.keys(pidsToProcess).length == 0) {\n        cb();\n      }\n\n      return;\n    }\n\n    allData.match(/\\d+/g).forEach(function (pid) {\n      pid = parseInt(pid, 10);\n      tree[parentPid].push(pid);\n      tree[pid] = [];\n      pidsToProcess[pid] = 1;\n      buildProcessTree(pid, tree, pidsToProcess, spawnChildProcessesList, cb);\n    });\n  };\n\n  ps.on('close', onClose);\n}","map":{"version":3,"names":["childProcess","require","spawn","exec","module","exports","pid","signal","callback","undefined","parseInt","Number","isNaN","Error","tree","pidsToProcess","process","platform","buildProcessTree","parentPid","killAll","killed","Object","keys","forEach","pidpid","killPid","err","kill","code","spawnChildProcessesList","cb","ps","allData","stdout","on","data","toString","onClose","length","match","push"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/tree-kill/index.js"],"sourcesContent":["'use strict';\n\nvar childProcess = require('child_process');\nvar spawn = childProcess.spawn;\nvar exec = childProcess.exec;\n\nmodule.exports = function (pid, signal, callback) {\n    if (typeof signal === 'function' && callback === undefined) {\n        callback = signal;\n        signal = undefined;\n    }\n\n    pid = parseInt(pid);\n    if (Number.isNaN(pid)) {\n        if (callback) {\n            return callback(new Error(\"pid must be a number\"));\n        } else {\n            throw new Error(\"pid must be a number\");\n        }\n    }\n\n    var tree = {};\n    var pidsToProcess = {};\n    tree[pid] = [];\n    pidsToProcess[pid] = 1;\n\n    switch (process.platform) {\n    case 'win32':\n        exec('taskkill /pid ' + pid + ' /T /F', callback);\n        break;\n    case 'darwin':\n        buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n          return spawn('pgrep', ['-P', parentPid]);\n        }, function () {\n            killAll(tree, signal, callback);\n        });\n        break;\n    // case 'sunos':\n    //     buildProcessTreeSunOS(pid, tree, pidsToProcess, function () {\n    //         killAll(tree, signal, callback);\n    //     });\n    //     break;\n    default: // Linux\n        buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n          return spawn('ps', ['-o', 'pid', '--no-headers', '--ppid', parentPid]);\n        }, function () {\n            killAll(tree, signal, callback);\n        });\n        break;\n    }\n};\n\nfunction killAll (tree, signal, callback) {\n    var killed = {};\n    try {\n        Object.keys(tree).forEach(function (pid) {\n            tree[pid].forEach(function (pidpid) {\n                if (!killed[pidpid]) {\n                    killPid(pidpid, signal);\n                    killed[pidpid] = 1;\n                }\n            });\n            if (!killed[pid]) {\n                killPid(pid, signal);\n                killed[pid] = 1;\n            }\n        });\n    } catch (err) {\n        if (callback) {\n            return callback(err);\n        } else {\n            throw err;\n        }\n    }\n    if (callback) {\n        return callback();\n    }\n}\n\nfunction killPid(pid, signal) {\n    try {\n        process.kill(parseInt(pid, 10), signal);\n    }\n    catch (err) {\n        if (err.code !== 'ESRCH') throw err;\n    }\n}\n\nfunction buildProcessTree (parentPid, tree, pidsToProcess, spawnChildProcessesList, cb) {\n    var ps = spawnChildProcessesList(parentPid);\n    var allData = '';\n    ps.stdout.on('data', function (data) {\n        var data = data.toString('ascii');\n        allData += data;\n    });\n\n    var onClose = function (code) {\n        delete pidsToProcess[parentPid];\n\n        if (code != 0) {\n            // no more parent processes\n            if (Object.keys(pidsToProcess).length == 0) {\n                cb();\n            }\n            return;\n        }\n\n        allData.match(/\\d+/g).forEach(function (pid) {\n          pid = parseInt(pid, 10);\n          tree[parentPid].push(pid);\n          tree[pid] = [];\n          pidsToProcess[pid] = 1;\n          buildProcessTree(pid, tree, pidsToProcess, spawnChildProcessesList, cb);\n        });\n    };\n\n    ps.on('close', onClose);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}