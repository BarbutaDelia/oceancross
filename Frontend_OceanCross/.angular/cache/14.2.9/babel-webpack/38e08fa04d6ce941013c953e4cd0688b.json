{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst remapping_1 = __importDefault(require(\"@ampproject/remapping\"));\n\nconst terser_1 = require(\"terser\");\n\nconst esbuild_executor_1 = require(\"./esbuild-executor\");\n/**\n * The cached esbuild executor.\n * This will automatically use the native or WASM version based on platform and availability\n * with the native version given priority due to its superior performance.\n */\n\n\nlet esbuild;\n/**\n * Handles optimization requests sent from the main thread via the `JavaScriptOptimizerPlugin`.\n */\n\nfunction default_1(_x) {\n  return _default_.apply(this, arguments);\n}\n\nfunction _default_() {\n  _default_ = _asyncToGenerator(function* ({\n    asset,\n    options\n  }) {\n    // esbuild is used as a first pass\n    const esbuildResult = yield optimizeWithEsbuild(asset.code, asset.name, options); // terser is used as a second pass\n\n    const terserResult = yield optimizeWithTerser(asset.name, esbuildResult.code, options.sourcemap, // Terser only supports up to ES2020.\n    options.target === 'next' ? 2020 : options.target, options.advanced); // Merge intermediate sourcemaps with input sourcemap if enabled\n\n    let fullSourcemap;\n\n    if (options.sourcemap) {\n      const partialSourcemaps = [];\n\n      if (esbuildResult.map) {\n        partialSourcemaps.unshift(JSON.parse(esbuildResult.map));\n      }\n\n      if (terserResult.map) {\n        partialSourcemaps.unshift(terserResult.map);\n      }\n\n      if (asset.map) {\n        partialSourcemaps.push(asset.map);\n      }\n\n      fullSourcemap = (0, remapping_1.default)(partialSourcemaps, () => null);\n    }\n\n    return {\n      name: asset.name,\n      code: terserResult.code,\n      map: fullSourcemap\n    };\n  });\n  return _default_.apply(this, arguments);\n}\n\nexports.default = default_1;\n/**\n * Optimizes a JavaScript asset using esbuild.\n *\n * @param content The JavaScript asset source content to optimize.\n * @param name The name of the JavaScript asset. Used to generate source maps.\n * @param options The optimization request options to apply to the content.\n * @returns A promise that resolves with the optimized code, source map, and any warnings.\n */\n\nfunction optimizeWithEsbuild(_x2, _x3, _x4) {\n  return _optimizeWithEsbuild.apply(this, arguments);\n}\n/**\n * Optimizes a JavaScript asset using terser.\n *\n * @param name The name of the JavaScript asset. Used to generate source maps.\n * @param code The JavaScript asset source content to optimize.\n * @param sourcemaps If true, generate an output source map for the optimized code.\n * @param target Specifies the target ECMAScript version for the output code.\n * @param advanced Controls advanced optimizations.\n * @returns A promise that resolves with the optimized code and source map.\n */\n\n\nfunction _optimizeWithEsbuild() {\n  _optimizeWithEsbuild = _asyncToGenerator(function* (content, name, options) {\n    var _a;\n\n    if (!esbuild) {\n      esbuild = new esbuild_executor_1.EsbuildExecutor(options.alwaysUseWasm);\n    }\n\n    let result;\n\n    try {\n      result = yield esbuild.transform(content, {\n        minifyIdentifiers: !options.keepIdentifierNames,\n        minifySyntax: true,\n        // NOTE: Disabling whitespace ensures unused pure annotations are kept\n        minifyWhitespace: false,\n        pure: ['forwardRef'],\n        legalComments: options.removeLicenses ? 'none' : 'inline',\n        sourcefile: name,\n        sourcemap: options.sourcemap && 'external',\n        define: options.define,\n        // This option should always be disabled for browser builds as we don't rely on `.name`\n        // and causes deadcode to be retained which makes `NG_BUILD_MANGLE` unusable to investigate tree-shaking issues.\n        // We enable `keepNames` only for server builds as Domino relies on `.name`.\n        // Once we no longer rely on Domino for SSR we should be able to remove this.\n        keepNames: options.keepNames,\n        target: `es${options.target}`\n      });\n    } catch (error) {\n      const failure = error; // If esbuild fails with only ES5 support errors, fallback to just terser.\n      // This will only happen if ES5 is the output target and a global script contains ES2015+ syntax.\n      // In that case, the global script is technically already invalid for the target environment but\n      // this is and has been considered a configuration issue. Global scripts must be compatible with\n      // the target environment.\n\n      if ((_a = failure.errors) === null || _a === void 0 ? void 0 : _a.every(error => error.text.includes('to the configured target environment (\"es5\") is not supported yet'))) {\n        result = {\n          code: content,\n          map: '',\n          warnings: []\n        };\n      } else {\n        throw error;\n      }\n    }\n\n    return result;\n  });\n  return _optimizeWithEsbuild.apply(this, arguments);\n}\n\nfunction optimizeWithTerser(_x5, _x6, _x7, _x8, _x9) {\n  return _optimizeWithTerser.apply(this, arguments);\n}\n\nfunction _optimizeWithTerser() {\n  _optimizeWithTerser = _asyncToGenerator(function* (name, code, sourcemaps, target, advanced) {\n    const result = yield (0, terser_1.minify)({\n      [name]: code\n    }, {\n      compress: {\n        passes: advanced ? 2 : 1,\n        pure_getters: advanced\n      },\n      ecma: target,\n      // esbuild in the first pass is used to minify identifiers instead of mangle here\n      mangle: false,\n      // esbuild in the first pass is used to minify function names\n      keep_fnames: true,\n      format: {\n        // ASCII output is enabled here as well to prevent terser from converting back to UTF-8\n        ascii_only: true,\n        wrap_func_args: false\n      },\n      sourceMap: sourcemaps && {\n        asObject: true // typings don't include asObject option\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      }\n    });\n\n    if (!result.code) {\n      throw new Error('Terser failed for unknown reason.');\n    }\n\n    return {\n      code: result.code,\n      map: result.map\n    };\n  });\n  return _optimizeWithTerser.apply(this, arguments);\n}","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","remapping_1","require","terser_1","esbuild_executor_1","esbuild","default_1","asset","options","esbuildResult","optimizeWithEsbuild","code","name","terserResult","optimizeWithTerser","sourcemap","target","advanced","fullSourcemap","partialSourcemaps","map","unshift","JSON","parse","push","default","content","_a","EsbuildExecutor","alwaysUseWasm","result","transform","minifyIdentifiers","keepIdentifierNames","minifySyntax","minifyWhitespace","pure","legalComments","removeLicenses","sourcefile","define","keepNames","error","failure","errors","every","text","includes","warnings","sourcemaps","minify","compress","passes","pure_getters","ecma","mangle","keep_fnames","format","ascii_only","wrap_func_args","sourceMap","asObject","Error"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@angular-devkit/build-angular/src/webpack/plugins/javascript-optimizer-worker.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst remapping_1 = __importDefault(require(\"@ampproject/remapping\"));\nconst terser_1 = require(\"terser\");\nconst esbuild_executor_1 = require(\"./esbuild-executor\");\n/**\n * The cached esbuild executor.\n * This will automatically use the native or WASM version based on platform and availability\n * with the native version given priority due to its superior performance.\n */\nlet esbuild;\n/**\n * Handles optimization requests sent from the main thread via the `JavaScriptOptimizerPlugin`.\n */\nasync function default_1({ asset, options }) {\n    // esbuild is used as a first pass\n    const esbuildResult = await optimizeWithEsbuild(asset.code, asset.name, options);\n    // terser is used as a second pass\n    const terserResult = await optimizeWithTerser(asset.name, esbuildResult.code, options.sourcemap, \n    // Terser only supports up to ES2020.\n    options.target === 'next' ? 2020 : options.target, options.advanced);\n    // Merge intermediate sourcemaps with input sourcemap if enabled\n    let fullSourcemap;\n    if (options.sourcemap) {\n        const partialSourcemaps = [];\n        if (esbuildResult.map) {\n            partialSourcemaps.unshift(JSON.parse(esbuildResult.map));\n        }\n        if (terserResult.map) {\n            partialSourcemaps.unshift(terserResult.map);\n        }\n        if (asset.map) {\n            partialSourcemaps.push(asset.map);\n        }\n        fullSourcemap = (0, remapping_1.default)(partialSourcemaps, () => null);\n    }\n    return { name: asset.name, code: terserResult.code, map: fullSourcemap };\n}\nexports.default = default_1;\n/**\n * Optimizes a JavaScript asset using esbuild.\n *\n * @param content The JavaScript asset source content to optimize.\n * @param name The name of the JavaScript asset. Used to generate source maps.\n * @param options The optimization request options to apply to the content.\n * @returns A promise that resolves with the optimized code, source map, and any warnings.\n */\nasync function optimizeWithEsbuild(content, name, options) {\n    var _a;\n    if (!esbuild) {\n        esbuild = new esbuild_executor_1.EsbuildExecutor(options.alwaysUseWasm);\n    }\n    let result;\n    try {\n        result = await esbuild.transform(content, {\n            minifyIdentifiers: !options.keepIdentifierNames,\n            minifySyntax: true,\n            // NOTE: Disabling whitespace ensures unused pure annotations are kept\n            minifyWhitespace: false,\n            pure: ['forwardRef'],\n            legalComments: options.removeLicenses ? 'none' : 'inline',\n            sourcefile: name,\n            sourcemap: options.sourcemap && 'external',\n            define: options.define,\n            // This option should always be disabled for browser builds as we don't rely on `.name`\n            // and causes deadcode to be retained which makes `NG_BUILD_MANGLE` unusable to investigate tree-shaking issues.\n            // We enable `keepNames` only for server builds as Domino relies on `.name`.\n            // Once we no longer rely on Domino for SSR we should be able to remove this.\n            keepNames: options.keepNames,\n            target: `es${options.target}`,\n        });\n    }\n    catch (error) {\n        const failure = error;\n        // If esbuild fails with only ES5 support errors, fallback to just terser.\n        // This will only happen if ES5 is the output target and a global script contains ES2015+ syntax.\n        // In that case, the global script is technically already invalid for the target environment but\n        // this is and has been considered a configuration issue. Global scripts must be compatible with\n        // the target environment.\n        if ((_a = failure.errors) === null || _a === void 0 ? void 0 : _a.every((error) => error.text.includes('to the configured target environment (\"es5\") is not supported yet'))) {\n            result = {\n                code: content,\n                map: '',\n                warnings: [],\n            };\n        }\n        else {\n            throw error;\n        }\n    }\n    return result;\n}\n/**\n * Optimizes a JavaScript asset using terser.\n *\n * @param name The name of the JavaScript asset. Used to generate source maps.\n * @param code The JavaScript asset source content to optimize.\n * @param sourcemaps If true, generate an output source map for the optimized code.\n * @param target Specifies the target ECMAScript version for the output code.\n * @param advanced Controls advanced optimizations.\n * @returns A promise that resolves with the optimized code and source map.\n */\nasync function optimizeWithTerser(name, code, sourcemaps, target, advanced) {\n    const result = await (0, terser_1.minify)({ [name]: code }, {\n        compress: {\n            passes: advanced ? 2 : 1,\n            pure_getters: advanced,\n        },\n        ecma: target,\n        // esbuild in the first pass is used to minify identifiers instead of mangle here\n        mangle: false,\n        // esbuild in the first pass is used to minify function names\n        keep_fnames: true,\n        format: {\n            // ASCII output is enabled here as well to prevent terser from converting back to UTF-8\n            ascii_only: true,\n            wrap_func_args: false,\n        },\n        sourceMap: sourcemaps &&\n            {\n                asObject: true,\n                // typings don't include asObject option\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            },\n    });\n    if (!result.code) {\n        throw new Error('Terser failed for unknown reason.');\n    }\n    return { code: result.code, map: result.map };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}