{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\"); // Based on https://github.com/webpack/webpack/blob/master/lib/cli.js\n// Please do not modify it\n\n/** @typedef {\"unknown-argument\" | \"unexpected-non-array-in-path\" | \"unexpected-non-object-in-path\" | \"multiple-values-unexpected\" | \"invalid-value\"} ProblemType */\n\n/**\n * @typedef {Object} Problem\n * @property {ProblemType} type\n * @property {string} path\n * @property {string} argument\n * @property {any=} value\n * @property {number=} index\n * @property {string=} expected\n */\n\n/**\n * @typedef {Object} LocalProblem\n * @property {ProblemType} type\n * @property {string} path\n * @property {string=} expected\n */\n\n/**\n * @typedef {Object} ArgumentConfig\n * @property {string} description\n * @property {string} path\n * @property {boolean} multiple\n * @property {\"enum\"|\"string\"|\"path\"|\"number\"|\"boolean\"|\"RegExp\"|\"reset\"} type\n * @property {any[]=} values\n */\n\n/**\n * @typedef {Object} Argument\n * @property {string} description\n * @property {\"string\"|\"number\"|\"boolean\"} simpleType\n * @property {boolean} multiple\n * @property {ArgumentConfig[]} configs\n */\n\n\nconst cliAddedItems = new WeakMap();\n/**\n * @param {any} config configuration\n * @param {string} schemaPath path in the config\n * @param {number | undefined} index index of value when multiple values are provided, otherwise undefined\n * @returns {{ problem?: LocalProblem, object?: any, property?: string | number, value?: any }} problem or object with property and value\n */\n\nconst getObjectAndProperty = (config, schemaPath, index = 0) => {\n  if (!schemaPath) {\n    return {\n      value: config\n    };\n  }\n\n  const parts = schemaPath.split(\".\");\n  const property = parts.pop();\n  let current = config;\n  let i = 0;\n\n  for (const part of parts) {\n    const isArray = part.endsWith(\"[]\");\n    const name = isArray ? part.slice(0, -2) : part;\n    let value = current[name];\n\n    if (isArray) {\n      // eslint-disable-next-line no-undefined\n      if (value === undefined) {\n        value = {};\n        current[name] = [...Array.from({\n          length: index\n        }), value];\n        cliAddedItems.set(current[name], index + 1);\n      } else if (!Array.isArray(value)) {\n        return {\n          problem: {\n            type: \"unexpected-non-array-in-path\",\n            path: parts.slice(0, i).join(\".\")\n          }\n        };\n      } else {\n        let addedItems = cliAddedItems.get(value) || 0;\n\n        while (addedItems <= index) {\n          // eslint-disable-next-line no-undefined\n          value.push(undefined); // eslint-disable-next-line no-plusplus\n\n          addedItems++;\n        }\n\n        cliAddedItems.set(value, addedItems);\n        const x = value.length - addedItems + index; // eslint-disable-next-line no-undefined\n\n        if (value[x] === undefined) {\n          value[x] = {};\n        } else if (value[x] === null || typeof value[x] !== \"object\") {\n          return {\n            problem: {\n              type: \"unexpected-non-object-in-path\",\n              path: parts.slice(0, i).join(\".\")\n            }\n          };\n        }\n\n        value = value[x];\n      } // eslint-disable-next-line no-undefined\n\n    } else if (value === undefined) {\n      // eslint-disable-next-line no-multi-assign\n      value = current[name] = {};\n    } else if (value === null || typeof value !== \"object\") {\n      return {\n        problem: {\n          type: \"unexpected-non-object-in-path\",\n          path: parts.slice(0, i).join(\".\")\n        }\n      };\n    }\n\n    current = value; // eslint-disable-next-line no-plusplus\n\n    i++;\n  }\n\n  const value = current[\n  /** @type {string} */\n  property];\n\n  if (\n  /** @type {string} */\n  property.endsWith(\"[]\")) {\n    const name =\n    /** @type {string} */\n    property.slice(0, -2); // eslint-disable-next-line no-shadow\n\n    const value = current[name]; // eslint-disable-next-line no-undefined\n\n    if (value === undefined) {\n      // eslint-disable-next-line no-undefined\n      current[name] = [...Array.from({\n        length: index\n      }), undefined];\n      cliAddedItems.set(current[name], index + 1); // eslint-disable-next-line no-undefined\n\n      return {\n        object: current[name],\n        property: index,\n        value: undefined\n      };\n    } else if (!Array.isArray(value)) {\n      // eslint-disable-next-line no-undefined\n      current[name] = [value, ...Array.from({\n        length: index\n      }), undefined];\n      cliAddedItems.set(current[name], index + 1); // eslint-disable-next-line no-undefined\n\n      return {\n        object: current[name],\n        property: index + 1,\n        value: undefined\n      };\n    }\n\n    let addedItems = cliAddedItems.get(value) || 0;\n\n    while (addedItems <= index) {\n      // eslint-disable-next-line no-undefined\n      value.push(undefined); // eslint-disable-next-line no-plusplus\n\n      addedItems++;\n    }\n\n    cliAddedItems.set(value, addedItems);\n    const x = value.length - addedItems + index; // eslint-disable-next-line no-undefined\n\n    if (value[x] === undefined) {\n      value[x] = {};\n    } else if (value[x] === null || typeof value[x] !== \"object\") {\n      return {\n        problem: {\n          type: \"unexpected-non-object-in-path\",\n          path: schemaPath\n        }\n      };\n    }\n\n    return {\n      object: value,\n      property: x,\n      value: value[x]\n    };\n  }\n\n  return {\n    object: current,\n    property,\n    value\n  };\n};\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @param {any} value the value\n * @returns {any | undefined} parsed value\n */\n\n\nconst parseValueForArgumentConfig = (argConfig, value) => {\n  // eslint-disable-next-line default-case\n  switch (argConfig.type) {\n    case \"string\":\n      if (typeof value === \"string\") {\n        return value;\n      }\n\n      break;\n\n    case \"path\":\n      if (typeof value === \"string\") {\n        return path.resolve(value);\n      }\n\n      break;\n\n    case \"number\":\n      if (typeof value === \"number\") {\n        return value;\n      }\n\n      if (typeof value === \"string\" && /^[+-]?\\d*(\\.\\d*)[eE]\\d+$/) {\n        const n = +value;\n        if (!isNaN(n)) return n;\n      }\n\n      break;\n\n    case \"boolean\":\n      if (typeof value === \"boolean\") {\n        return value;\n      }\n\n      if (value === \"true\") {\n        return true;\n      }\n\n      if (value === \"false\") {\n        return false;\n      }\n\n      break;\n\n    case \"RegExp\":\n      if (value instanceof RegExp) {\n        return value;\n      }\n\n      if (typeof value === \"string\") {\n        // cspell:word yugi\n        const match = /^\\/(.*)\\/([yugi]*)$/.exec(value);\n\n        if (match && !/[^\\\\]\\//.test(match[1])) {\n          return new RegExp(match[1], match[2]);\n        }\n      }\n\n      break;\n\n    case \"enum\":\n      if (\n      /** @type {any[]} */\n      argConfig.values.includes(value)) {\n        return value;\n      }\n\n      for (const item of\n      /** @type {any[]} */\n      argConfig.values) {\n        if (`${item}` === value) return item;\n      }\n\n      break;\n\n    case \"reset\":\n      if (value === true) {\n        return [];\n      }\n\n      break;\n  }\n};\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @returns {string | undefined} expected message\n */\n\n\nconst getExpectedValue = argConfig => {\n  switch (argConfig.type) {\n    default:\n      return argConfig.type;\n\n    case \"boolean\":\n      return \"true | false\";\n\n    case \"RegExp\":\n      return \"regular expression (example: /ab?c*/)\";\n\n    case \"enum\":\n      return (\n        /** @type {any[]} */\n        argConfig.values.map(v => `${v}`).join(\" | \")\n      );\n\n    case \"reset\":\n      return \"true (will reset the previous value to an empty array)\";\n  }\n};\n/**\n * @param {any} config configuration\n * @param {string} schemaPath path in the config\n * @param {any} value parsed value\n * @param {number | undefined} index index of value when multiple values are provided, otherwise undefined\n * @returns {LocalProblem | null} problem or null for success\n */\n\n\nconst setValue = (config, schemaPath, value, index) => {\n  const {\n    problem,\n    object,\n    property\n  } = getObjectAndProperty(config, schemaPath, index);\n\n  if (problem) {\n    return problem;\n  }\n\n  object[\n  /** @type {string} */\n  property] = value;\n  return null;\n};\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @param {any} config configuration\n * @param {any} value the value\n * @param {number | undefined} index the index if multiple values provided\n * @returns {LocalProblem | null} a problem if any\n */\n\n\nconst processArgumentConfig = (argConfig, config, value, index) => {\n  // eslint-disable-next-line no-undefined\n  if (index !== undefined && !argConfig.multiple) {\n    return {\n      type: \"multiple-values-unexpected\",\n      path: argConfig.path\n    };\n  }\n\n  const parsed = parseValueForArgumentConfig(argConfig, value); // eslint-disable-next-line no-undefined\n\n  if (parsed === undefined) {\n    return {\n      type: \"invalid-value\",\n      path: argConfig.path,\n      expected: getExpectedValue(argConfig)\n    };\n  }\n\n  const problem = setValue(config, argConfig.path, parsed, index);\n\n  if (problem) {\n    return problem;\n  }\n\n  return null;\n};\n/**\n * @param {Record<string, Argument>} args object of arguments\n * @param {any} config configuration\n * @param {Record<string, string | number | boolean | RegExp | (string | number | boolean | RegExp)[]>} values object with values\n * @returns {Problem[] | null} problems or null for success\n */\n\n\nconst processArguments = (args, config, values) => {\n  /**\n   * @type {Problem[]}\n   */\n  const problems = [];\n\n  for (const key of Object.keys(values)) {\n    const arg = args[key];\n\n    if (!arg) {\n      problems.push({\n        type: \"unknown-argument\",\n        path: \"\",\n        argument: key\n      }); // eslint-disable-next-line no-continue\n\n      continue;\n    }\n    /**\n     * @param {any} value\n     * @param {number | undefined} i\n     */\n\n\n    const processValue = (value, i) => {\n      const currentProblems = [];\n\n      for (const argConfig of arg.configs) {\n        const problem = processArgumentConfig(argConfig, config, value, i);\n\n        if (!problem) {\n          return;\n        }\n\n        currentProblems.push({ ...problem,\n          argument: key,\n          value,\n          index: i\n        });\n      }\n\n      problems.push(...currentProblems);\n    };\n\n    const value = values[key];\n\n    if (Array.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        processValue(value[i], i);\n      }\n    } else {\n      // eslint-disable-next-line no-undefined\n      processValue(value, undefined);\n    }\n  }\n\n  if (problems.length === 0) {\n    return null;\n  }\n\n  return problems;\n};\n\nmodule.exports = processArguments;","map":{"version":3,"names":["path","require","cliAddedItems","WeakMap","getObjectAndProperty","config","schemaPath","index","value","parts","split","property","pop","current","i","part","isArray","endsWith","name","slice","undefined","Array","from","length","set","problem","type","join","addedItems","get","push","x","object","parseValueForArgumentConfig","argConfig","resolve","n","isNaN","RegExp","match","exec","test","values","includes","item","getExpectedValue","map","v","setValue","processArgumentConfig","multiple","parsed","expected","processArguments","args","problems","key","Object","keys","arg","argument","processValue","currentProblems","configs","module","exports"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/webpack-dev-server/bin/process-arguments.js"],"sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\n\n// Based on https://github.com/webpack/webpack/blob/master/lib/cli.js\n// Please do not modify it\n\n/** @typedef {\"unknown-argument\" | \"unexpected-non-array-in-path\" | \"unexpected-non-object-in-path\" | \"multiple-values-unexpected\" | \"invalid-value\"} ProblemType */\n\n/**\n * @typedef {Object} Problem\n * @property {ProblemType} type\n * @property {string} path\n * @property {string} argument\n * @property {any=} value\n * @property {number=} index\n * @property {string=} expected\n */\n\n/**\n * @typedef {Object} LocalProblem\n * @property {ProblemType} type\n * @property {string} path\n * @property {string=} expected\n */\n\n/**\n * @typedef {Object} ArgumentConfig\n * @property {string} description\n * @property {string} path\n * @property {boolean} multiple\n * @property {\"enum\"|\"string\"|\"path\"|\"number\"|\"boolean\"|\"RegExp\"|\"reset\"} type\n * @property {any[]=} values\n */\n\n/**\n * @typedef {Object} Argument\n * @property {string} description\n * @property {\"string\"|\"number\"|\"boolean\"} simpleType\n * @property {boolean} multiple\n * @property {ArgumentConfig[]} configs\n */\n\nconst cliAddedItems = new WeakMap();\n\n/**\n * @param {any} config configuration\n * @param {string} schemaPath path in the config\n * @param {number | undefined} index index of value when multiple values are provided, otherwise undefined\n * @returns {{ problem?: LocalProblem, object?: any, property?: string | number, value?: any }} problem or object with property and value\n */\nconst getObjectAndProperty = (config, schemaPath, index = 0) => {\n  if (!schemaPath) {\n    return { value: config };\n  }\n\n  const parts = schemaPath.split(\".\");\n  const property = parts.pop();\n  let current = config;\n  let i = 0;\n\n  for (const part of parts) {\n    const isArray = part.endsWith(\"[]\");\n    const name = isArray ? part.slice(0, -2) : part;\n    let value = current[name];\n\n    if (isArray) {\n      // eslint-disable-next-line no-undefined\n      if (value === undefined) {\n        value = {};\n        current[name] = [...Array.from({ length: index }), value];\n        cliAddedItems.set(current[name], index + 1);\n      } else if (!Array.isArray(value)) {\n        return {\n          problem: {\n            type: \"unexpected-non-array-in-path\",\n            path: parts.slice(0, i).join(\".\"),\n          },\n        };\n      } else {\n        let addedItems = cliAddedItems.get(value) || 0;\n\n        while (addedItems <= index) {\n          // eslint-disable-next-line no-undefined\n          value.push(undefined);\n          // eslint-disable-next-line no-plusplus\n          addedItems++;\n        }\n\n        cliAddedItems.set(value, addedItems);\n\n        const x = value.length - addedItems + index;\n\n        // eslint-disable-next-line no-undefined\n        if (value[x] === undefined) {\n          value[x] = {};\n        } else if (value[x] === null || typeof value[x] !== \"object\") {\n          return {\n            problem: {\n              type: \"unexpected-non-object-in-path\",\n              path: parts.slice(0, i).join(\".\"),\n            },\n          };\n        }\n\n        value = value[x];\n      }\n      // eslint-disable-next-line no-undefined\n    } else if (value === undefined) {\n      // eslint-disable-next-line no-multi-assign\n      value = current[name] = {};\n    } else if (value === null || typeof value !== \"object\") {\n      return {\n        problem: {\n          type: \"unexpected-non-object-in-path\",\n          path: parts.slice(0, i).join(\".\"),\n        },\n      };\n    }\n\n    current = value;\n    // eslint-disable-next-line no-plusplus\n    i++;\n  }\n\n  const value = current[/** @type {string} */ (property)];\n\n  if (/** @type {string} */ (property).endsWith(\"[]\")) {\n    const name = /** @type {string} */ (property).slice(0, -2);\n    // eslint-disable-next-line no-shadow\n    const value = current[name];\n\n    // eslint-disable-next-line no-undefined\n    if (value === undefined) {\n      // eslint-disable-next-line no-undefined\n      current[name] = [...Array.from({ length: index }), undefined];\n      cliAddedItems.set(current[name], index + 1);\n\n      // eslint-disable-next-line no-undefined\n      return { object: current[name], property: index, value: undefined };\n    } else if (!Array.isArray(value)) {\n      // eslint-disable-next-line no-undefined\n      current[name] = [value, ...Array.from({ length: index }), undefined];\n      cliAddedItems.set(current[name], index + 1);\n\n      // eslint-disable-next-line no-undefined\n      return { object: current[name], property: index + 1, value: undefined };\n    }\n\n    let addedItems = cliAddedItems.get(value) || 0;\n\n    while (addedItems <= index) {\n      // eslint-disable-next-line no-undefined\n      value.push(undefined);\n      // eslint-disable-next-line no-plusplus\n      addedItems++;\n    }\n\n    cliAddedItems.set(value, addedItems);\n\n    const x = value.length - addedItems + index;\n\n    // eslint-disable-next-line no-undefined\n    if (value[x] === undefined) {\n      value[x] = {};\n    } else if (value[x] === null || typeof value[x] !== \"object\") {\n      return {\n        problem: {\n          type: \"unexpected-non-object-in-path\",\n          path: schemaPath,\n        },\n      };\n    }\n\n    return {\n      object: value,\n      property: x,\n      value: value[x],\n    };\n  }\n\n  return { object: current, property, value };\n};\n\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @param {any} value the value\n * @returns {any | undefined} parsed value\n */\nconst parseValueForArgumentConfig = (argConfig, value) => {\n  // eslint-disable-next-line default-case\n  switch (argConfig.type) {\n    case \"string\":\n      if (typeof value === \"string\") {\n        return value;\n      }\n      break;\n    case \"path\":\n      if (typeof value === \"string\") {\n        return path.resolve(value);\n      }\n      break;\n    case \"number\":\n      if (typeof value === \"number\") {\n        return value;\n      }\n\n      if (typeof value === \"string\" && /^[+-]?\\d*(\\.\\d*)[eE]\\d+$/) {\n        const n = +value;\n        if (!isNaN(n)) return n;\n      }\n\n      break;\n    case \"boolean\":\n      if (typeof value === \"boolean\") {\n        return value;\n      }\n\n      if (value === \"true\") {\n        return true;\n      }\n\n      if (value === \"false\") {\n        return false;\n      }\n\n      break;\n    case \"RegExp\":\n      if (value instanceof RegExp) {\n        return value;\n      }\n\n      if (typeof value === \"string\") {\n        // cspell:word yugi\n        const match = /^\\/(.*)\\/([yugi]*)$/.exec(value);\n\n        if (match && !/[^\\\\]\\//.test(match[1])) {\n          return new RegExp(match[1], match[2]);\n        }\n      }\n\n      break;\n    case \"enum\":\n      if (/** @type {any[]} */ (argConfig.values).includes(value)) {\n        return value;\n      }\n\n      for (const item of /** @type {any[]} */ (argConfig.values)) {\n        if (`${item}` === value) return item;\n      }\n\n      break;\n    case \"reset\":\n      if (value === true) {\n        return [];\n      }\n\n      break;\n  }\n};\n\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @returns {string | undefined} expected message\n */\nconst getExpectedValue = (argConfig) => {\n  switch (argConfig.type) {\n    default:\n      return argConfig.type;\n    case \"boolean\":\n      return \"true | false\";\n    case \"RegExp\":\n      return \"regular expression (example: /ab?c*/)\";\n    case \"enum\":\n      return /** @type {any[]} */ (argConfig.values)\n        .map((v) => `${v}`)\n        .join(\" | \");\n    case \"reset\":\n      return \"true (will reset the previous value to an empty array)\";\n  }\n};\n\n/**\n * @param {any} config configuration\n * @param {string} schemaPath path in the config\n * @param {any} value parsed value\n * @param {number | undefined} index index of value when multiple values are provided, otherwise undefined\n * @returns {LocalProblem | null} problem or null for success\n */\nconst setValue = (config, schemaPath, value, index) => {\n  const { problem, object, property } = getObjectAndProperty(\n    config,\n    schemaPath,\n    index\n  );\n\n  if (problem) {\n    return problem;\n  }\n\n  object[/** @type {string} */ (property)] = value;\n\n  return null;\n};\n\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @param {any} config configuration\n * @param {any} value the value\n * @param {number | undefined} index the index if multiple values provided\n * @returns {LocalProblem | null} a problem if any\n */\nconst processArgumentConfig = (argConfig, config, value, index) => {\n  // eslint-disable-next-line no-undefined\n  if (index !== undefined && !argConfig.multiple) {\n    return {\n      type: \"multiple-values-unexpected\",\n      path: argConfig.path,\n    };\n  }\n\n  const parsed = parseValueForArgumentConfig(argConfig, value);\n\n  // eslint-disable-next-line no-undefined\n  if (parsed === undefined) {\n    return {\n      type: \"invalid-value\",\n      path: argConfig.path,\n      expected: getExpectedValue(argConfig),\n    };\n  }\n\n  const problem = setValue(config, argConfig.path, parsed, index);\n\n  if (problem) {\n    return problem;\n  }\n\n  return null;\n};\n\n/**\n * @param {Record<string, Argument>} args object of arguments\n * @param {any} config configuration\n * @param {Record<string, string | number | boolean | RegExp | (string | number | boolean | RegExp)[]>} values object with values\n * @returns {Problem[] | null} problems or null for success\n */\nconst processArguments = (args, config, values) => {\n  /**\n   * @type {Problem[]}\n   */\n  const problems = [];\n\n  for (const key of Object.keys(values)) {\n    const arg = args[key];\n\n    if (!arg) {\n      problems.push({\n        type: \"unknown-argument\",\n        path: \"\",\n        argument: key,\n      });\n\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    /**\n     * @param {any} value\n     * @param {number | undefined} i\n     */\n    const processValue = (value, i) => {\n      const currentProblems = [];\n\n      for (const argConfig of arg.configs) {\n        const problem = processArgumentConfig(argConfig, config, value, i);\n\n        if (!problem) {\n          return;\n        }\n\n        currentProblems.push({\n          ...problem,\n          argument: key,\n          value,\n          index: i,\n        });\n      }\n\n      problems.push(...currentProblems);\n    };\n\n    const value = values[key];\n\n    if (Array.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        processValue(value[i], i);\n      }\n    } else {\n      // eslint-disable-next-line no-undefined\n      processValue(value, undefined);\n    }\n  }\n\n  if (problems.length === 0) {\n    return null;\n  }\n\n  return problems;\n};\n\nmodule.exports = processArguments;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}