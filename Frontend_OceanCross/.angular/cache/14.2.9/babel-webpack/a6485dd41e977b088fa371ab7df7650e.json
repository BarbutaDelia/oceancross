{"ast":null,"code":"'use strict';\n\nconst BrowserResult = require('./browser_result');\n\nconst helper = require('./helper');\n\nconst logger = require('./logger');\n\nconst CONNECTED = 'CONNECTED'; // The browser is connected but not yet been commanded to execute tests.\n\nconst CONFIGURING = 'CONFIGURING'; // The browser has been told to execute tests; it is configuring before tests execution.\n\nconst EXECUTING = 'EXECUTING'; // The browser is executing the tests.\n\nconst EXECUTING_DISCONNECTED = 'EXECUTING_DISCONNECTED'; // The browser is executing the tests, but temporarily disconnect (waiting for socket reconnecting).\n\nconst DISCONNECTED = 'DISCONNECTED'; // The browser got completely disconnected (e.g. browser crash) and can be only restored with a restart of execution.\n\nclass Browser {\n  constructor(id, fullName, collection, emitter, socket, timer, disconnectDelay, noActivityTimeout, singleRun, clientConfig) {\n    this.id = id;\n    this.fullName = fullName;\n    this.name = helper.browserFullNameToShort(fullName);\n    this.lastResult = new BrowserResult();\n    this.disconnectsCount = 0;\n    this.activeSockets = [socket];\n    this.noActivityTimeout = noActivityTimeout;\n    this.singleRun = singleRun;\n    this.clientConfig = clientConfig;\n    this.collection = collection;\n    this.emitter = emitter;\n    this.socket = socket;\n    this.timer = timer;\n    this.disconnectDelay = disconnectDelay;\n    this.log = logger.create(this.name);\n    this.noActivityTimeoutId = null;\n    this.pendingDisconnect = null;\n    this.setState(CONNECTED);\n  }\n\n  init() {\n    this.log.info(`Connected on socket ${this.socket.id} with id ${this.id}`);\n    this.bindSocketEvents(this.socket);\n    this.collection.add(this);\n    this.emitter.emit('browser_register', this);\n  }\n\n  setState(toState) {\n    this.log.debug(`${this.state} -> ${toState}`);\n    this.state = toState;\n  }\n\n  onKarmaError(error) {\n    if (this.isNotConnected()) {\n      this.lastResult.error = true;\n    }\n\n    this.emitter.emit('browser_error', this, error);\n    this.refreshNoActivityTimeout();\n  }\n\n  onInfo(info) {\n    if (helper.isDefined(info.dump)) {\n      this.emitter.emit('browser_log', this, info.dump, 'dump');\n    }\n\n    if (helper.isDefined(info.log)) {\n      this.emitter.emit('browser_log', this, info.log, info.type);\n    } else if (helper.isDefined(info.total)) {\n      if (this.state === EXECUTING) {\n        this.lastResult.total = info.total;\n      }\n    } else if (!helper.isDefined(info.dump)) {\n      this.emitter.emit('browser_info', this, info);\n    }\n\n    this.refreshNoActivityTimeout();\n  }\n\n  onStart(info) {\n    if (info.total === null) {\n      this.log.warn('Adapter did not report total number of specs.');\n    }\n\n    this.lastResult = new BrowserResult(info.total);\n    this.setState(EXECUTING);\n    this.emitter.emit('browser_start', this, info);\n    this.refreshNoActivityTimeout();\n  }\n\n  onComplete(result) {\n    if (this.isNotConnected()) {\n      this.setState(CONNECTED);\n      this.lastResult.totalTimeEnd();\n      this.emitter.emit('browsers_change', this.collection);\n      this.emitter.emit('browser_complete', this, result);\n      this.clearNoActivityTimeout();\n    }\n  }\n\n  onSocketDisconnect(reason, disconnectedSocket) {\n    helper.arrayRemove(this.activeSockets, disconnectedSocket);\n\n    if (this.activeSockets.length) {\n      this.log.debug(`Disconnected ${disconnectedSocket.id}, still have ${this.getActiveSocketsIds()}`);\n      return;\n    }\n\n    if (this.isConnected()) {\n      this.disconnect(`Client disconnected from CONNECTED state (${reason})`);\n    } else if ([CONFIGURING, EXECUTING].includes(this.state)) {\n      this.log.debug(`Disconnected during run, waiting ${this.disconnectDelay}ms for reconnecting.`);\n      this.setState(EXECUTING_DISCONNECTED);\n      this.pendingDisconnect = this.timer.setTimeout(() => {\n        this.lastResult.totalTimeEnd();\n        this.lastResult.disconnected = true;\n        this.disconnect(`reconnect failed before timeout of ${this.disconnectDelay}ms (${reason})`);\n        this.emitter.emit('browser_complete', this);\n      }, this.disconnectDelay);\n      this.clearNoActivityTimeout();\n    }\n  }\n\n  reconnect(newSocket, clientSaysReconnect) {\n    if (!clientSaysReconnect || this.state === DISCONNECTED) {\n      this.log.info(`Disconnected browser returned on socket ${newSocket.id} with id ${this.id}.`);\n      this.setState(CONNECTED); // The disconnected browser is already part of the collection.\n      // Update the collection view in the UI (header on client.html)\n\n      this.emitter.emit('browsers_change', this.collection); // Notify the launcher\n\n      this.emitter.emit('browser_register', this); // Execute tests if configured to do so.\n\n      if (this.singleRun) {\n        this.execute();\n      }\n    } else if (this.state === EXECUTING_DISCONNECTED) {\n      this.log.debug('Lost socket connection, but browser continued to execute. Reconnected ' + `on socket ${newSocket.id}.`);\n      this.setState(EXECUTING);\n    } else if ([CONNECTED, CONFIGURING, EXECUTING].includes(this.state)) {\n      this.log.debug(`Rebinding to new socket ${newSocket.id} (already have ` + `${this.getActiveSocketsIds()})`);\n    }\n\n    if (!this.activeSockets.some(s => s.id === newSocket.id)) {\n      this.activeSockets.push(newSocket);\n      this.bindSocketEvents(newSocket);\n    }\n\n    if (this.pendingDisconnect) {\n      this.timer.clearTimeout(this.pendingDisconnect);\n    }\n\n    this.refreshNoActivityTimeout();\n  }\n\n  onResult(result) {\n    if (Array.isArray(result)) {\n      result.forEach(this.onResult, this);\n    } else if (this.isNotConnected()) {\n      this.lastResult.add(result);\n      this.emitter.emit('spec_complete', this, result);\n    }\n\n    this.refreshNoActivityTimeout();\n  }\n\n  execute() {\n    this.activeSockets.forEach(socket => socket.emit('execute', this.clientConfig));\n    this.setState(CONFIGURING);\n    this.refreshNoActivityTimeout();\n  }\n\n  getActiveSocketsIds() {\n    return this.activeSockets.map(s => s.id).join(', ');\n  }\n\n  disconnect(reason) {\n    this.log.warn(`Disconnected (${this.disconnectsCount} times) ${reason || ''}`);\n    this.disconnectsCount++;\n    this.emitter.emit('browser_error', this, `Disconnected ${reason || ''}`);\n    this.remove();\n  }\n\n  remove() {\n    this.setState(DISCONNECTED);\n    this.collection.remove(this);\n  }\n\n  refreshNoActivityTimeout() {\n    if (this.noActivityTimeout) {\n      this.clearNoActivityTimeout();\n      this.noActivityTimeoutId = this.timer.setTimeout(() => {\n        this.lastResult.totalTimeEnd();\n        this.lastResult.disconnected = true;\n        this.disconnect(`, because no message in ${this.noActivityTimeout} ms.`);\n        this.emitter.emit('browser_complete', this);\n      }, this.noActivityTimeout);\n    }\n  }\n\n  clearNoActivityTimeout() {\n    if (this.noActivityTimeout && this.noActivityTimeoutId) {\n      this.timer.clearTimeout(this.noActivityTimeoutId);\n      this.noActivityTimeoutId = null;\n    }\n  }\n\n  bindSocketEvents(socket) {\n    // TODO: check which of these events are actually emitted by socket\n    socket.on('disconnect', reason => this.onSocketDisconnect(reason, socket));\n    socket.on('start', info => this.onStart(info));\n    socket.on('karma_error', error => this.onKarmaError(error));\n    socket.on('complete', result => this.onComplete(result));\n    socket.on('info', info => this.onInfo(info));\n    socket.on('result', result => this.onResult(result));\n  }\n\n  isConnected() {\n    return this.state === CONNECTED;\n  }\n\n  isNotConnected() {\n    return !this.isConnected();\n  }\n\n  serialize() {\n    return {\n      id: this.id,\n      name: this.name,\n      isConnected: this.state === CONNECTED\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      fullName: this.fullName,\n      name: this.name,\n      state: this.state,\n      lastResult: this.lastResult,\n      disconnectsCount: this.disconnectsCount,\n      noActivityTimeout: this.noActivityTimeout,\n      disconnectDelay: this.disconnectDelay\n    };\n  }\n\n}\n\nBrowser.factory = function (id, fullName,\n/* capturedBrowsers */\ncollection, emitter, socket, timer,\n/* config.browserDisconnectTimeout */\ndisconnectDelay,\n/* config.browserNoActivityTimeout */\nnoActivityTimeout,\n/* config.singleRun */\nsingleRun,\n/* config.client */\nclientConfig) {\n  return new Browser(id, fullName, collection, emitter, socket, timer, disconnectDelay, noActivityTimeout, singleRun, clientConfig);\n};\n\nBrowser.STATE_CONNECTED = CONNECTED;\nBrowser.STATE_CONFIGURING = CONFIGURING;\nBrowser.STATE_EXECUTING = EXECUTING;\nBrowser.STATE_EXECUTING_DISCONNECTED = EXECUTING_DISCONNECTED;\nBrowser.STATE_DISCONNECTED = DISCONNECTED;\nmodule.exports = Browser;","map":{"version":3,"names":["BrowserResult","require","helper","logger","CONNECTED","CONFIGURING","EXECUTING","EXECUTING_DISCONNECTED","DISCONNECTED","Browser","constructor","id","fullName","collection","emitter","socket","timer","disconnectDelay","noActivityTimeout","singleRun","clientConfig","name","browserFullNameToShort","lastResult","disconnectsCount","activeSockets","log","create","noActivityTimeoutId","pendingDisconnect","setState","init","info","bindSocketEvents","add","emit","toState","debug","state","onKarmaError","error","isNotConnected","refreshNoActivityTimeout","onInfo","isDefined","dump","type","total","onStart","warn","onComplete","result","totalTimeEnd","clearNoActivityTimeout","onSocketDisconnect","reason","disconnectedSocket","arrayRemove","length","getActiveSocketsIds","isConnected","disconnect","includes","setTimeout","disconnected","reconnect","newSocket","clientSaysReconnect","execute","some","s","push","clearTimeout","onResult","Array","isArray","forEach","map","join","remove","on","serialize","toString","toJSON","factory","STATE_CONNECTED","STATE_CONFIGURING","STATE_EXECUTING","STATE_EXECUTING_DISCONNECTED","STATE_DISCONNECTED","module","exports"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/karma/lib/browser.js"],"sourcesContent":["'use strict'\n\nconst BrowserResult = require('./browser_result')\nconst helper = require('./helper')\nconst logger = require('./logger')\n\nconst CONNECTED = 'CONNECTED' // The browser is connected but not yet been commanded to execute tests.\nconst CONFIGURING = 'CONFIGURING' // The browser has been told to execute tests; it is configuring before tests execution.\nconst EXECUTING = 'EXECUTING' // The browser is executing the tests.\nconst EXECUTING_DISCONNECTED = 'EXECUTING_DISCONNECTED' // The browser is executing the tests, but temporarily disconnect (waiting for socket reconnecting).\nconst DISCONNECTED = 'DISCONNECTED' // The browser got completely disconnected (e.g. browser crash) and can be only restored with a restart of execution.\n\nclass Browser {\n  constructor (id, fullName, collection, emitter, socket, timer, disconnectDelay,\n    noActivityTimeout, singleRun, clientConfig) {\n    this.id = id\n    this.fullName = fullName\n    this.name = helper.browserFullNameToShort(fullName)\n    this.lastResult = new BrowserResult()\n    this.disconnectsCount = 0\n    this.activeSockets = [socket]\n    this.noActivityTimeout = noActivityTimeout\n    this.singleRun = singleRun\n    this.clientConfig = clientConfig\n    this.collection = collection\n    this.emitter = emitter\n    this.socket = socket\n    this.timer = timer\n    this.disconnectDelay = disconnectDelay\n\n    this.log = logger.create(this.name)\n\n    this.noActivityTimeoutId = null\n    this.pendingDisconnect = null\n    this.setState(CONNECTED)\n  }\n\n  init () {\n    this.log.info(`Connected on socket ${this.socket.id} with id ${this.id}`)\n\n    this.bindSocketEvents(this.socket)\n    this.collection.add(this)\n    this.emitter.emit('browser_register', this)\n  }\n\n  setState (toState) {\n    this.log.debug(`${this.state} -> ${toState}`)\n    this.state = toState\n  }\n\n  onKarmaError (error) {\n    if (this.isNotConnected()) {\n      this.lastResult.error = true\n    }\n    this.emitter.emit('browser_error', this, error)\n    this.refreshNoActivityTimeout()\n  }\n\n  onInfo (info) {\n    if (helper.isDefined(info.dump)) {\n      this.emitter.emit('browser_log', this, info.dump, 'dump')\n    }\n\n    if (helper.isDefined(info.log)) {\n      this.emitter.emit('browser_log', this, info.log, info.type)\n    } else if (helper.isDefined(info.total)) {\n      if (this.state === EXECUTING) {\n        this.lastResult.total = info.total\n      }\n    } else if (!helper.isDefined(info.dump)) {\n      this.emitter.emit('browser_info', this, info)\n    }\n\n    this.refreshNoActivityTimeout()\n  }\n\n  onStart (info) {\n    if (info.total === null) {\n      this.log.warn('Adapter did not report total number of specs.')\n    }\n\n    this.lastResult = new BrowserResult(info.total)\n    this.setState(EXECUTING)\n    this.emitter.emit('browser_start', this, info)\n    this.refreshNoActivityTimeout()\n  }\n\n  onComplete (result) {\n    if (this.isNotConnected()) {\n      this.setState(CONNECTED)\n      this.lastResult.totalTimeEnd()\n\n      this.emitter.emit('browsers_change', this.collection)\n      this.emitter.emit('browser_complete', this, result)\n\n      this.clearNoActivityTimeout()\n    }\n  }\n\n  onSocketDisconnect (reason, disconnectedSocket) {\n    helper.arrayRemove(this.activeSockets, disconnectedSocket)\n    if (this.activeSockets.length) {\n      this.log.debug(`Disconnected ${disconnectedSocket.id}, still have ${this.getActiveSocketsIds()}`)\n      return\n    }\n\n    if (this.isConnected()) {\n      this.disconnect(`Client disconnected from CONNECTED state (${reason})`)\n    } else if ([CONFIGURING, EXECUTING].includes(this.state)) {\n      this.log.debug(`Disconnected during run, waiting ${this.disconnectDelay}ms for reconnecting.`)\n      this.setState(EXECUTING_DISCONNECTED)\n\n      this.pendingDisconnect = this.timer.setTimeout(() => {\n        this.lastResult.totalTimeEnd()\n        this.lastResult.disconnected = true\n        this.disconnect(`reconnect failed before timeout of ${this.disconnectDelay}ms (${reason})`)\n        this.emitter.emit('browser_complete', this)\n      }, this.disconnectDelay)\n\n      this.clearNoActivityTimeout()\n    }\n  }\n\n  reconnect (newSocket, clientSaysReconnect) {\n    if (!clientSaysReconnect || this.state === DISCONNECTED) {\n      this.log.info(`Disconnected browser returned on socket ${newSocket.id} with id ${this.id}.`)\n      this.setState(CONNECTED)\n\n      // The disconnected browser is already part of the collection.\n      // Update the collection view in the UI (header on client.html)\n      this.emitter.emit('browsers_change', this.collection)\n      // Notify the launcher\n      this.emitter.emit('browser_register', this)\n      // Execute tests if configured to do so.\n      if (this.singleRun) {\n        this.execute()\n      }\n    } else if (this.state === EXECUTING_DISCONNECTED) {\n      this.log.debug('Lost socket connection, but browser continued to execute. Reconnected ' +\n        `on socket ${newSocket.id}.`)\n      this.setState(EXECUTING)\n    } else if ([CONNECTED, CONFIGURING, EXECUTING].includes(this.state)) {\n      this.log.debug(`Rebinding to new socket ${newSocket.id} (already have ` +\n        `${this.getActiveSocketsIds()})`)\n    }\n\n    if (!this.activeSockets.some((s) => s.id === newSocket.id)) {\n      this.activeSockets.push(newSocket)\n      this.bindSocketEvents(newSocket)\n    }\n\n    if (this.pendingDisconnect) {\n      this.timer.clearTimeout(this.pendingDisconnect)\n    }\n\n    this.refreshNoActivityTimeout()\n  }\n\n  onResult (result) {\n    if (Array.isArray(result)) {\n      result.forEach(this.onResult, this)\n    } else if (this.isNotConnected()) {\n      this.lastResult.add(result)\n      this.emitter.emit('spec_complete', this, result)\n    }\n    this.refreshNoActivityTimeout()\n  }\n\n  execute () {\n    this.activeSockets.forEach((socket) => socket.emit('execute', this.clientConfig))\n    this.setState(CONFIGURING)\n    this.refreshNoActivityTimeout()\n  }\n\n  getActiveSocketsIds () {\n    return this.activeSockets.map((s) => s.id).join(', ')\n  }\n\n  disconnect (reason) {\n    this.log.warn(`Disconnected (${this.disconnectsCount} times) ${reason || ''}`)\n    this.disconnectsCount++\n    this.emitter.emit('browser_error', this, `Disconnected ${reason || ''}`)\n    this.remove()\n  }\n\n  remove () {\n    this.setState(DISCONNECTED)\n    this.collection.remove(this)\n  }\n\n  refreshNoActivityTimeout () {\n    if (this.noActivityTimeout) {\n      this.clearNoActivityTimeout()\n\n      this.noActivityTimeoutId = this.timer.setTimeout(() => {\n        this.lastResult.totalTimeEnd()\n        this.lastResult.disconnected = true\n        this.disconnect(`, because no message in ${this.noActivityTimeout} ms.`)\n        this.emitter.emit('browser_complete', this)\n      }, this.noActivityTimeout)\n    }\n  }\n\n  clearNoActivityTimeout () {\n    if (this.noActivityTimeout && this.noActivityTimeoutId) {\n      this.timer.clearTimeout(this.noActivityTimeoutId)\n      this.noActivityTimeoutId = null\n    }\n  }\n\n  bindSocketEvents (socket) {\n    // TODO: check which of these events are actually emitted by socket\n    socket.on('disconnect', (reason) => this.onSocketDisconnect(reason, socket))\n    socket.on('start', (info) => this.onStart(info))\n    socket.on('karma_error', (error) => this.onKarmaError(error))\n    socket.on('complete', (result) => this.onComplete(result))\n    socket.on('info', (info) => this.onInfo(info))\n    socket.on('result', (result) => this.onResult(result))\n  }\n\n  isConnected () {\n    return this.state === CONNECTED\n  }\n\n  isNotConnected () {\n    return !this.isConnected()\n  }\n\n  serialize () {\n    return {\n      id: this.id,\n      name: this.name,\n      isConnected: this.state === CONNECTED\n    }\n  }\n\n  toString () {\n    return this.name\n  }\n\n  toJSON () {\n    return {\n      id: this.id,\n      fullName: this.fullName,\n      name: this.name,\n      state: this.state,\n      lastResult: this.lastResult,\n      disconnectsCount: this.disconnectsCount,\n      noActivityTimeout: this.noActivityTimeout,\n      disconnectDelay: this.disconnectDelay\n    }\n  }\n}\n\nBrowser.factory = function (\n  id, fullName, /* capturedBrowsers */ collection, emitter, socket, timer,\n  /* config.browserDisconnectTimeout */ disconnectDelay,\n  /* config.browserNoActivityTimeout */ noActivityTimeout,\n  /* config.singleRun */ singleRun,\n  /* config.client */ clientConfig) {\n  return new Browser(id, fullName, collection, emitter, socket, timer,\n    disconnectDelay, noActivityTimeout, singleRun, clientConfig)\n}\n\nBrowser.STATE_CONNECTED = CONNECTED\nBrowser.STATE_CONFIGURING = CONFIGURING\nBrowser.STATE_EXECUTING = EXECUTING\nBrowser.STATE_EXECUTING_DISCONNECTED = EXECUTING_DISCONNECTED\nBrowser.STATE_DISCONNECTED = DISCONNECTED\n\nmodule.exports = Browser\n"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAMG,SAAS,GAAG,WAAlB,C,CAA8B;;AAC9B,MAAMC,WAAW,GAAG,aAApB,C,CAAkC;;AAClC,MAAMC,SAAS,GAAG,WAAlB,C,CAA8B;;AAC9B,MAAMC,sBAAsB,GAAG,wBAA/B,C,CAAwD;;AACxD,MAAMC,YAAY,GAAG,cAArB,C,CAAoC;;AAEpC,MAAMC,OAAN,CAAc;EACZC,WAAW,CAAEC,EAAF,EAAMC,QAAN,EAAgBC,UAAhB,EAA4BC,OAA5B,EAAqCC,MAArC,EAA6CC,KAA7C,EAAoDC,eAApD,EACTC,iBADS,EACUC,SADV,EACqBC,YADrB,EACmC;IAC5C,KAAKT,EAAL,GAAUA,EAAV;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKS,IAAL,GAAYnB,MAAM,CAACoB,sBAAP,CAA8BV,QAA9B,CAAZ;IACA,KAAKW,UAAL,GAAkB,IAAIvB,aAAJ,EAAlB;IACA,KAAKwB,gBAAL,GAAwB,CAAxB;IACA,KAAKC,aAAL,GAAqB,CAACV,MAAD,CAArB;IACA,KAAKG,iBAAL,GAAyBA,iBAAzB;IACA,KAAKC,SAAL,GAAiBA,SAAjB;IACA,KAAKC,YAAL,GAAoBA,YAApB;IACA,KAAKP,UAAL,GAAkBA,UAAlB;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,eAAL,GAAuBA,eAAvB;IAEA,KAAKS,GAAL,GAAWvB,MAAM,CAACwB,MAAP,CAAc,KAAKN,IAAnB,CAAX;IAEA,KAAKO,mBAAL,GAA2B,IAA3B;IACA,KAAKC,iBAAL,GAAyB,IAAzB;IACA,KAAKC,QAAL,CAAc1B,SAAd;EACD;;EAED2B,IAAI,GAAI;IACN,KAAKL,GAAL,CAASM,IAAT,CAAe,uBAAsB,KAAKjB,MAAL,CAAYJ,EAAG,YAAW,KAAKA,EAAG,EAAvE;IAEA,KAAKsB,gBAAL,CAAsB,KAAKlB,MAA3B;IACA,KAAKF,UAAL,CAAgBqB,GAAhB,CAAoB,IAApB;IACA,KAAKpB,OAAL,CAAaqB,IAAb,CAAkB,kBAAlB,EAAsC,IAAtC;EACD;;EAEDL,QAAQ,CAAEM,OAAF,EAAW;IACjB,KAAKV,GAAL,CAASW,KAAT,CAAgB,GAAE,KAAKC,KAAM,OAAMF,OAAQ,EAA3C;IACA,KAAKE,KAAL,GAAaF,OAAb;EACD;;EAEDG,YAAY,CAAEC,KAAF,EAAS;IACnB,IAAI,KAAKC,cAAL,EAAJ,EAA2B;MACzB,KAAKlB,UAAL,CAAgBiB,KAAhB,GAAwB,IAAxB;IACD;;IACD,KAAK1B,OAAL,CAAaqB,IAAb,CAAkB,eAAlB,EAAmC,IAAnC,EAAyCK,KAAzC;IACA,KAAKE,wBAAL;EACD;;EAEDC,MAAM,CAAEX,IAAF,EAAQ;IACZ,IAAI9B,MAAM,CAAC0C,SAAP,CAAiBZ,IAAI,CAACa,IAAtB,CAAJ,EAAiC;MAC/B,KAAK/B,OAAL,CAAaqB,IAAb,CAAkB,aAAlB,EAAiC,IAAjC,EAAuCH,IAAI,CAACa,IAA5C,EAAkD,MAAlD;IACD;;IAED,IAAI3C,MAAM,CAAC0C,SAAP,CAAiBZ,IAAI,CAACN,GAAtB,CAAJ,EAAgC;MAC9B,KAAKZ,OAAL,CAAaqB,IAAb,CAAkB,aAAlB,EAAiC,IAAjC,EAAuCH,IAAI,CAACN,GAA5C,EAAiDM,IAAI,CAACc,IAAtD;IACD,CAFD,MAEO,IAAI5C,MAAM,CAAC0C,SAAP,CAAiBZ,IAAI,CAACe,KAAtB,CAAJ,EAAkC;MACvC,IAAI,KAAKT,KAAL,KAAehC,SAAnB,EAA8B;QAC5B,KAAKiB,UAAL,CAAgBwB,KAAhB,GAAwBf,IAAI,CAACe,KAA7B;MACD;IACF,CAJM,MAIA,IAAI,CAAC7C,MAAM,CAAC0C,SAAP,CAAiBZ,IAAI,CAACa,IAAtB,CAAL,EAAkC;MACvC,KAAK/B,OAAL,CAAaqB,IAAb,CAAkB,cAAlB,EAAkC,IAAlC,EAAwCH,IAAxC;IACD;;IAED,KAAKU,wBAAL;EACD;;EAEDM,OAAO,CAAEhB,IAAF,EAAQ;IACb,IAAIA,IAAI,CAACe,KAAL,KAAe,IAAnB,EAAyB;MACvB,KAAKrB,GAAL,CAASuB,IAAT,CAAc,+CAAd;IACD;;IAED,KAAK1B,UAAL,GAAkB,IAAIvB,aAAJ,CAAkBgC,IAAI,CAACe,KAAvB,CAAlB;IACA,KAAKjB,QAAL,CAAcxB,SAAd;IACA,KAAKQ,OAAL,CAAaqB,IAAb,CAAkB,eAAlB,EAAmC,IAAnC,EAAyCH,IAAzC;IACA,KAAKU,wBAAL;EACD;;EAEDQ,UAAU,CAAEC,MAAF,EAAU;IAClB,IAAI,KAAKV,cAAL,EAAJ,EAA2B;MACzB,KAAKX,QAAL,CAAc1B,SAAd;MACA,KAAKmB,UAAL,CAAgB6B,YAAhB;MAEA,KAAKtC,OAAL,CAAaqB,IAAb,CAAkB,iBAAlB,EAAqC,KAAKtB,UAA1C;MACA,KAAKC,OAAL,CAAaqB,IAAb,CAAkB,kBAAlB,EAAsC,IAAtC,EAA4CgB,MAA5C;MAEA,KAAKE,sBAAL;IACD;EACF;;EAEDC,kBAAkB,CAAEC,MAAF,EAAUC,kBAAV,EAA8B;IAC9CtD,MAAM,CAACuD,WAAP,CAAmB,KAAKhC,aAAxB,EAAuC+B,kBAAvC;;IACA,IAAI,KAAK/B,aAAL,CAAmBiC,MAAvB,EAA+B;MAC7B,KAAKhC,GAAL,CAASW,KAAT,CAAgB,gBAAemB,kBAAkB,CAAC7C,EAAG,gBAAe,KAAKgD,mBAAL,EAA2B,EAA/F;MACA;IACD;;IAED,IAAI,KAAKC,WAAL,EAAJ,EAAwB;MACtB,KAAKC,UAAL,CAAiB,6CAA4CN,MAAO,GAApE;IACD,CAFD,MAEO,IAAI,CAAClD,WAAD,EAAcC,SAAd,EAAyBwD,QAAzB,CAAkC,KAAKxB,KAAvC,CAAJ,EAAmD;MACxD,KAAKZ,GAAL,CAASW,KAAT,CAAgB,oCAAmC,KAAKpB,eAAgB,sBAAxE;MACA,KAAKa,QAAL,CAAcvB,sBAAd;MAEA,KAAKsB,iBAAL,GAAyB,KAAKb,KAAL,CAAW+C,UAAX,CAAsB,MAAM;QACnD,KAAKxC,UAAL,CAAgB6B,YAAhB;QACA,KAAK7B,UAAL,CAAgByC,YAAhB,GAA+B,IAA/B;QACA,KAAKH,UAAL,CAAiB,sCAAqC,KAAK5C,eAAgB,OAAMsC,MAAO,GAAxF;QACA,KAAKzC,OAAL,CAAaqB,IAAb,CAAkB,kBAAlB,EAAsC,IAAtC;MACD,CALwB,EAKtB,KAAKlB,eALiB,CAAzB;MAOA,KAAKoC,sBAAL;IACD;EACF;;EAEDY,SAAS,CAAEC,SAAF,EAAaC,mBAAb,EAAkC;IACzC,IAAI,CAACA,mBAAD,IAAwB,KAAK7B,KAAL,KAAe9B,YAA3C,EAAyD;MACvD,KAAKkB,GAAL,CAASM,IAAT,CAAe,2CAA0CkC,SAAS,CAACvD,EAAG,YAAW,KAAKA,EAAG,GAAzF;MACA,KAAKmB,QAAL,CAAc1B,SAAd,EAFuD,CAIvD;MACA;;MACA,KAAKU,OAAL,CAAaqB,IAAb,CAAkB,iBAAlB,EAAqC,KAAKtB,UAA1C,EANuD,CAOvD;;MACA,KAAKC,OAAL,CAAaqB,IAAb,CAAkB,kBAAlB,EAAsC,IAAtC,EARuD,CASvD;;MACA,IAAI,KAAKhB,SAAT,EAAoB;QAClB,KAAKiD,OAAL;MACD;IACF,CAbD,MAaO,IAAI,KAAK9B,KAAL,KAAe/B,sBAAnB,EAA2C;MAChD,KAAKmB,GAAL,CAASW,KAAT,CAAe,2EACZ,aAAY6B,SAAS,CAACvD,EAAG,GAD5B;MAEA,KAAKmB,QAAL,CAAcxB,SAAd;IACD,CAJM,MAIA,IAAI,CAACF,SAAD,EAAYC,WAAZ,EAAyBC,SAAzB,EAAoCwD,QAApC,CAA6C,KAAKxB,KAAlD,CAAJ,EAA8D;MACnE,KAAKZ,GAAL,CAASW,KAAT,CAAgB,2BAA0B6B,SAAS,CAACvD,EAAG,iBAAxC,GACZ,GAAE,KAAKgD,mBAAL,EAA2B,GADhC;IAED;;IAED,IAAI,CAAC,KAAKlC,aAAL,CAAmB4C,IAAnB,CAAyBC,CAAD,IAAOA,CAAC,CAAC3D,EAAF,KAASuD,SAAS,CAACvD,EAAlD,CAAL,EAA4D;MAC1D,KAAKc,aAAL,CAAmB8C,IAAnB,CAAwBL,SAAxB;MACA,KAAKjC,gBAAL,CAAsBiC,SAAtB;IACD;;IAED,IAAI,KAAKrC,iBAAT,EAA4B;MAC1B,KAAKb,KAAL,CAAWwD,YAAX,CAAwB,KAAK3C,iBAA7B;IACD;;IAED,KAAKa,wBAAL;EACD;;EAED+B,QAAQ,CAAEtB,MAAF,EAAU;IAChB,IAAIuB,KAAK,CAACC,OAAN,CAAcxB,MAAd,CAAJ,EAA2B;MACzBA,MAAM,CAACyB,OAAP,CAAe,KAAKH,QAApB,EAA8B,IAA9B;IACD,CAFD,MAEO,IAAI,KAAKhC,cAAL,EAAJ,EAA2B;MAChC,KAAKlB,UAAL,CAAgBW,GAAhB,CAAoBiB,MAApB;MACA,KAAKrC,OAAL,CAAaqB,IAAb,CAAkB,eAAlB,EAAmC,IAAnC,EAAyCgB,MAAzC;IACD;;IACD,KAAKT,wBAAL;EACD;;EAED0B,OAAO,GAAI;IACT,KAAK3C,aAAL,CAAmBmD,OAAnB,CAA4B7D,MAAD,IAAYA,MAAM,CAACoB,IAAP,CAAY,SAAZ,EAAuB,KAAKf,YAA5B,CAAvC;IACA,KAAKU,QAAL,CAAczB,WAAd;IACA,KAAKqC,wBAAL;EACD;;EAEDiB,mBAAmB,GAAI;IACrB,OAAO,KAAKlC,aAAL,CAAmBoD,GAAnB,CAAwBP,CAAD,IAAOA,CAAC,CAAC3D,EAAhC,EAAoCmE,IAApC,CAAyC,IAAzC,CAAP;EACD;;EAEDjB,UAAU,CAAEN,MAAF,EAAU;IAClB,KAAK7B,GAAL,CAASuB,IAAT,CAAe,iBAAgB,KAAKzB,gBAAiB,WAAU+B,MAAM,IAAI,EAAG,EAA5E;IACA,KAAK/B,gBAAL;IACA,KAAKV,OAAL,CAAaqB,IAAb,CAAkB,eAAlB,EAAmC,IAAnC,EAA0C,gBAAeoB,MAAM,IAAI,EAAG,EAAtE;IACA,KAAKwB,MAAL;EACD;;EAEDA,MAAM,GAAI;IACR,KAAKjD,QAAL,CAActB,YAAd;IACA,KAAKK,UAAL,CAAgBkE,MAAhB,CAAuB,IAAvB;EACD;;EAEDrC,wBAAwB,GAAI;IAC1B,IAAI,KAAKxB,iBAAT,EAA4B;MAC1B,KAAKmC,sBAAL;MAEA,KAAKzB,mBAAL,GAA2B,KAAKZ,KAAL,CAAW+C,UAAX,CAAsB,MAAM;QACrD,KAAKxC,UAAL,CAAgB6B,YAAhB;QACA,KAAK7B,UAAL,CAAgByC,YAAhB,GAA+B,IAA/B;QACA,KAAKH,UAAL,CAAiB,2BAA0B,KAAK3C,iBAAkB,MAAlE;QACA,KAAKJ,OAAL,CAAaqB,IAAb,CAAkB,kBAAlB,EAAsC,IAAtC;MACD,CAL0B,EAKxB,KAAKjB,iBALmB,CAA3B;IAMD;EACF;;EAEDmC,sBAAsB,GAAI;IACxB,IAAI,KAAKnC,iBAAL,IAA0B,KAAKU,mBAAnC,EAAwD;MACtD,KAAKZ,KAAL,CAAWwD,YAAX,CAAwB,KAAK5C,mBAA7B;MACA,KAAKA,mBAAL,GAA2B,IAA3B;IACD;EACF;;EAEDK,gBAAgB,CAAElB,MAAF,EAAU;IACxB;IACAA,MAAM,CAACiE,EAAP,CAAU,YAAV,EAAyBzB,MAAD,IAAY,KAAKD,kBAAL,CAAwBC,MAAxB,EAAgCxC,MAAhC,CAApC;IACAA,MAAM,CAACiE,EAAP,CAAU,OAAV,EAAoBhD,IAAD,IAAU,KAAKgB,OAAL,CAAahB,IAAb,CAA7B;IACAjB,MAAM,CAACiE,EAAP,CAAU,aAAV,EAA0BxC,KAAD,IAAW,KAAKD,YAAL,CAAkBC,KAAlB,CAApC;IACAzB,MAAM,CAACiE,EAAP,CAAU,UAAV,EAAuB7B,MAAD,IAAY,KAAKD,UAAL,CAAgBC,MAAhB,CAAlC;IACApC,MAAM,CAACiE,EAAP,CAAU,MAAV,EAAmBhD,IAAD,IAAU,KAAKW,MAAL,CAAYX,IAAZ,CAA5B;IACAjB,MAAM,CAACiE,EAAP,CAAU,QAAV,EAAqB7B,MAAD,IAAY,KAAKsB,QAAL,CAActB,MAAd,CAAhC;EACD;;EAEDS,WAAW,GAAI;IACb,OAAO,KAAKtB,KAAL,KAAelC,SAAtB;EACD;;EAEDqC,cAAc,GAAI;IAChB,OAAO,CAAC,KAAKmB,WAAL,EAAR;EACD;;EAEDqB,SAAS,GAAI;IACX,OAAO;MACLtE,EAAE,EAAE,KAAKA,EADJ;MAELU,IAAI,EAAE,KAAKA,IAFN;MAGLuC,WAAW,EAAE,KAAKtB,KAAL,KAAelC;IAHvB,CAAP;EAKD;;EAED8E,QAAQ,GAAI;IACV,OAAO,KAAK7D,IAAZ;EACD;;EAED8D,MAAM,GAAI;IACR,OAAO;MACLxE,EAAE,EAAE,KAAKA,EADJ;MAELC,QAAQ,EAAE,KAAKA,QAFV;MAGLS,IAAI,EAAE,KAAKA,IAHN;MAILiB,KAAK,EAAE,KAAKA,KAJP;MAKLf,UAAU,EAAE,KAAKA,UALZ;MAMLC,gBAAgB,EAAE,KAAKA,gBANlB;MAOLN,iBAAiB,EAAE,KAAKA,iBAPnB;MAQLD,eAAe,EAAE,KAAKA;IARjB,CAAP;EAUD;;AA/OW;;AAkPdR,OAAO,CAAC2E,OAAR,GAAkB,UAChBzE,EADgB,EACZC,QADY;AACF;AAAuBC,UADrB,EACiCC,OADjC,EAC0CC,MAD1C,EACkDC,KADlD;AAEhB;AAAsCC,eAFtB;AAGhB;AAAsCC,iBAHtB;AAIhB;AAAuBC,SAJP;AAKhB;AAAoBC,YALJ,EAKkB;EAClC,OAAO,IAAIX,OAAJ,CAAYE,EAAZ,EAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,OAAtC,EAA+CC,MAA/C,EAAuDC,KAAvD,EACLC,eADK,EACYC,iBADZ,EAC+BC,SAD/B,EAC0CC,YAD1C,CAAP;AAED,CARD;;AAUAX,OAAO,CAAC4E,eAAR,GAA0BjF,SAA1B;AACAK,OAAO,CAAC6E,iBAAR,GAA4BjF,WAA5B;AACAI,OAAO,CAAC8E,eAAR,GAA0BjF,SAA1B;AACAG,OAAO,CAAC+E,4BAAR,GAAuCjF,sBAAvC;AACAE,OAAO,CAACgF,kBAAR,GAA6BjF,YAA7B;AAEAkF,MAAM,CAACC,OAAP,GAAiBlF,OAAjB"},"metadata":{},"sourceType":"script"}