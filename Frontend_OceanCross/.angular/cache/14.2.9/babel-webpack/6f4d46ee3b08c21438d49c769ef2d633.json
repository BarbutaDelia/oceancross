{"ast":null,"code":"'use strict';\n\nconst querystring = require('querystring');\n\nconst common = require('./common');\n\nconst log = require('../logger').create('middleware:source-files');\n\nfunction findByPath(files, path) {\n  return Array.from(files).find(file => file.path === path);\n}\n\nfunction composeUrl(url, basePath, urlRoot) {\n  return url.replace(urlRoot, '/').replace(/\\?.*$/, '').replace(/^\\/absolute/, '').replace(/^\\/base/, basePath);\n} // Source Files middleware is responsible for serving all the source files under the test.\n\n\nfunction createSourceFilesMiddleware(filesPromise, serveFile, basePath, urlRoot) {\n  return function (request, response, next) {\n    const requestedFilePath = composeUrl(request.url, basePath, urlRoot); // When a path contains HTML-encoded characters (e.g %2F used by Jenkins for branches with /)\n\n    const requestedFilePathUnescaped = composeUrl(querystring.unescape(request.url), basePath, urlRoot);\n    request.pause();\n    log.debug(`Requesting ${request.url}`);\n    log.debug(`Fetching ${requestedFilePath}`);\n    return filesPromise.then(function (files) {\n      // TODO(vojta): change served to be a map rather then an array\n      const file = findByPath(files.served, requestedFilePath) || findByPath(files.served, requestedFilePathUnescaped);\n      const rangeHeader = request.headers.range;\n\n      if (file) {\n        const acceptEncodingHeader = request.headers['accept-encoding'];\n        const matchedEncoding = Object.keys(file.encodings).find(encoding => new RegExp(`(^|.*, ?)${encoding}(,|$)`).test(acceptEncodingHeader));\n        const content = file.encodings[matchedEncoding] || file.content;\n        serveFile(file.contentPath || file.path, rangeHeader, response, function () {\n          if (/\\?\\w+/.test(request.url)) {\n            common.setHeavyCacheHeaders(response); // files with timestamps - cache one year, rely on timestamps\n          } else {\n            common.setNoCacheHeaders(response); // without timestamps - no cache (debug)\n          }\n\n          if (matchedEncoding) {\n            response.setHeader('Content-Encoding', matchedEncoding);\n          }\n        }, content, file.doNotCache);\n      } else {\n        next();\n      }\n\n      request.resume();\n    });\n  };\n}\n\ncreateSourceFilesMiddleware.$inject = ['filesPromise', 'serveFile', 'config.basePath', 'config.urlRoot'];\nexports.create = createSourceFilesMiddleware;","map":{"version":3,"names":["querystring","require","common","log","create","findByPath","files","path","Array","from","find","file","composeUrl","url","basePath","urlRoot","replace","createSourceFilesMiddleware","filesPromise","serveFile","request","response","next","requestedFilePath","requestedFilePathUnescaped","unescape","pause","debug","then","served","rangeHeader","headers","range","acceptEncodingHeader","matchedEncoding","Object","keys","encodings","encoding","RegExp","test","content","contentPath","setHeavyCacheHeaders","setNoCacheHeaders","setHeader","doNotCache","resume","$inject","exports"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/karma/lib/middleware/source_files.js"],"sourcesContent":["'use strict'\n\nconst querystring = require('querystring')\nconst common = require('./common')\n\nconst log = require('../logger').create('middleware:source-files')\n\nfunction findByPath (files, path) {\n  return Array.from(files).find((file) => file.path === path)\n}\n\nfunction composeUrl (url, basePath, urlRoot) {\n  return url\n    .replace(urlRoot, '/')\n    .replace(/\\?.*$/, '')\n    .replace(/^\\/absolute/, '')\n    .replace(/^\\/base/, basePath)\n}\n\n// Source Files middleware is responsible for serving all the source files under the test.\nfunction createSourceFilesMiddleware (filesPromise, serveFile, basePath, urlRoot) {\n  return function (request, response, next) {\n    const requestedFilePath = composeUrl(request.url, basePath, urlRoot)\n    // When a path contains HTML-encoded characters (e.g %2F used by Jenkins for branches with /)\n    const requestedFilePathUnescaped = composeUrl(querystring.unescape(request.url), basePath, urlRoot)\n\n    request.pause()\n\n    log.debug(`Requesting ${request.url}`)\n    log.debug(`Fetching ${requestedFilePath}`)\n\n    return filesPromise.then(function (files) {\n      // TODO(vojta): change served to be a map rather then an array\n      const file = findByPath(files.served, requestedFilePath) || findByPath(files.served, requestedFilePathUnescaped)\n      const rangeHeader = request.headers.range\n\n      if (file) {\n        const acceptEncodingHeader = request.headers['accept-encoding']\n        const matchedEncoding = Object.keys(file.encodings).find(\n          (encoding) => new RegExp(`(^|.*, ?)${encoding}(,|$)`).test(acceptEncodingHeader)\n        )\n        const content = file.encodings[matchedEncoding] || file.content\n\n        serveFile(file.contentPath || file.path, rangeHeader, response, function () {\n          if (/\\?\\w+/.test(request.url)) {\n            common.setHeavyCacheHeaders(response) // files with timestamps - cache one year, rely on timestamps\n          } else {\n            common.setNoCacheHeaders(response) // without timestamps - no cache (debug)\n          }\n          if (matchedEncoding) {\n            response.setHeader('Content-Encoding', matchedEncoding)\n          }\n        }, content, file.doNotCache)\n      } else {\n        next()\n      }\n\n      request.resume()\n    })\n  }\n}\n\ncreateSourceFilesMiddleware.$inject = [\n  'filesPromise', 'serveFile', 'config.basePath', 'config.urlRoot'\n]\n\nexports.create = createSourceFilesMiddleware\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}