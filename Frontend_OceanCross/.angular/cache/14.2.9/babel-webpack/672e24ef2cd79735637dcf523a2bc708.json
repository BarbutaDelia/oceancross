{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadTranslations = exports.configureI18nBuild = exports.createI18nOptions = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst fs_1 = __importDefault(require(\"fs\"));\n\nconst module_1 = __importDefault(require(\"module\"));\n\nconst os_1 = __importDefault(require(\"os\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst schema_1 = require(\"../builders/browser/schema\");\n\nconst read_tsconfig_1 = require(\"../utils/read-tsconfig\");\n\nconst load_translations_1 = require(\"./load-translations\");\n/**\n * The base module location used to search for locale specific data.\n */\n\n\nconst LOCALE_DATA_BASE_MODULE = '@angular/common/locales/global';\n\nfunction normalizeTranslationFileOption(option, locale, expectObjectInError) {\n  if (typeof option === 'string') {\n    return [option];\n  }\n\n  if (Array.isArray(option) && option.every(element => typeof element === 'string')) {\n    return option;\n  }\n\n  let errorMessage = `Project i18n locales translation field value for '${locale}' is malformed. `;\n\n  if (expectObjectInError) {\n    errorMessage += 'Expected a string, array of strings, or object.';\n  } else {\n    errorMessage += 'Expected a string or array of strings.';\n  }\n\n  throw new Error(errorMessage);\n}\n\nfunction createI18nOptions(metadata, inline) {\n  if (metadata.i18n !== undefined && !core_1.json.isJsonObject(metadata.i18n)) {\n    throw new Error('Project i18n field is malformed. Expected an object.');\n  }\n\n  metadata = metadata.i18n || {};\n  const i18n = {\n    inlineLocales: new Set(),\n    // en-US is the default locale added to Angular applications (https://angular.io/guide/i18n#i18n-pipes)\n    sourceLocale: 'en-US',\n    locales: {},\n\n    get shouldInline() {\n      return this.inlineLocales.size > 0;\n    }\n\n  };\n  let rawSourceLocale;\n  let rawSourceLocaleBaseHref;\n\n  if (core_1.json.isJsonObject(metadata.sourceLocale)) {\n    rawSourceLocale = metadata.sourceLocale.code;\n\n    if (metadata.sourceLocale.baseHref !== undefined && typeof metadata.sourceLocale.baseHref !== 'string') {\n      throw new Error('Project i18n sourceLocale baseHref field is malformed. Expected a string.');\n    }\n\n    rawSourceLocaleBaseHref = metadata.sourceLocale.baseHref;\n  } else {\n    rawSourceLocale = metadata.sourceLocale;\n  }\n\n  if (rawSourceLocale !== undefined) {\n    if (typeof rawSourceLocale !== 'string') {\n      throw new Error('Project i18n sourceLocale field is malformed. Expected a string.');\n    }\n\n    i18n.sourceLocale = rawSourceLocale;\n    i18n.hasDefinedSourceLocale = true;\n  }\n\n  i18n.locales[i18n.sourceLocale] = {\n    files: [],\n    baseHref: rawSourceLocaleBaseHref\n  };\n\n  if (metadata.locales !== undefined && !core_1.json.isJsonObject(metadata.locales)) {\n    throw new Error('Project i18n locales field is malformed. Expected an object.');\n  } else if (metadata.locales) {\n    for (const [locale, options] of Object.entries(metadata.locales)) {\n      let translationFiles;\n      let baseHref;\n\n      if (core_1.json.isJsonObject(options)) {\n        translationFiles = normalizeTranslationFileOption(options.translation, locale, false);\n\n        if (typeof options.baseHref === 'string') {\n          baseHref = options.baseHref;\n        }\n      } else {\n        translationFiles = normalizeTranslationFileOption(options, locale, true);\n      }\n\n      if (locale === i18n.sourceLocale) {\n        throw new Error(`An i18n locale ('${locale}') cannot both be a source locale and provide a translation.`);\n      }\n\n      i18n.locales[locale] = {\n        files: translationFiles.map(file => ({\n          path: file\n        })),\n        baseHref\n      };\n    }\n  }\n\n  if (inline === true) {\n    i18n.inlineLocales.add(i18n.sourceLocale);\n    Object.keys(i18n.locales).forEach(locale => i18n.inlineLocales.add(locale));\n  } else if (inline) {\n    for (const locale of inline) {\n      if (!i18n.locales[locale] && i18n.sourceLocale !== locale) {\n        throw new Error(`Requested locale '${locale}' is not defined for the project.`);\n      }\n\n      i18n.inlineLocales.add(locale);\n    }\n  }\n\n  return i18n;\n}\n\nexports.createI18nOptions = createI18nOptions;\n\nfunction configureI18nBuild(_x, _x2) {\n  return _configureI18nBuild.apply(this, arguments);\n}\n\nfunction _configureI18nBuild() {\n  _configureI18nBuild = _asyncToGenerator(function* (context, options) {\n    if (!context.target) {\n      throw new Error('The builder requires a target.');\n    }\n\n    const buildOptions = { ...options\n    };\n    const tsConfig = yield (0, read_tsconfig_1.readTsconfig)(buildOptions.tsConfig, context.workspaceRoot);\n    const metadata = yield context.getProjectMetadata(context.target);\n    const i18n = createI18nOptions(metadata, buildOptions.localize); // No additional processing needed if no inlining requested and no source locale defined.\n\n    if (!i18n.shouldInline && !i18n.hasDefinedSourceLocale) {\n      return {\n        buildOptions,\n        i18n\n      };\n    }\n\n    const projectRoot = path_1.default.join(context.workspaceRoot, metadata.root || ''); // The trailing slash is required to signal that the path is a directory and not a file.\n\n    const projectRequire = module_1.default.createRequire(projectRoot + '/');\n\n    const localeResolver = locale => projectRequire.resolve(path_1.default.join(LOCALE_DATA_BASE_MODULE, locale)); // Load locale data and translations (if present)\n\n\n    let loader;\n    const usedFormats = new Set();\n\n    for (const [locale, desc] of Object.entries(i18n.locales)) {\n      if (!i18n.inlineLocales.has(locale) && locale !== i18n.sourceLocale) {\n        continue;\n      }\n\n      let localeDataPath = findLocaleDataPath(locale, localeResolver);\n\n      if (!localeDataPath) {\n        const [first] = locale.split('-');\n\n        if (first) {\n          localeDataPath = findLocaleDataPath(first.toLowerCase(), localeResolver);\n\n          if (localeDataPath) {\n            context.logger.warn(`Locale data for '${locale}' cannot be found. Using locale data for '${first}'.`);\n          }\n        }\n      }\n\n      if (!localeDataPath) {\n        context.logger.warn(`Locale data for '${locale}' cannot be found. No locale data will be included for this locale.`);\n      } else {\n        desc.dataPath = localeDataPath;\n      }\n\n      if (!desc.files.length) {\n        continue;\n      }\n\n      loader !== null && loader !== void 0 ? loader : loader = yield (0, load_translations_1.createTranslationLoader)();\n      loadTranslations(locale, desc, context.workspaceRoot, loader, {\n        warn(message) {\n          context.logger.warn(message);\n        },\n\n        error(message) {\n          throw new Error(message);\n        }\n\n      }, usedFormats, buildOptions.i18nDuplicateTranslation);\n\n      if (usedFormats.size > 1 && tsConfig.options.enableI18nLegacyMessageIdFormat !== false) {\n        // This limitation is only for legacy message id support (defaults to true as of 9.0)\n        throw new Error('Localization currently only supports using one type of translation file format for the entire application.');\n      }\n    } // If inlining store the output in a temporary location to facilitate post-processing\n\n\n    if (i18n.shouldInline) {\n      // TODO: we should likely save these in the .angular directory in the next major version.\n      // We'd need to do a migration to add the temp directory to gitignore.\n      const tempPath = fs_1.default.mkdtempSync(path_1.default.join(fs_1.default.realpathSync(os_1.default.tmpdir()), 'angular-cli-i18n-'));\n      buildOptions.outputPath = tempPath;\n      process.on('exit', () => {\n        try {\n          fs_1.default.rmSync(tempPath, {\n            force: true,\n            recursive: true,\n            maxRetries: 3\n          });\n        } catch {}\n      });\n    }\n\n    return {\n      buildOptions,\n      i18n\n    };\n  });\n  return _configureI18nBuild.apply(this, arguments);\n}\n\nexports.configureI18nBuild = configureI18nBuild;\n\nfunction findLocaleDataPath(locale, resolver) {\n  // Remove private use subtags\n  const scrubbedLocale = locale.replace(/-x(-[a-zA-Z0-9]{1,8})+$/, '');\n\n  try {\n    return resolver(scrubbedLocale);\n  } catch {\n    // fallback to known existing en-US locale data as of 14.0\n    return scrubbedLocale === 'en-US' ? findLocaleDataPath('en', resolver) : null;\n  }\n}\n\nfunction loadTranslations(locale, desc, workspaceRoot, loader, logger, usedFormats, duplicateTranslation) {\n  let translations = undefined;\n\n  for (const file of desc.files) {\n    const loadResult = loader(path_1.default.join(workspaceRoot, file.path));\n\n    for (const diagnostics of loadResult.diagnostics.messages) {\n      if (diagnostics.type === 'error') {\n        logger.error(`Error parsing translation file '${file.path}': ${diagnostics.message}`);\n      } else {\n        logger.warn(`WARNING [${file.path}]: ${diagnostics.message}`);\n      }\n    }\n\n    if (loadResult.locale !== undefined && loadResult.locale !== locale) {\n      logger.warn(`WARNING [${file.path}]: File target locale ('${loadResult.locale}') does not match configured locale ('${locale}')`);\n    }\n\n    usedFormats === null || usedFormats === void 0 ? void 0 : usedFormats.add(loadResult.format);\n    file.format = loadResult.format;\n    file.integrity = loadResult.integrity;\n\n    if (translations) {\n      // Merge translations\n      for (const [id, message] of Object.entries(loadResult.translations)) {\n        if (translations[id] !== undefined) {\n          const duplicateTranslationMessage = `[${file.path}]: Duplicate translations for message '${id}' when merging.`;\n\n          switch (duplicateTranslation) {\n            case schema_1.I18NTranslation.Ignore:\n              break;\n\n            case schema_1.I18NTranslation.Error:\n              logger.error(`ERROR ${duplicateTranslationMessage}`);\n              break;\n\n            case schema_1.I18NTranslation.Warning:\n            default:\n              logger.warn(`WARNING ${duplicateTranslationMessage}`);\n              break;\n          }\n        }\n\n        translations[id] = message;\n      }\n    } else {\n      // First or only translation file\n      translations = loadResult.translations;\n    }\n  }\n\n  desc.translation = translations;\n}\n\nexports.loadTranslations = loadTranslations;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","loadTranslations","configureI18nBuild","createI18nOptions","core_1","require","fs_1","module_1","os_1","path_1","schema_1","read_tsconfig_1","load_translations_1","LOCALE_DATA_BASE_MODULE","normalizeTranslationFileOption","option","locale","expectObjectInError","Array","isArray","every","element","errorMessage","Error","metadata","inline","i18n","undefined","json","isJsonObject","inlineLocales","Set","sourceLocale","locales","shouldInline","size","rawSourceLocale","rawSourceLocaleBaseHref","code","baseHref","hasDefinedSourceLocale","files","options","entries","translationFiles","translation","map","file","path","add","keys","forEach","context","target","buildOptions","tsConfig","readTsconfig","workspaceRoot","getProjectMetadata","localize","projectRoot","default","join","root","projectRequire","createRequire","localeResolver","resolve","loader","usedFormats","desc","has","localeDataPath","findLocaleDataPath","first","split","toLowerCase","logger","warn","dataPath","length","createTranslationLoader","message","error","i18nDuplicateTranslation","enableI18nLegacyMessageIdFormat","tempPath","mkdtempSync","realpathSync","tmpdir","outputPath","process","on","rmSync","force","recursive","maxRetries","resolver","scrubbedLocale","replace","duplicateTranslation","translations","loadResult","diagnostics","messages","type","format","integrity","id","duplicateTranslationMessage","I18NTranslation","Ignore","Warning"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@angular-devkit/build-angular/src/utils/i18n-options.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadTranslations = exports.configureI18nBuild = exports.createI18nOptions = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs_1 = __importDefault(require(\"fs\"));\nconst module_1 = __importDefault(require(\"module\"));\nconst os_1 = __importDefault(require(\"os\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst schema_1 = require(\"../builders/browser/schema\");\nconst read_tsconfig_1 = require(\"../utils/read-tsconfig\");\nconst load_translations_1 = require(\"./load-translations\");\n/**\n * The base module location used to search for locale specific data.\n */\nconst LOCALE_DATA_BASE_MODULE = '@angular/common/locales/global';\nfunction normalizeTranslationFileOption(option, locale, expectObjectInError) {\n    if (typeof option === 'string') {\n        return [option];\n    }\n    if (Array.isArray(option) && option.every((element) => typeof element === 'string')) {\n        return option;\n    }\n    let errorMessage = `Project i18n locales translation field value for '${locale}' is malformed. `;\n    if (expectObjectInError) {\n        errorMessage += 'Expected a string, array of strings, or object.';\n    }\n    else {\n        errorMessage += 'Expected a string or array of strings.';\n    }\n    throw new Error(errorMessage);\n}\nfunction createI18nOptions(metadata, inline) {\n    if (metadata.i18n !== undefined && !core_1.json.isJsonObject(metadata.i18n)) {\n        throw new Error('Project i18n field is malformed. Expected an object.');\n    }\n    metadata = metadata.i18n || {};\n    const i18n = {\n        inlineLocales: new Set(),\n        // en-US is the default locale added to Angular applications (https://angular.io/guide/i18n#i18n-pipes)\n        sourceLocale: 'en-US',\n        locales: {},\n        get shouldInline() {\n            return this.inlineLocales.size > 0;\n        },\n    };\n    let rawSourceLocale;\n    let rawSourceLocaleBaseHref;\n    if (core_1.json.isJsonObject(metadata.sourceLocale)) {\n        rawSourceLocale = metadata.sourceLocale.code;\n        if (metadata.sourceLocale.baseHref !== undefined &&\n            typeof metadata.sourceLocale.baseHref !== 'string') {\n            throw new Error('Project i18n sourceLocale baseHref field is malformed. Expected a string.');\n        }\n        rawSourceLocaleBaseHref = metadata.sourceLocale.baseHref;\n    }\n    else {\n        rawSourceLocale = metadata.sourceLocale;\n    }\n    if (rawSourceLocale !== undefined) {\n        if (typeof rawSourceLocale !== 'string') {\n            throw new Error('Project i18n sourceLocale field is malformed. Expected a string.');\n        }\n        i18n.sourceLocale = rawSourceLocale;\n        i18n.hasDefinedSourceLocale = true;\n    }\n    i18n.locales[i18n.sourceLocale] = {\n        files: [],\n        baseHref: rawSourceLocaleBaseHref,\n    };\n    if (metadata.locales !== undefined && !core_1.json.isJsonObject(metadata.locales)) {\n        throw new Error('Project i18n locales field is malformed. Expected an object.');\n    }\n    else if (metadata.locales) {\n        for (const [locale, options] of Object.entries(metadata.locales)) {\n            let translationFiles;\n            let baseHref;\n            if (core_1.json.isJsonObject(options)) {\n                translationFiles = normalizeTranslationFileOption(options.translation, locale, false);\n                if (typeof options.baseHref === 'string') {\n                    baseHref = options.baseHref;\n                }\n            }\n            else {\n                translationFiles = normalizeTranslationFileOption(options, locale, true);\n            }\n            if (locale === i18n.sourceLocale) {\n                throw new Error(`An i18n locale ('${locale}') cannot both be a source locale and provide a translation.`);\n            }\n            i18n.locales[locale] = {\n                files: translationFiles.map((file) => ({ path: file })),\n                baseHref,\n            };\n        }\n    }\n    if (inline === true) {\n        i18n.inlineLocales.add(i18n.sourceLocale);\n        Object.keys(i18n.locales).forEach((locale) => i18n.inlineLocales.add(locale));\n    }\n    else if (inline) {\n        for (const locale of inline) {\n            if (!i18n.locales[locale] && i18n.sourceLocale !== locale) {\n                throw new Error(`Requested locale '${locale}' is not defined for the project.`);\n            }\n            i18n.inlineLocales.add(locale);\n        }\n    }\n    return i18n;\n}\nexports.createI18nOptions = createI18nOptions;\nasync function configureI18nBuild(context, options) {\n    if (!context.target) {\n        throw new Error('The builder requires a target.');\n    }\n    const buildOptions = { ...options };\n    const tsConfig = await (0, read_tsconfig_1.readTsconfig)(buildOptions.tsConfig, context.workspaceRoot);\n    const metadata = await context.getProjectMetadata(context.target);\n    const i18n = createI18nOptions(metadata, buildOptions.localize);\n    // No additional processing needed if no inlining requested and no source locale defined.\n    if (!i18n.shouldInline && !i18n.hasDefinedSourceLocale) {\n        return { buildOptions, i18n };\n    }\n    const projectRoot = path_1.default.join(context.workspaceRoot, metadata.root || '');\n    // The trailing slash is required to signal that the path is a directory and not a file.\n    const projectRequire = module_1.default.createRequire(projectRoot + '/');\n    const localeResolver = (locale) => projectRequire.resolve(path_1.default.join(LOCALE_DATA_BASE_MODULE, locale));\n    // Load locale data and translations (if present)\n    let loader;\n    const usedFormats = new Set();\n    for (const [locale, desc] of Object.entries(i18n.locales)) {\n        if (!i18n.inlineLocales.has(locale) && locale !== i18n.sourceLocale) {\n            continue;\n        }\n        let localeDataPath = findLocaleDataPath(locale, localeResolver);\n        if (!localeDataPath) {\n            const [first] = locale.split('-');\n            if (first) {\n                localeDataPath = findLocaleDataPath(first.toLowerCase(), localeResolver);\n                if (localeDataPath) {\n                    context.logger.warn(`Locale data for '${locale}' cannot be found. Using locale data for '${first}'.`);\n                }\n            }\n        }\n        if (!localeDataPath) {\n            context.logger.warn(`Locale data for '${locale}' cannot be found. No locale data will be included for this locale.`);\n        }\n        else {\n            desc.dataPath = localeDataPath;\n        }\n        if (!desc.files.length) {\n            continue;\n        }\n        loader !== null && loader !== void 0 ? loader : (loader = await (0, load_translations_1.createTranslationLoader)());\n        loadTranslations(locale, desc, context.workspaceRoot, loader, {\n            warn(message) {\n                context.logger.warn(message);\n            },\n            error(message) {\n                throw new Error(message);\n            },\n        }, usedFormats, buildOptions.i18nDuplicateTranslation);\n        if (usedFormats.size > 1 && tsConfig.options.enableI18nLegacyMessageIdFormat !== false) {\n            // This limitation is only for legacy message id support (defaults to true as of 9.0)\n            throw new Error('Localization currently only supports using one type of translation file format for the entire application.');\n        }\n    }\n    // If inlining store the output in a temporary location to facilitate post-processing\n    if (i18n.shouldInline) {\n        // TODO: we should likely save these in the .angular directory in the next major version.\n        // We'd need to do a migration to add the temp directory to gitignore.\n        const tempPath = fs_1.default.mkdtempSync(path_1.default.join(fs_1.default.realpathSync(os_1.default.tmpdir()), 'angular-cli-i18n-'));\n        buildOptions.outputPath = tempPath;\n        process.on('exit', () => {\n            try {\n                fs_1.default.rmSync(tempPath, { force: true, recursive: true, maxRetries: 3 });\n            }\n            catch { }\n        });\n    }\n    return { buildOptions, i18n };\n}\nexports.configureI18nBuild = configureI18nBuild;\nfunction findLocaleDataPath(locale, resolver) {\n    // Remove private use subtags\n    const scrubbedLocale = locale.replace(/-x(-[a-zA-Z0-9]{1,8})+$/, '');\n    try {\n        return resolver(scrubbedLocale);\n    }\n    catch {\n        // fallback to known existing en-US locale data as of 14.0\n        return scrubbedLocale === 'en-US' ? findLocaleDataPath('en', resolver) : null;\n    }\n}\nfunction loadTranslations(locale, desc, workspaceRoot, loader, logger, usedFormats, duplicateTranslation) {\n    let translations = undefined;\n    for (const file of desc.files) {\n        const loadResult = loader(path_1.default.join(workspaceRoot, file.path));\n        for (const diagnostics of loadResult.diagnostics.messages) {\n            if (diagnostics.type === 'error') {\n                logger.error(`Error parsing translation file '${file.path}': ${diagnostics.message}`);\n            }\n            else {\n                logger.warn(`WARNING [${file.path}]: ${diagnostics.message}`);\n            }\n        }\n        if (loadResult.locale !== undefined && loadResult.locale !== locale) {\n            logger.warn(`WARNING [${file.path}]: File target locale ('${loadResult.locale}') does not match configured locale ('${locale}')`);\n        }\n        usedFormats === null || usedFormats === void 0 ? void 0 : usedFormats.add(loadResult.format);\n        file.format = loadResult.format;\n        file.integrity = loadResult.integrity;\n        if (translations) {\n            // Merge translations\n            for (const [id, message] of Object.entries(loadResult.translations)) {\n                if (translations[id] !== undefined) {\n                    const duplicateTranslationMessage = `[${file.path}]: Duplicate translations for message '${id}' when merging.`;\n                    switch (duplicateTranslation) {\n                        case schema_1.I18NTranslation.Ignore:\n                            break;\n                        case schema_1.I18NTranslation.Error:\n                            logger.error(`ERROR ${duplicateTranslationMessage}`);\n                            break;\n                        case schema_1.I18NTranslation.Warning:\n                        default:\n                            logger.warn(`WARNING ${duplicateTranslationMessage}`);\n                            break;\n                    }\n                }\n                translations[id] = message;\n            }\n        }\n        else {\n            // First or only translation file\n            translations = loadResult.translations;\n        }\n    }\n    desc.translation = translations;\n}\nexports.loadTranslations = loadTranslations;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;IAAE,WAAWA;EAAb,CAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2BF,OAAO,CAACG,kBAAR,GAA6BH,OAAO,CAACI,iBAAR,GAA4B,KAAK,CAAzF;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAD,CAAtB;;AACA,MAAMC,IAAI,GAAGZ,eAAe,CAACW,OAAO,CAAC,IAAD,CAAR,CAA5B;;AACA,MAAME,QAAQ,GAAGb,eAAe,CAACW,OAAO,CAAC,QAAD,CAAR,CAAhC;;AACA,MAAMG,IAAI,GAAGd,eAAe,CAACW,OAAO,CAAC,IAAD,CAAR,CAA5B;;AACA,MAAMI,MAAM,GAAGf,eAAe,CAACW,OAAO,CAAC,MAAD,CAAR,CAA9B;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,4BAAD,CAAxB;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,wBAAD,CAA/B;;AACA,MAAMO,mBAAmB,GAAGP,OAAO,CAAC,qBAAD,CAAnC;AACA;AACA;AACA;;;AACA,MAAMQ,uBAAuB,GAAG,gCAAhC;;AACA,SAASC,8BAAT,CAAwCC,MAAxC,EAAgDC,MAAhD,EAAwDC,mBAAxD,EAA6E;EACzE,IAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;IAC5B,OAAO,CAACA,MAAD,CAAP;EACH;;EACD,IAAIG,KAAK,CAACC,OAAN,CAAcJ,MAAd,KAAyBA,MAAM,CAACK,KAAP,CAAcC,OAAD,IAAa,OAAOA,OAAP,KAAmB,QAA7C,CAA7B,EAAqF;IACjF,OAAON,MAAP;EACH;;EACD,IAAIO,YAAY,GAAI,qDAAoDN,MAAO,kBAA/E;;EACA,IAAIC,mBAAJ,EAAyB;IACrBK,YAAY,IAAI,iDAAhB;EACH,CAFD,MAGK;IACDA,YAAY,IAAI,wCAAhB;EACH;;EACD,MAAM,IAAIC,KAAJ,CAAUD,YAAV,CAAN;AACH;;AACD,SAASnB,iBAAT,CAA2BqB,QAA3B,EAAqCC,MAArC,EAA6C;EACzC,IAAID,QAAQ,CAACE,IAAT,KAAkBC,SAAlB,IAA+B,CAACvB,MAAM,CAACwB,IAAP,CAAYC,YAAZ,CAAyBL,QAAQ,CAACE,IAAlC,CAApC,EAA6E;IACzE,MAAM,IAAIH,KAAJ,CAAU,sDAAV,CAAN;EACH;;EACDC,QAAQ,GAAGA,QAAQ,CAACE,IAAT,IAAiB,EAA5B;EACA,MAAMA,IAAI,GAAG;IACTI,aAAa,EAAE,IAAIC,GAAJ,EADN;IAET;IACAC,YAAY,EAAE,OAHL;IAITC,OAAO,EAAE,EAJA;;IAKT,IAAIC,YAAJ,GAAmB;MACf,OAAO,KAAKJ,aAAL,CAAmBK,IAAnB,GAA0B,CAAjC;IACH;;EAPQ,CAAb;EASA,IAAIC,eAAJ;EACA,IAAIC,uBAAJ;;EACA,IAAIjC,MAAM,CAACwB,IAAP,CAAYC,YAAZ,CAAyBL,QAAQ,CAACQ,YAAlC,CAAJ,EAAqD;IACjDI,eAAe,GAAGZ,QAAQ,CAACQ,YAAT,CAAsBM,IAAxC;;IACA,IAAId,QAAQ,CAACQ,YAAT,CAAsBO,QAAtB,KAAmCZ,SAAnC,IACA,OAAOH,QAAQ,CAACQ,YAAT,CAAsBO,QAA7B,KAA0C,QAD9C,EACwD;MACpD,MAAM,IAAIhB,KAAJ,CAAU,2EAAV,CAAN;IACH;;IACDc,uBAAuB,GAAGb,QAAQ,CAACQ,YAAT,CAAsBO,QAAhD;EACH,CAPD,MAQK;IACDH,eAAe,GAAGZ,QAAQ,CAACQ,YAA3B;EACH;;EACD,IAAII,eAAe,KAAKT,SAAxB,EAAmC;IAC/B,IAAI,OAAOS,eAAP,KAA2B,QAA/B,EAAyC;MACrC,MAAM,IAAIb,KAAJ,CAAU,kEAAV,CAAN;IACH;;IACDG,IAAI,CAACM,YAAL,GAAoBI,eAApB;IACAV,IAAI,CAACc,sBAAL,GAA8B,IAA9B;EACH;;EACDd,IAAI,CAACO,OAAL,CAAaP,IAAI,CAACM,YAAlB,IAAkC;IAC9BS,KAAK,EAAE,EADuB;IAE9BF,QAAQ,EAAEF;EAFoB,CAAlC;;EAIA,IAAIb,QAAQ,CAACS,OAAT,KAAqBN,SAArB,IAAkC,CAACvB,MAAM,CAACwB,IAAP,CAAYC,YAAZ,CAAyBL,QAAQ,CAACS,OAAlC,CAAvC,EAAmF;IAC/E,MAAM,IAAIV,KAAJ,CAAU,8DAAV,CAAN;EACH,CAFD,MAGK,IAAIC,QAAQ,CAACS,OAAb,EAAsB;IACvB,KAAK,MAAM,CAACjB,MAAD,EAAS0B,OAAT,CAAX,IAAgC7C,MAAM,CAAC8C,OAAP,CAAenB,QAAQ,CAACS,OAAxB,CAAhC,EAAkE;MAC9D,IAAIW,gBAAJ;MACA,IAAIL,QAAJ;;MACA,IAAInC,MAAM,CAACwB,IAAP,CAAYC,YAAZ,CAAyBa,OAAzB,CAAJ,EAAuC;QACnCE,gBAAgB,GAAG9B,8BAA8B,CAAC4B,OAAO,CAACG,WAAT,EAAsB7B,MAAtB,EAA8B,KAA9B,CAAjD;;QACA,IAAI,OAAO0B,OAAO,CAACH,QAAf,KAA4B,QAAhC,EAA0C;UACtCA,QAAQ,GAAGG,OAAO,CAACH,QAAnB;QACH;MACJ,CALD,MAMK;QACDK,gBAAgB,GAAG9B,8BAA8B,CAAC4B,OAAD,EAAU1B,MAAV,EAAkB,IAAlB,CAAjD;MACH;;MACD,IAAIA,MAAM,KAAKU,IAAI,CAACM,YAApB,EAAkC;QAC9B,MAAM,IAAIT,KAAJ,CAAW,oBAAmBP,MAAO,8DAArC,CAAN;MACH;;MACDU,IAAI,CAACO,OAAL,CAAajB,MAAb,IAAuB;QACnByB,KAAK,EAAEG,gBAAgB,CAACE,GAAjB,CAAsBC,IAAD,KAAW;UAAEC,IAAI,EAAED;QAAR,CAAX,CAArB,CADY;QAEnBR;MAFmB,CAAvB;IAIH;EACJ;;EACD,IAAId,MAAM,KAAK,IAAf,EAAqB;IACjBC,IAAI,CAACI,aAAL,CAAmBmB,GAAnB,CAAuBvB,IAAI,CAACM,YAA5B;IACAnC,MAAM,CAACqD,IAAP,CAAYxB,IAAI,CAACO,OAAjB,EAA0BkB,OAA1B,CAAmCnC,MAAD,IAAYU,IAAI,CAACI,aAAL,CAAmBmB,GAAnB,CAAuBjC,MAAvB,CAA9C;EACH,CAHD,MAIK,IAAIS,MAAJ,EAAY;IACb,KAAK,MAAMT,MAAX,IAAqBS,MAArB,EAA6B;MACzB,IAAI,CAACC,IAAI,CAACO,OAAL,CAAajB,MAAb,CAAD,IAAyBU,IAAI,CAACM,YAAL,KAAsBhB,MAAnD,EAA2D;QACvD,MAAM,IAAIO,KAAJ,CAAW,qBAAoBP,MAAO,mCAAtC,CAAN;MACH;;MACDU,IAAI,CAACI,aAAL,CAAmBmB,GAAnB,CAAuBjC,MAAvB;IACH;EACJ;;EACD,OAAOU,IAAP;AACH;;AACD3B,OAAO,CAACI,iBAAR,GAA4BA,iBAA5B;;SACeD,kB;;;;;0CAAf,WAAkCkD,OAAlC,EAA2CV,OAA3C,EAAoD;IAChD,IAAI,CAACU,OAAO,CAACC,MAAb,EAAqB;MACjB,MAAM,IAAI9B,KAAJ,CAAU,gCAAV,CAAN;IACH;;IACD,MAAM+B,YAAY,GAAG,EAAE,GAAGZ;IAAL,CAArB;IACA,MAAMa,QAAQ,SAAS,CAAC,GAAG5C,eAAe,CAAC6C,YAApB,EAAkCF,YAAY,CAACC,QAA/C,EAAyDH,OAAO,CAACK,aAAjE,CAAvB;IACA,MAAMjC,QAAQ,SAAS4B,OAAO,CAACM,kBAAR,CAA2BN,OAAO,CAACC,MAAnC,CAAvB;IACA,MAAM3B,IAAI,GAAGvB,iBAAiB,CAACqB,QAAD,EAAW8B,YAAY,CAACK,QAAxB,CAA9B,CAPgD,CAQhD;;IACA,IAAI,CAACjC,IAAI,CAACQ,YAAN,IAAsB,CAACR,IAAI,CAACc,sBAAhC,EAAwD;MACpD,OAAO;QAAEc,YAAF;QAAgB5B;MAAhB,CAAP;IACH;;IACD,MAAMkC,WAAW,GAAGnD,MAAM,CAACoD,OAAP,CAAeC,IAAf,CAAoBV,OAAO,CAACK,aAA5B,EAA2CjC,QAAQ,CAACuC,IAAT,IAAiB,EAA5D,CAApB,CAZgD,CAahD;;IACA,MAAMC,cAAc,GAAGzD,QAAQ,CAACsD,OAAT,CAAiBI,aAAjB,CAA+BL,WAAW,GAAG,GAA7C,CAAvB;;IACA,MAAMM,cAAc,GAAIlD,MAAD,IAAYgD,cAAc,CAACG,OAAf,CAAuB1D,MAAM,CAACoD,OAAP,CAAeC,IAAf,CAAoBjD,uBAApB,EAA6CG,MAA7C,CAAvB,CAAnC,CAfgD,CAgBhD;;;IACA,IAAIoD,MAAJ;IACA,MAAMC,WAAW,GAAG,IAAItC,GAAJ,EAApB;;IACA,KAAK,MAAM,CAACf,MAAD,EAASsD,IAAT,CAAX,IAA6BzE,MAAM,CAAC8C,OAAP,CAAejB,IAAI,CAACO,OAApB,CAA7B,EAA2D;MACvD,IAAI,CAACP,IAAI,CAACI,aAAL,CAAmByC,GAAnB,CAAuBvD,MAAvB,CAAD,IAAmCA,MAAM,KAAKU,IAAI,CAACM,YAAvD,EAAqE;QACjE;MACH;;MACD,IAAIwC,cAAc,GAAGC,kBAAkB,CAACzD,MAAD,EAASkD,cAAT,CAAvC;;MACA,IAAI,CAACM,cAAL,EAAqB;QACjB,MAAM,CAACE,KAAD,IAAU1D,MAAM,CAAC2D,KAAP,CAAa,GAAb,CAAhB;;QACA,IAAID,KAAJ,EAAW;UACPF,cAAc,GAAGC,kBAAkB,CAACC,KAAK,CAACE,WAAN,EAAD,EAAsBV,cAAtB,CAAnC;;UACA,IAAIM,cAAJ,EAAoB;YAChBpB,OAAO,CAACyB,MAAR,CAAeC,IAAf,CAAqB,oBAAmB9D,MAAO,6CAA4C0D,KAAM,IAAjG;UACH;QACJ;MACJ;;MACD,IAAI,CAACF,cAAL,EAAqB;QACjBpB,OAAO,CAACyB,MAAR,CAAeC,IAAf,CAAqB,oBAAmB9D,MAAO,qEAA/C;MACH,CAFD,MAGK;QACDsD,IAAI,CAACS,QAAL,GAAgBP,cAAhB;MACH;;MACD,IAAI,CAACF,IAAI,CAAC7B,KAAL,CAAWuC,MAAhB,EAAwB;QACpB;MACH;;MACDZ,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuCA,MAAvC,GAAiDA,MAAM,SAAS,CAAC,GAAGxD,mBAAmB,CAACqE,uBAAxB,GAAhE;MACAhF,gBAAgB,CAACe,MAAD,EAASsD,IAAT,EAAelB,OAAO,CAACK,aAAvB,EAAsCW,MAAtC,EAA8C;QAC1DU,IAAI,CAACI,OAAD,EAAU;UACV9B,OAAO,CAACyB,MAAR,CAAeC,IAAf,CAAoBI,OAApB;QACH,CAHyD;;QAI1DC,KAAK,CAACD,OAAD,EAAU;UACX,MAAM,IAAI3D,KAAJ,CAAU2D,OAAV,CAAN;QACH;;MANyD,CAA9C,EAObb,WAPa,EAOAf,YAAY,CAAC8B,wBAPb,CAAhB;;MAQA,IAAIf,WAAW,CAAClC,IAAZ,GAAmB,CAAnB,IAAwBoB,QAAQ,CAACb,OAAT,CAAiB2C,+BAAjB,KAAqD,KAAjF,EAAwF;QACpF;QACA,MAAM,IAAI9D,KAAJ,CAAU,4GAAV,CAAN;MACH;IACJ,CAvD+C,CAwDhD;;;IACA,IAAIG,IAAI,CAACQ,YAAT,EAAuB;MACnB;MACA;MACA,MAAMoD,QAAQ,GAAGhF,IAAI,CAACuD,OAAL,CAAa0B,WAAb,CAAyB9E,MAAM,CAACoD,OAAP,CAAeC,IAAf,CAAoBxD,IAAI,CAACuD,OAAL,CAAa2B,YAAb,CAA0BhF,IAAI,CAACqD,OAAL,CAAa4B,MAAb,EAA1B,CAApB,EAAsE,mBAAtE,CAAzB,CAAjB;MACAnC,YAAY,CAACoC,UAAb,GAA0BJ,QAA1B;MACAK,OAAO,CAACC,EAAR,CAAW,MAAX,EAAmB,MAAM;QACrB,IAAI;UACAtF,IAAI,CAACuD,OAAL,CAAagC,MAAb,CAAoBP,QAApB,EAA8B;YAAEQ,KAAK,EAAE,IAAT;YAAeC,SAAS,EAAE,IAA1B;YAAgCC,UAAU,EAAE;UAA5C,CAA9B;QACH,CAFD,CAGA,MAAM,CAAG;MACZ,CALD;IAMH;;IACD,OAAO;MAAE1C,YAAF;MAAgB5B;IAAhB,CAAP;EACH,C;;;;AACD3B,OAAO,CAACG,kBAAR,GAA6BA,kBAA7B;;AACA,SAASuE,kBAAT,CAA4BzD,MAA5B,EAAoCiF,QAApC,EAA8C;EAC1C;EACA,MAAMC,cAAc,GAAGlF,MAAM,CAACmF,OAAP,CAAe,yBAAf,EAA0C,EAA1C,CAAvB;;EACA,IAAI;IACA,OAAOF,QAAQ,CAACC,cAAD,CAAf;EACH,CAFD,CAGA,MAAM;IACF;IACA,OAAOA,cAAc,KAAK,OAAnB,GAA6BzB,kBAAkB,CAAC,IAAD,EAAOwB,QAAP,CAA/C,GAAkE,IAAzE;EACH;AACJ;;AACD,SAAShG,gBAAT,CAA0Be,MAA1B,EAAkCsD,IAAlC,EAAwCb,aAAxC,EAAuDW,MAAvD,EAA+DS,MAA/D,EAAuER,WAAvE,EAAoF+B,oBAApF,EAA0G;EACtG,IAAIC,YAAY,GAAG1E,SAAnB;;EACA,KAAK,MAAMoB,IAAX,IAAmBuB,IAAI,CAAC7B,KAAxB,EAA+B;IAC3B,MAAM6D,UAAU,GAAGlC,MAAM,CAAC3D,MAAM,CAACoD,OAAP,CAAeC,IAAf,CAAoBL,aAApB,EAAmCV,IAAI,CAACC,IAAxC,CAAD,CAAzB;;IACA,KAAK,MAAMuD,WAAX,IAA0BD,UAAU,CAACC,WAAX,CAAuBC,QAAjD,EAA2D;MACvD,IAAID,WAAW,CAACE,IAAZ,KAAqB,OAAzB,EAAkC;QAC9B5B,MAAM,CAACM,KAAP,CAAc,mCAAkCpC,IAAI,CAACC,IAAK,MAAKuD,WAAW,CAACrB,OAAQ,EAAnF;MACH,CAFD,MAGK;QACDL,MAAM,CAACC,IAAP,CAAa,YAAW/B,IAAI,CAACC,IAAK,MAAKuD,WAAW,CAACrB,OAAQ,EAA3D;MACH;IACJ;;IACD,IAAIoB,UAAU,CAACtF,MAAX,KAAsBW,SAAtB,IAAmC2E,UAAU,CAACtF,MAAX,KAAsBA,MAA7D,EAAqE;MACjE6D,MAAM,CAACC,IAAP,CAAa,YAAW/B,IAAI,CAACC,IAAK,2BAA0BsD,UAAU,CAACtF,MAAO,yCAAwCA,MAAO,IAA7H;IACH;;IACDqD,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACpB,GAAZ,CAAgBqD,UAAU,CAACI,MAA3B,CAA1D;IACA3D,IAAI,CAAC2D,MAAL,GAAcJ,UAAU,CAACI,MAAzB;IACA3D,IAAI,CAAC4D,SAAL,GAAiBL,UAAU,CAACK,SAA5B;;IACA,IAAIN,YAAJ,EAAkB;MACd;MACA,KAAK,MAAM,CAACO,EAAD,EAAK1B,OAAL,CAAX,IAA4BrF,MAAM,CAAC8C,OAAP,CAAe2D,UAAU,CAACD,YAA1B,CAA5B,EAAqE;QACjE,IAAIA,YAAY,CAACO,EAAD,CAAZ,KAAqBjF,SAAzB,EAAoC;UAChC,MAAMkF,2BAA2B,GAAI,IAAG9D,IAAI,CAACC,IAAK,0CAAyC4D,EAAG,iBAA9F;;UACA,QAAQR,oBAAR;YACI,KAAK1F,QAAQ,CAACoG,eAAT,CAAyBC,MAA9B;cACI;;YACJ,KAAKrG,QAAQ,CAACoG,eAAT,CAAyBvF,KAA9B;cACIsD,MAAM,CAACM,KAAP,CAAc,SAAQ0B,2BAA4B,EAAlD;cACA;;YACJ,KAAKnG,QAAQ,CAACoG,eAAT,CAAyBE,OAA9B;YACA;cACInC,MAAM,CAACC,IAAP,CAAa,WAAU+B,2BAA4B,EAAnD;cACA;UATR;QAWH;;QACDR,YAAY,CAACO,EAAD,CAAZ,GAAmB1B,OAAnB;MACH;IACJ,CAnBD,MAoBK;MACD;MACAmB,YAAY,GAAGC,UAAU,CAACD,YAA1B;IACH;EACJ;;EACD/B,IAAI,CAACzB,WAAL,GAAmBwD,YAAnB;AACH;;AACDtG,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B"},"metadata":{},"sourceType":"script"}