{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServiceWorkerPlugin = void 0;\n\nconst service_worker_1 = require(\"../../utils/service-worker\");\n\nclass ServiceWorkerPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n\n  apply(compiler) {\n    var _this = this;\n\n    compiler.hooks.done.tapPromise('angular-service-worker', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (stats) {\n        if (stats.hasErrors()) {\n          // Don't generate a service worker if the compilation has errors.\n          // When there are errors some files will not be emitted which would cause other errors down the line such as readdir failures.\n          return;\n        }\n\n        const {\n          projectRoot,\n          root,\n          baseHref = '',\n          ngswConfigPath\n        } = _this.options;\n        const {\n          compilation\n        } = stats; // We use the output path from the compilation instead of build options since during\n        // localization the output path is modified to a temp directory.\n        // See: https://github.com/angular/angular-cli/blob/7e64b1537d54fadb650559214fbb12707324cd75/packages/angular_devkit/build_angular/src/utils/i18n-options.ts#L251-L252\n\n        const outputPath = compilation.outputOptions.path;\n\n        if (!outputPath) {\n          throw new Error('Compilation output path cannot be empty.');\n        }\n\n        try {\n          yield (0, service_worker_1.augmentAppWithServiceWorker)(projectRoot, root, outputPath, baseHref, ngswConfigPath, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          compiler.inputFileSystem.promises, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          compiler.outputFileSystem.promises);\n        } catch (error) {\n          compilation.errors.push(new compilation.compiler.webpack.WebpackError(`Failed to generate service worker - ${error instanceof Error ? error.message : error}`));\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n}\n\nexports.ServiceWorkerPlugin = ServiceWorkerPlugin;","map":{"version":3,"names":["Object","defineProperty","exports","value","ServiceWorkerPlugin","service_worker_1","require","constructor","options","apply","compiler","hooks","done","tapPromise","stats","hasErrors","projectRoot","root","baseHref","ngswConfigPath","compilation","outputPath","outputOptions","path","Error","augmentAppWithServiceWorker","inputFileSystem","promises","outputFileSystem","error","errors","push","webpack","WebpackError","message"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@angular-devkit/build-angular/src/webpack/plugins/service-worker-plugin.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServiceWorkerPlugin = void 0;\nconst service_worker_1 = require(\"../../utils/service-worker\");\nclass ServiceWorkerPlugin {\n    constructor(options) {\n        this.options = options;\n    }\n    apply(compiler) {\n        compiler.hooks.done.tapPromise('angular-service-worker', async (stats) => {\n            if (stats.hasErrors()) {\n                // Don't generate a service worker if the compilation has errors.\n                // When there are errors some files will not be emitted which would cause other errors down the line such as readdir failures.\n                return;\n            }\n            const { projectRoot, root, baseHref = '', ngswConfigPath } = this.options;\n            const { compilation } = stats;\n            // We use the output path from the compilation instead of build options since during\n            // localization the output path is modified to a temp directory.\n            // See: https://github.com/angular/angular-cli/blob/7e64b1537d54fadb650559214fbb12707324cd75/packages/angular_devkit/build_angular/src/utils/i18n-options.ts#L251-L252\n            const outputPath = compilation.outputOptions.path;\n            if (!outputPath) {\n                throw new Error('Compilation output path cannot be empty.');\n            }\n            try {\n                await (0, service_worker_1.augmentAppWithServiceWorker)(projectRoot, root, outputPath, baseHref, ngswConfigPath, \n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                compiler.inputFileSystem.promises, \n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                compiler.outputFileSystem.promises);\n            }\n            catch (error) {\n                compilation.errors.push(new compilation.compiler.webpack.WebpackError(`Failed to generate service worker - ${error instanceof Error ? error.message : error}`));\n            }\n        });\n    }\n}\nexports.ServiceWorkerPlugin = ServiceWorkerPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8B,KAAK,CAAnC;;AACA,MAAMC,gBAAgB,GAAGC,OAAO,CAAC,4BAAD,CAAhC;;AACA,MAAMF,mBAAN,CAA0B;EACtBG,WAAW,CAACC,OAAD,EAAU;IACjB,KAAKA,OAAL,GAAeA,OAAf;EACH;;EACDC,KAAK,CAACC,QAAD,EAAW;IAAA;;IACZA,QAAQ,CAACC,KAAT,CAAeC,IAAf,CAAoBC,UAApB,CAA+B,wBAA/B;MAAA,6BAAyD,WAAOC,KAAP,EAAiB;QACtE,IAAIA,KAAK,CAACC,SAAN,EAAJ,EAAuB;UACnB;UACA;UACA;QACH;;QACD,MAAM;UAAEC,WAAF;UAAeC,IAAf;UAAqBC,QAAQ,GAAG,EAAhC;UAAoCC;QAApC,IAAuD,KAAI,CAACX,OAAlE;QACA,MAAM;UAAEY;QAAF,IAAkBN,KAAxB,CAPsE,CAQtE;QACA;QACA;;QACA,MAAMO,UAAU,GAAGD,WAAW,CAACE,aAAZ,CAA0BC,IAA7C;;QACA,IAAI,CAACF,UAAL,EAAiB;UACb,MAAM,IAAIG,KAAJ,CAAU,0CAAV,CAAN;QACH;;QACD,IAAI;UACA,MAAM,CAAC,GAAGnB,gBAAgB,CAACoB,2BAArB,EAAkDT,WAAlD,EAA+DC,IAA/D,EAAqEI,UAArE,EAAiFH,QAAjF,EAA2FC,cAA3F,EACN;UACAT,QAAQ,CAACgB,eAAT,CAAyBC,QAFnB,EAGN;UACAjB,QAAQ,CAACkB,gBAAT,CAA0BD,QAJpB,CAAN;QAKH,CAND,CAOA,OAAOE,KAAP,EAAc;UACVT,WAAW,CAACU,MAAZ,CAAmBC,IAAnB,CAAwB,IAAIX,WAAW,CAACV,QAAZ,CAAqBsB,OAArB,CAA6BC,YAAjC,CAA+C,uCAAsCJ,KAAK,YAAYL,KAAjB,GAAyBK,KAAK,CAACK,OAA/B,GAAyCL,KAAM,EAApI,CAAxB;QACH;MACJ,CAzBD;;MAAA;QAAA;MAAA;IAAA;EA0BH;;AA/BqB;;AAiC1B3B,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B"},"metadata":{},"sourceType":"script"}