{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n/**\n * File object used for tracking files in `file-list.js`.\n */\n\n\nclass File {\n  constructor(path, mtime, doNotCache, type, isBinary, integrity) {\n    // used for serving (processed path, eg some/file.coffee -> some/file.coffee.js)\n    this.path = path; // original absolute path, id of the file\n\n    this.originalPath = path; // where the content is stored (processed)\n\n    this.contentPath = path; // encodings format {[encodingType]: encodedContent}\n    //   example: {gzip: <Buffer 1f 8b 08...>}\n\n    this.encodings = Object.create(null);\n    this.mtime = mtime;\n    this.isUrl = false;\n    this.doNotCache = doNotCache === undefined ? false : doNotCache;\n    this.type = type; // Tri state: null means probe file for binary.\n\n    this.isBinary = isBinary === undefined ? null : isBinary;\n    this.integrity = integrity;\n  }\n  /**\n   * Detect type from the file extension.\n   * @returns {string} detected file type or empty string\n   */\n\n\n  detectType() {\n    return path.extname(this.path).slice(1);\n  }\n\n  toString() {\n    return this.path;\n  }\n\n}\n\nmodule.exports = File;","map":{"version":3,"names":["path","require","File","constructor","mtime","doNotCache","type","isBinary","integrity","originalPath","contentPath","encodings","Object","create","isUrl","undefined","detectType","extname","slice","toString","module","exports"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/karma/lib/file.js"],"sourcesContent":["'use strict'\n\nconst path = require('path')\n\n/**\n * File object used for tracking files in `file-list.js`.\n */\nclass File {\n  constructor (path, mtime, doNotCache, type, isBinary, integrity) {\n    // used for serving (processed path, eg some/file.coffee -> some/file.coffee.js)\n    this.path = path\n\n    // original absolute path, id of the file\n    this.originalPath = path\n\n    // where the content is stored (processed)\n    this.contentPath = path\n\n    // encodings format {[encodingType]: encodedContent}\n    //   example: {gzip: <Buffer 1f 8b 08...>}\n    this.encodings = Object.create(null)\n\n    this.mtime = mtime\n    this.isUrl = false\n\n    this.doNotCache = doNotCache === undefined ? false : doNotCache\n\n    this.type = type\n\n    // Tri state: null means probe file for binary.\n    this.isBinary = isBinary === undefined ? null : isBinary\n\n    this.integrity = integrity\n  }\n\n  /**\n   * Detect type from the file extension.\n   * @returns {string} detected file type or empty string\n   */\n  detectType () {\n    return path.extname(this.path).slice(1)\n  }\n\n  toString () {\n    return this.path\n  }\n}\n\nmodule.exports = File\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;AAEA;AACA;AACA;;;AACA,MAAMC,IAAN,CAAW;EACTC,WAAW,CAAEH,IAAF,EAAQI,KAAR,EAAeC,UAAf,EAA2BC,IAA3B,EAAiCC,QAAjC,EAA2CC,SAA3C,EAAsD;IAC/D;IACA,KAAKR,IAAL,GAAYA,IAAZ,CAF+D,CAI/D;;IACA,KAAKS,YAAL,GAAoBT,IAApB,CAL+D,CAO/D;;IACA,KAAKU,WAAL,GAAmBV,IAAnB,CAR+D,CAU/D;IACA;;IACA,KAAKW,SAAL,GAAiBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAjB;IAEA,KAAKT,KAAL,GAAaA,KAAb;IACA,KAAKU,KAAL,GAAa,KAAb;IAEA,KAAKT,UAAL,GAAkBA,UAAU,KAAKU,SAAf,GAA2B,KAA3B,GAAmCV,UAArD;IAEA,KAAKC,IAAL,GAAYA,IAAZ,CAnB+D,CAqB/D;;IACA,KAAKC,QAAL,GAAgBA,QAAQ,KAAKQ,SAAb,GAAyB,IAAzB,GAAgCR,QAAhD;IAEA,KAAKC,SAAL,GAAiBA,SAAjB;EACD;EAED;AACF;AACA;AACA;;;EACEQ,UAAU,GAAI;IACZ,OAAOhB,IAAI,CAACiB,OAAL,CAAa,KAAKjB,IAAlB,EAAwBkB,KAAxB,CAA8B,CAA9B,CAAP;EACD;;EAEDC,QAAQ,GAAI;IACV,OAAO,KAAKnB,IAAZ;EACD;;AAtCQ;;AAyCXoB,MAAM,CAACC,OAAP,GAAiBnB,IAAjB"},"metadata":{},"sourceType":"script"}