{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeAssetPatterns = exports.MissingAssetSourceRootException = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst fs_1 = require(\"fs\");\n\nconst path = __importStar(require(\"path\"));\n\nclass MissingAssetSourceRootException extends core_1.BaseException {\n  constructor(path) {\n    super(`The ${path} asset path must start with the project source root.`);\n  }\n\n}\n\nexports.MissingAssetSourceRootException = MissingAssetSourceRootException;\n\nfunction normalizeAssetPatterns(assetPatterns, workspaceRoot, projectRoot, projectSourceRoot) {\n  if (assetPatterns.length === 0) {\n    return [];\n  } // When sourceRoot is not available, we default to ${projectRoot}/src.\n\n\n  const sourceRoot = projectSourceRoot || path.join(projectRoot, 'src');\n  const resolvedSourceRoot = path.resolve(workspaceRoot, sourceRoot);\n  return assetPatterns.map(assetPattern => {\n    // Normalize string asset patterns to objects.\n    if (typeof assetPattern === 'string') {\n      const assetPath = path.normalize(assetPattern);\n      const resolvedAssetPath = path.resolve(workspaceRoot, assetPath); // Check if the string asset is within sourceRoot.\n\n      if (!resolvedAssetPath.startsWith(resolvedSourceRoot)) {\n        throw new MissingAssetSourceRootException(assetPattern);\n      }\n\n      let glob, input;\n      let isDirectory = false;\n\n      try {\n        isDirectory = (0, fs_1.statSync)(resolvedAssetPath).isDirectory();\n      } catch {\n        isDirectory = true;\n      }\n\n      if (isDirectory) {\n        // Folders get a recursive star glob.\n        glob = '**/*'; // Input directory is their original path.\n\n        input = assetPath;\n      } else {\n        // Files are their own glob.\n        glob = path.basename(assetPath); // Input directory is their original dirname.\n\n        input = path.dirname(assetPath);\n      } // Output directory for both is the relative path from source root to input.\n\n\n      const output = path.relative(resolvedSourceRoot, path.resolve(workspaceRoot, input)); // Return the asset pattern in object format.\n\n      return {\n        glob,\n        input,\n        output\n      };\n    } else {\n      // It's already an AssetPatternObject, no need to convert.\n      return assetPattern;\n    }\n  });\n}\n\nexports.normalizeAssetPatterns = normalizeAssetPatterns;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","normalizeAssetPatterns","MissingAssetSourceRootException","core_1","require","fs_1","path","BaseException","constructor","assetPatterns","workspaceRoot","projectRoot","projectSourceRoot","length","sourceRoot","join","resolvedSourceRoot","resolve","map","assetPattern","assetPath","normalize","resolvedAssetPath","startsWith","glob","input","isDirectory","statSync","basename","dirname","output","relative"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@angular-devkit/build-angular/src/utils/normalize-asset-patterns.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeAssetPatterns = exports.MissingAssetSourceRootException = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs_1 = require(\"fs\");\nconst path = __importStar(require(\"path\"));\nclass MissingAssetSourceRootException extends core_1.BaseException {\n    constructor(path) {\n        super(`The ${path} asset path must start with the project source root.`);\n    }\n}\nexports.MissingAssetSourceRootException = MissingAssetSourceRootException;\nfunction normalizeAssetPatterns(assetPatterns, workspaceRoot, projectRoot, projectSourceRoot) {\n    if (assetPatterns.length === 0) {\n        return [];\n    }\n    // When sourceRoot is not available, we default to ${projectRoot}/src.\n    const sourceRoot = projectSourceRoot || path.join(projectRoot, 'src');\n    const resolvedSourceRoot = path.resolve(workspaceRoot, sourceRoot);\n    return assetPatterns.map((assetPattern) => {\n        // Normalize string asset patterns to objects.\n        if (typeof assetPattern === 'string') {\n            const assetPath = path.normalize(assetPattern);\n            const resolvedAssetPath = path.resolve(workspaceRoot, assetPath);\n            // Check if the string asset is within sourceRoot.\n            if (!resolvedAssetPath.startsWith(resolvedSourceRoot)) {\n                throw new MissingAssetSourceRootException(assetPattern);\n            }\n            let glob, input;\n            let isDirectory = false;\n            try {\n                isDirectory = (0, fs_1.statSync)(resolvedAssetPath).isDirectory();\n            }\n            catch {\n                isDirectory = true;\n            }\n            if (isDirectory) {\n                // Folders get a recursive star glob.\n                glob = '**/*';\n                // Input directory is their original path.\n                input = assetPath;\n            }\n            else {\n                // Files are their own glob.\n                glob = path.basename(assetPath);\n                // Input directory is their original dirname.\n                input = path.dirname(assetPath);\n            }\n            // Output directory for both is the relative path from source root to input.\n            const output = path.relative(resolvedSourceRoot, path.resolve(workspaceRoot, input));\n            // Return the asset pattern in object format.\n            return { glob, input, output };\n        }\n        else {\n            // It's already an AssetPatternObject, no need to convert.\n            return assetPattern;\n        }\n    });\n}\nexports.normalizeAssetPatterns = normalizeAssetPatterns;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}