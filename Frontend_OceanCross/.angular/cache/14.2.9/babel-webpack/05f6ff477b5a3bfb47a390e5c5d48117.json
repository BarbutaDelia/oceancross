{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCompileFn = getCompileFn;\nexports.getModernWebpackImporter = getModernWebpackImporter;\nexports.getSassImplementation = getSassImplementation;\nexports.getSassOptions = getSassOptions;\nexports.getWebpackImporter = getWebpackImporter;\nexports.getWebpackResolver = getWebpackResolver;\nexports.isSupportedFibers = isSupportedFibers;\nexports.normalizeSourceMap = normalizeSourceMap;\n\nvar _url = _interopRequireDefault(require(\"url\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _full = require(\"klona/full\");\n\nvar _neoAsync = _interopRequireDefault(require(\"neo-async\"));\n\nvar _SassWarning = _interopRequireDefault(require(\"./SassWarning\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getDefaultSassImplementation() {\n  let sassImplPkg = \"sass\";\n\n  try {\n    require.resolve(\"sass\");\n  } catch (ignoreError) {\n    try {\n      require.resolve(\"node-sass\");\n\n      sassImplPkg = \"node-sass\";\n    } catch (_ignoreError) {\n      try {\n        require.resolve(\"sass-embedded\");\n\n        sassImplPkg = \"sass-embedded\";\n      } catch (__ignoreError) {\n        sassImplPkg = \"sass\";\n      }\n    }\n  } // eslint-disable-next-line import/no-dynamic-require, global-require\n\n\n  return require(sassImplPkg);\n}\n/**\n * This function is not Webpack-specific and can be used by tools wishing to mimic `sass-loader`'s behaviour, so its signature should not be changed.\n */\n\n\nfunction getSassImplementation(loaderContext, implementation) {\n  let resolvedImplementation = implementation;\n\n  if (!resolvedImplementation) {\n    try {\n      resolvedImplementation = getDefaultSassImplementation();\n    } catch (error) {\n      loaderContext.emitError(error);\n      return;\n    }\n  }\n\n  if (typeof resolvedImplementation === \"string\") {\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      resolvedImplementation = require(resolvedImplementation);\n    } catch (error) {\n      loaderContext.emitError(error); // eslint-disable-next-line consistent-return\n\n      return;\n    }\n  }\n\n  const {\n    info\n  } = resolvedImplementation;\n\n  if (!info) {\n    loaderContext.emitError(new Error(\"Unknown Sass implementation.\"));\n    return;\n  }\n\n  const infoParts = info.split(\"\\t\");\n\n  if (infoParts.length < 2) {\n    loaderContext.emitError(new Error(`Unknown Sass implementation \"${info}\".`));\n    return;\n  }\n\n  const [implementationName] = infoParts;\n\n  if (implementationName === \"dart-sass\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  } else if (implementationName === \"node-sass\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  } else if (implementationName === \"sass-embedded\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  }\n\n  loaderContext.emitError(new Error(`Unknown Sass implementation \"${implementationName}\".`));\n}\n/**\n * @param {any} loaderContext\n * @returns {boolean}\n */\n\n\nfunction isProductionLikeMode(loaderContext) {\n  return loaderContext.mode === \"production\" || !loaderContext.mode;\n}\n\nfunction proxyCustomImporters(importers, loaderContext) {\n  return [].concat(importers).map(importer => function proxyImporter(...args) {\n    const self = { ...this,\n      webpackLoaderContext: loaderContext\n    };\n    return importer.apply(self, args);\n  });\n}\n\nfunction isSupportedFibers() {\n  const [nodeVersion] = process.versions.node.split(\".\");\n  return Number(nodeVersion) < 16;\n}\n/**\n * Derives the sass options from the loader context and normalizes its values with sane defaults.\n *\n * @param {object} loaderContext\n * @param {object} loaderOptions\n * @param {string} content\n * @param {object} implementation\n * @param {boolean} useSourceMap\n * @returns {Object}\n */\n\n\nfunction getSassOptions(_x, _x2, _x3, _x4, _x5) {\n  return _getSassOptions.apply(this, arguments);\n}\n\nfunction _getSassOptions() {\n  _getSassOptions = _asyncToGenerator(function* (loaderContext, loaderOptions, content, implementation, useSourceMap) {\n    const options = (0, _full.klona)(loaderOptions.sassOptions ? typeof loaderOptions.sassOptions === \"function\" ? loaderOptions.sassOptions(loaderContext) || {} : loaderOptions.sassOptions : {});\n    const isDartSass = implementation.info.includes(\"dart-sass\");\n    const isModernAPI = loaderOptions.api === \"modern\";\n    options.data = loaderOptions.additionalData ? typeof loaderOptions.additionalData === \"function\" ? yield loaderOptions.additionalData(content, loaderContext) : `${loaderOptions.additionalData}\\n${content}` : content;\n\n    if (!options.logger) {\n      const needEmitWarning = loaderOptions.warnRuleAsWarning !== false;\n      const logger = loaderContext.getLogger(\"sass-loader\");\n\n      const formatSpan = span => `${span.url || \"-\"}:${span.start.line}:${span.start.column}: `;\n\n      const formatDebugSpan = span => `[debug:${span.start.line}:${span.start.column}] `;\n\n      options.logger = {\n        debug(message, loggerOptions) {\n          let builtMessage = \"\";\n\n          if (loggerOptions.span) {\n            builtMessage = formatDebugSpan(loggerOptions.span);\n          }\n\n          builtMessage += message;\n          logger.debug(builtMessage);\n        },\n\n        warn(message, loggerOptions) {\n          let builtMessage = \"\";\n\n          if (loggerOptions.deprecation) {\n            builtMessage += \"Deprecation \";\n          }\n\n          if (loggerOptions.span && !loggerOptions.stack) {\n            builtMessage = formatSpan(loggerOptions.span);\n          }\n\n          builtMessage += message;\n\n          if (loggerOptions.stack) {\n            builtMessage += `\\n\\n${loggerOptions.stack}`;\n          }\n\n          if (needEmitWarning) {\n            loaderContext.emitWarning(new _SassWarning.default(builtMessage, loggerOptions));\n          } else {\n            logger.warn(builtMessage);\n          }\n        }\n\n      };\n    }\n\n    const {\n      resourcePath\n    } = loaderContext;\n\n    if (isModernAPI) {\n      options.url = _url.default.pathToFileURL(resourcePath); // opt.outputStyle\n\n      if (!options.style && isProductionLikeMode(loaderContext)) {\n        options.style = \"compressed\";\n      }\n\n      if (useSourceMap) {\n        options.sourceMap = true;\n      } // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n\n\n      if (typeof options.syntax === \"undefined\") {\n        const ext = _path.default.extname(resourcePath);\n\n        if (ext && ext.toLowerCase() === \".scss\") {\n          options.syntax = \"scss\";\n        } else if (ext && ext.toLowerCase() === \".sass\") {\n          options.syntax = \"indented\";\n        } else if (ext && ext.toLowerCase() === \".css\") {\n          options.syntax = \"css\";\n        }\n      }\n\n      options.importers = options.importers ? Array.isArray(options.importers) ? options.importers : [options.importers] : [];\n    } else {\n      options.file = resourcePath;\n\n      if (isDartSass && isSupportedFibers()) {\n        const shouldTryToResolveFibers = !options.fiber && options.fiber !== false;\n\n        if (shouldTryToResolveFibers) {\n          let fibers;\n\n          try {\n            fibers = require.resolve(\"fibers\");\n          } catch (_error) {// Nothing\n          }\n\n          if (fibers) {\n            // eslint-disable-next-line global-require, import/no-dynamic-require\n            options.fiber = require(fibers);\n          }\n        } else if (options.fiber === false) {\n          // Don't pass the `fiber` option for `sass` (`Dart Sass`)\n          delete options.fiber;\n        }\n      } else {\n        // Don't pass the `fiber` option for `node-sass`\n        delete options.fiber;\n      } // opt.outputStyle\n\n\n      if (!options.outputStyle && isProductionLikeMode(loaderContext)) {\n        options.outputStyle = \"compressed\";\n      }\n\n      if (useSourceMap) {\n        // Deliberately overriding the sourceMap option here.\n        // node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.\n        // In case it is a string, options.sourceMap should be a path where the source map is written.\n        // But since we're using the data option, the source map will not actually be written, but\n        // all paths in sourceMap.sources will be relative to that path.\n        // Pretty complicated... :(\n        options.sourceMap = true;\n        options.outFile = _path.default.join(loaderContext.rootContext, \"style.css.map\");\n        options.sourceMapContents = true;\n        options.omitSourceMapUrl = true;\n        options.sourceMapEmbed = false;\n      }\n\n      const ext = _path.default.extname(resourcePath); // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n\n\n      if (ext && ext.toLowerCase() === \".sass\" && typeof options.indentedSyntax === \"undefined\") {\n        options.indentedSyntax = true;\n      } else {\n        options.indentedSyntax = Boolean(options.indentedSyntax);\n      } // Allow passing custom importers to `sass`/`node-sass`. Accepts `Function` or an array of `Function`s.\n\n\n      options.importer = options.importer ? proxyCustomImporters(Array.isArray(options.importer) ? options.importer : [options.importer], loaderContext) : [];\n      options.includePaths = [].concat(process.cwd()).concat( // We use `includePaths` in context for resolver, so it should be always absolute\n      (options.includePaths || []).map(includePath => _path.default.isAbsolute(includePath) ? includePath : _path.default.join(process.cwd(), includePath))).concat(process.env.SASS_PATH ? process.env.SASS_PATH.split(process.platform === \"win32\" ? \";\" : \":\") : []);\n\n      if (typeof options.charset === \"undefined\") {\n        options.charset = true;\n      }\n    }\n\n    return options;\n  });\n  return _getSassOptions.apply(this, arguments);\n}\n\nconst MODULE_REQUEST_REGEX = /^[^?]*~/; // Examples:\n// - ~package\n// - ~package/\n// - ~@org\n// - ~@org/\n// - ~@org/package\n// - ~@org/package/\n\nconst IS_MODULE_IMPORT = /^~([^/]+|[^/]+\\/|@[^/]+[/][^/]+|@[^/]+\\/?|@[^/]+[/][^/]+\\/)$/;\n/**\n * When `sass`/`node-sass` tries to resolve an import, it uses a special algorithm.\n * Since the `sass-loader` uses webpack to resolve the modules, we need to simulate that algorithm.\n * This function returns an array of import paths to try.\n * The last entry in the array is always the original url to enable straight-forward webpack.config aliases.\n *\n * We don't need emulate `dart-sass` \"It's not clear which file to import.\" errors (when \"file.ext\" and \"_file.ext\" files are present simultaneously in the same directory).\n * This reduces performance and `dart-sass` always do it on own side.\n *\n * @param {string} url\n * @param {boolean} forWebpackResolver\n * @param {boolean} fromImport\n * @returns {Array<string>}\n */\n\nfunction getPossibleRequests( // eslint-disable-next-line no-shadow\nurl, forWebpackResolver = false, fromImport = false) {\n  let request = url; // In case there is module request, send this to webpack resolver\n\n  if (forWebpackResolver) {\n    if (MODULE_REQUEST_REGEX.test(url)) {\n      request = request.replace(MODULE_REQUEST_REGEX, \"\");\n    }\n\n    if (IS_MODULE_IMPORT.test(url)) {\n      request = request[request.length - 1] === \"/\" ? request : `${request}/`;\n      return [...new Set([request, url])];\n    }\n  } // Keep in mind: ext can also be something like '.datepicker' when the true extension is omitted and the filename contains a dot.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/167\n\n\n  const extension = _path.default.extname(request).toLowerCase(); // Because @import is also defined in CSS, Sass needs a way of compiling plain CSS @imports without trying to import the files at compile time.\n  // To accomplish this, and to ensure SCSS is as much of a superset of CSS as possible, Sass will compile any @imports with the following characteristics to plain CSS imports:\n  //  - imports where the URL ends with .css.\n  //  - imports where the URL begins http:// or https://.\n  //  - imports where the URL is written as a url().\n  //  - imports that have media queries.\n  //\n  // The `node-sass` package sends `@import` ending on `.css` to importer, it is bug, so we skip resolve\n\n\n  if (extension === \".css\") {\n    return [];\n  }\n\n  const dirname = _path.default.dirname(request);\n\n  const normalizedDirname = dirname === \".\" ? \"\" : `${dirname}/`;\n\n  const basename = _path.default.basename(request);\n\n  const basenameWithoutExtension = _path.default.basename(request, extension);\n\n  return [...new Set([].concat(fromImport ? [`${normalizedDirname}_${basenameWithoutExtension}.import${extension}`, `${normalizedDirname}${basenameWithoutExtension}.import${extension}`] : []).concat([`${normalizedDirname}_${basename}`, `${normalizedDirname}${basename}`]).concat(forWebpackResolver ? [url] : []))];\n}\n\nfunction promiseResolve(callbackResolve) {\n  return (context, request) => new Promise((resolve, reject) => {\n    callbackResolve(context, request, (error, result) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\nfunction startResolving(_x6) {\n  return _startResolving.apply(this, arguments);\n}\n\nfunction _startResolving() {\n  _startResolving = _asyncToGenerator(function* (resolutionMap) {\n    if (resolutionMap.length === 0) {\n      return Promise.reject();\n    }\n\n    const [{\n      possibleRequests\n    }] = resolutionMap;\n\n    if (possibleRequests.length === 0) {\n      return Promise.reject();\n    }\n\n    const [{\n      resolve,\n      context\n    }] = resolutionMap;\n\n    try {\n      return yield resolve(context, possibleRequests[0]);\n    } catch (_ignoreError) {\n      const [, ...tailResult] = possibleRequests;\n\n      if (tailResult.length === 0) {\n        const [, ...tailResolutionMap] = resolutionMap;\n        return startResolving(tailResolutionMap);\n      } // eslint-disable-next-line no-param-reassign\n\n\n      resolutionMap[0].possibleRequests = tailResult;\n      return startResolving(resolutionMap);\n    }\n  });\n  return _startResolving.apply(this, arguments);\n}\n\nconst IS_SPECIAL_MODULE_IMPORT = /^~[^/]+$/; // `[drive_letter]:\\` + `\\\\[server]\\[sharename]\\`\n\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\n/**\n * @public\n * Create the resolve function used in the custom Sass importer.\n *\n * Can be used by external tools to mimic how `sass-loader` works, for example\n * in a Jest transform. Such usages will want to wrap `resolve.create` from\n * [`enhanced-resolve`]{@link https://github.com/webpack/enhanced-resolve} to\n * pass as the `resolverFactory` argument.\n *\n * @param {Function} resolverFactory - A factory function for creating a Webpack\n *   resolver.\n * @param {Object} implementation - The imported Sass implementation, both\n *   `sass` (Dart Sass) and `node-sass` are supported.\n * @param {string[]} [includePaths] - The list of include paths passed to Sass.\n *\n * @throws If a compatible Sass implementation cannot be found.\n */\n\nfunction getWebpackResolver(resolverFactory, implementation, includePaths = []) {\n  const isDartSass = implementation && implementation.info.includes(\"dart-sass\"); // We only have one difference with the built-in sass resolution logic and out resolution logic:\n  // First, we look at the files starting with `_`, then without `_` (i.e. `_name.sass`, `_name.scss`, `_name.css`, `name.sass`, `name.scss`, `name.css`),\n  // although `sass` look together by extensions (i.e. `_name.sass`/`name.sass`/`_name.scss`/`name.scss`/`_name.css`/`name.css`).\n  // It shouldn't be a problem because `sass` throw errors:\n  // - on having `_name.sass` and `name.sass` (extension can be `sass`, `scss` or `css`) in the same directory\n  // - on having `_name.sass` and `_name.scss` in the same directory\n  //\n  // Also `sass` prefer `sass`/`scss` over `css`.\n\n  const sassModuleResolve = promiseResolve(resolverFactory({\n    alias: [],\n    aliasFields: [],\n    conditionNames: [],\n    descriptionFiles: [],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    exportsFields: [],\n    mainFields: [],\n    mainFiles: [\"_index\", \"index\"],\n    modules: [],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const sassImportResolve = promiseResolve(resolverFactory({\n    alias: [],\n    aliasFields: [],\n    conditionNames: [],\n    descriptionFiles: [],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    exportsFields: [],\n    mainFields: [],\n    mainFiles: [\"_index.import\", \"_index\", \"index.import\", \"index\"],\n    modules: [],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const webpackModuleResolve = promiseResolve(resolverFactory({\n    dependencyType: \"sass\",\n    conditionNames: [\"sass\", \"style\"],\n    mainFields: [\"sass\", \"style\", \"main\", \"...\"],\n    mainFiles: [\"_index\", \"index\", \"...\"],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const webpackImportResolve = promiseResolve(resolverFactory({\n    dependencyType: \"sass\",\n    conditionNames: [\"sass\", \"style\"],\n    mainFields: [\"sass\", \"style\", \"main\", \"...\"],\n    mainFiles: [\"_index.import\", \"_index\", \"index.import\", \"index\", \"...\"],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  return (context, request, fromImport) => {\n    // See https://github.com/webpack/webpack/issues/12340\n    // Because `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`\n    // custom importer may not return `{ file: '/path/to/name.ext' }` and therefore our `context` will be relative\n    if (!isDartSass && !_path.default.isAbsolute(context)) {\n      return Promise.reject();\n    }\n\n    const originalRequest = request;\n    const isFileScheme = originalRequest.slice(0, 5).toLowerCase() === \"file:\";\n\n    if (isFileScheme) {\n      try {\n        // eslint-disable-next-line no-param-reassign\n        request = _url.default.fileURLToPath(originalRequest);\n      } catch (ignoreError) {\n        // eslint-disable-next-line no-param-reassign\n        request = request.slice(7);\n      }\n    }\n\n    let resolutionMap = [];\n    const needEmulateSassResolver = // `sass` doesn't support module import\n    !IS_SPECIAL_MODULE_IMPORT.test(request) && // We need improve absolute paths handling.\n    // Absolute paths should be resolved:\n    // - Server-relative URLs - `<context>/path/to/file.ext` (where `<context>` is root context)\n    // - Absolute path - `/full/path/to/file.ext` or `C:\\\\full\\path\\to\\file.ext`\n    !isFileScheme && !originalRequest.startsWith(\"/\") && !IS_NATIVE_WIN32_PATH.test(originalRequest);\n\n    if (includePaths.length > 0 && needEmulateSassResolver) {\n      // The order of import precedence is as follows:\n      //\n      // 1. Filesystem imports relative to the base file.\n      // 2. Custom importer imports.\n      // 3. Filesystem imports relative to the working directory.\n      // 4. Filesystem imports relative to an `includePaths` path.\n      // 5. Filesystem imports relative to a `SASS_PATH` path.\n      //\n      // `sass` run custom importers before `3`, `4` and `5` points, we need to emulate this behavior to avoid wrong resolution.\n      const sassPossibleRequests = getPossibleRequests(request, false, fromImport); // `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`, so we need emulate this too\n\n      if (!isDartSass) {\n        resolutionMap = resolutionMap.concat({\n          resolve: fromImport ? sassImportResolve : sassModuleResolve,\n          context: _path.default.dirname(context),\n          possibleRequests: sassPossibleRequests\n        });\n      }\n\n      resolutionMap = resolutionMap.concat( // eslint-disable-next-line no-shadow\n      includePaths.map(context => {\n        return {\n          resolve: fromImport ? sassImportResolve : sassModuleResolve,\n          context,\n          possibleRequests: sassPossibleRequests\n        };\n      }));\n    }\n\n    const webpackPossibleRequests = getPossibleRequests(request, true, fromImport);\n    resolutionMap = resolutionMap.concat({\n      resolve: fromImport ? webpackImportResolve : webpackModuleResolve,\n      context: _path.default.dirname(context),\n      possibleRequests: webpackPossibleRequests\n    });\n    return startResolving(resolutionMap);\n  };\n}\n\nconst MATCH_CSS = /\\.css$/i;\n\nfunction getModernWebpackImporter() {\n  return {\n    canonicalize() {\n      return _asyncToGenerator(function* () {\n        return null;\n      })();\n    },\n\n    load() {// TODO implement\n    }\n\n  };\n}\n\nfunction getWebpackImporter(loaderContext, implementation, includePaths) {\n  const resolve = getWebpackResolver(loaderContext.getResolve, implementation, includePaths);\n  return function importer(originalUrl, prev, done) {\n    const {\n      fromImport\n    } = this;\n    resolve(prev, originalUrl, fromImport).then(result => {\n      // Add the result as dependency.\n      // Although we're also using stats.includedFiles, this might come in handy when an error occurs.\n      // In this case, we don't get stats.includedFiles from node-sass/sass.\n      loaderContext.addDependency(_path.default.normalize(result)); // By removing the CSS file extension, we trigger node-sass to include the CSS file instead of just linking it.\n\n      done({\n        file: result.replace(MATCH_CSS, \"\")\n      });\n    }) // Catch all resolving errors, return the original file and pass responsibility back to other custom importers\n    .catch(() => {\n      done({\n        file: originalUrl\n      });\n    });\n  };\n}\n\nlet nodeSassJobQueue = null;\n/**\n * Verifies that the implementation and version of Sass is supported by this loader.\n *\n * @param {Object} implementation\n * @param {Object} options\n * @returns {Function}\n */\n\nfunction getCompileFn(implementation, options) {\n  const isNewSass = implementation.info.includes(\"dart-sass\") || implementation.info.includes(\"sass-embedded\");\n\n  if (isNewSass) {\n    if (options.api === \"modern\") {\n      return sassOptions => {\n        const {\n          data,\n          ...rest\n        } = sassOptions;\n        return implementation.compileStringAsync(data, rest);\n      };\n    }\n\n    return sassOptions => new Promise((resolve, reject) => {\n      implementation.render(sassOptions, (error, result) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(result);\n      });\n    });\n  }\n\n  if (options.api === \"modern\") {\n    throw new Error(\"Modern API is not supported for 'node-sass'\");\n  } // There is an issue with node-sass when async custom importers are used\n  // See https://github.com/sass/node-sass/issues/857#issuecomment-93594360\n  // We need to use a job queue to make sure that one thread is always available to the UV lib\n\n\n  if (nodeSassJobQueue === null) {\n    const threadPoolSize = Number(process.env.UV_THREADPOOL_SIZE || 4);\n    nodeSassJobQueue = _neoAsync.default.queue(implementation.render.bind(implementation), threadPoolSize - 1);\n  }\n\n  return sassOptions => new Promise((resolve, reject) => {\n    nodeSassJobQueue.push.bind(nodeSassJobQueue)(sassOptions, (error, result) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      resolve(result);\n    });\n  });\n}\n\nconst ABSOLUTE_SCHEME = /^[A-Za-z0-9+\\-.]+:/;\n/**\n * @param {string} source\n * @returns {\"absolute\" | \"scheme-relative\" | \"path-absolute\" | \"path-absolute\"}\n */\n\nfunction getURLType(source) {\n  if (source[0] === \"/\") {\n    if (source[1] === \"/\") {\n      return \"scheme-relative\";\n    }\n\n    return \"path-absolute\";\n  }\n\n  if (IS_NATIVE_WIN32_PATH.test(source)) {\n    return \"path-absolute\";\n  }\n\n  return ABSOLUTE_SCHEME.test(source) ? \"absolute\" : \"path-relative\";\n}\n\nfunction normalizeSourceMap(map, rootContext) {\n  const newMap = map; // result.map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  if (typeof newMap.file !== \"undefined\") {\n    delete newMap.file;\n  } // eslint-disable-next-line no-param-reassign\n\n\n  newMap.sourceRoot = \"\"; // node-sass returns POSIX paths, that's why we need to transform them back to native paths.\n  // This fixes an error on windows where the source-map module cannot resolve the source maps.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/366#issuecomment-279460722\n  // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => {\n    const sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types (except `file:`)\n\n    if (sourceType === \"absolute\" && /^file:/i.test(source)) {\n      return _url.default.fileURLToPath(source);\n    } else if (sourceType === \"path-relative\") {\n      return _path.default.resolve(rootContext, _path.default.normalize(source));\n    }\n\n    return source;\n  });\n  return newMap;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getCompileFn","getModernWebpackImporter","getSassImplementation","getSassOptions","getWebpackImporter","getWebpackResolver","isSupportedFibers","normalizeSourceMap","_url","_interopRequireDefault","require","_path","_full","_neoAsync","_SassWarning","obj","__esModule","default","getDefaultSassImplementation","sassImplPkg","resolve","ignoreError","_ignoreError","__ignoreError","loaderContext","implementation","resolvedImplementation","error","emitError","info","Error","infoParts","split","length","implementationName","isProductionLikeMode","mode","proxyCustomImporters","importers","concat","map","importer","proxyImporter","args","self","webpackLoaderContext","apply","nodeVersion","process","versions","node","Number","loaderOptions","content","useSourceMap","options","klona","sassOptions","isDartSass","includes","isModernAPI","api","data","additionalData","logger","needEmitWarning","warnRuleAsWarning","getLogger","formatSpan","span","url","start","line","column","formatDebugSpan","debug","message","loggerOptions","builtMessage","warn","deprecation","stack","emitWarning","resourcePath","pathToFileURL","style","sourceMap","syntax","ext","extname","toLowerCase","Array","isArray","file","shouldTryToResolveFibers","fiber","fibers","_error","outputStyle","outFile","join","rootContext","sourceMapContents","omitSourceMapUrl","sourceMapEmbed","indentedSyntax","Boolean","includePaths","cwd","includePath","isAbsolute","env","SASS_PATH","platform","charset","MODULE_REQUEST_REGEX","IS_MODULE_IMPORT","getPossibleRequests","forWebpackResolver","fromImport","request","test","replace","Set","extension","dirname","normalizedDirname","basename","basenameWithoutExtension","promiseResolve","callbackResolve","context","Promise","reject","result","startResolving","resolutionMap","possibleRequests","tailResult","tailResolutionMap","IS_SPECIAL_MODULE_IMPORT","IS_NATIVE_WIN32_PATH","resolverFactory","sassModuleResolve","alias","aliasFields","conditionNames","descriptionFiles","extensions","exportsFields","mainFields","mainFiles","modules","restrictions","preferRelative","sassImportResolve","webpackModuleResolve","dependencyType","webpackImportResolve","originalRequest","isFileScheme","slice","fileURLToPath","needEmulateSassResolver","startsWith","sassPossibleRequests","webpackPossibleRequests","MATCH_CSS","canonicalize","load","getResolve","originalUrl","prev","done","then","addDependency","normalize","catch","nodeSassJobQueue","isNewSass","rest","compileStringAsync","render","threadPoolSize","UV_THREADPOOL_SIZE","queue","bind","push","ABSOLUTE_SCHEME","getURLType","source","newMap","sourceRoot","sources","sourceType"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/sass-loader/dist/utils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCompileFn = getCompileFn;\nexports.getModernWebpackImporter = getModernWebpackImporter;\nexports.getSassImplementation = getSassImplementation;\nexports.getSassOptions = getSassOptions;\nexports.getWebpackImporter = getWebpackImporter;\nexports.getWebpackResolver = getWebpackResolver;\nexports.isSupportedFibers = isSupportedFibers;\nexports.normalizeSourceMap = normalizeSourceMap;\n\nvar _url = _interopRequireDefault(require(\"url\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _full = require(\"klona/full\");\n\nvar _neoAsync = _interopRequireDefault(require(\"neo-async\"));\n\nvar _SassWarning = _interopRequireDefault(require(\"./SassWarning\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getDefaultSassImplementation() {\n  let sassImplPkg = \"sass\";\n\n  try {\n    require.resolve(\"sass\");\n  } catch (ignoreError) {\n    try {\n      require.resolve(\"node-sass\");\n\n      sassImplPkg = \"node-sass\";\n    } catch (_ignoreError) {\n      try {\n        require.resolve(\"sass-embedded\");\n\n        sassImplPkg = \"sass-embedded\";\n      } catch (__ignoreError) {\n        sassImplPkg = \"sass\";\n      }\n    }\n  } // eslint-disable-next-line import/no-dynamic-require, global-require\n\n\n  return require(sassImplPkg);\n}\n/**\n * This function is not Webpack-specific and can be used by tools wishing to mimic `sass-loader`'s behaviour, so its signature should not be changed.\n */\n\n\nfunction getSassImplementation(loaderContext, implementation) {\n  let resolvedImplementation = implementation;\n\n  if (!resolvedImplementation) {\n    try {\n      resolvedImplementation = getDefaultSassImplementation();\n    } catch (error) {\n      loaderContext.emitError(error);\n      return;\n    }\n  }\n\n  if (typeof resolvedImplementation === \"string\") {\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      resolvedImplementation = require(resolvedImplementation);\n    } catch (error) {\n      loaderContext.emitError(error); // eslint-disable-next-line consistent-return\n\n      return;\n    }\n  }\n\n  const {\n    info\n  } = resolvedImplementation;\n\n  if (!info) {\n    loaderContext.emitError(new Error(\"Unknown Sass implementation.\"));\n    return;\n  }\n\n  const infoParts = info.split(\"\\t\");\n\n  if (infoParts.length < 2) {\n    loaderContext.emitError(new Error(`Unknown Sass implementation \"${info}\".`));\n    return;\n  }\n\n  const [implementationName] = infoParts;\n\n  if (implementationName === \"dart-sass\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  } else if (implementationName === \"node-sass\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  } else if (implementationName === \"sass-embedded\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  }\n\n  loaderContext.emitError(new Error(`Unknown Sass implementation \"${implementationName}\".`));\n}\n/**\n * @param {any} loaderContext\n * @returns {boolean}\n */\n\n\nfunction isProductionLikeMode(loaderContext) {\n  return loaderContext.mode === \"production\" || !loaderContext.mode;\n}\n\nfunction proxyCustomImporters(importers, loaderContext) {\n  return [].concat(importers).map(importer => function proxyImporter(...args) {\n    const self = { ...this,\n      webpackLoaderContext: loaderContext\n    };\n    return importer.apply(self, args);\n  });\n}\n\nfunction isSupportedFibers() {\n  const [nodeVersion] = process.versions.node.split(\".\");\n  return Number(nodeVersion) < 16;\n}\n/**\n * Derives the sass options from the loader context and normalizes its values with sane defaults.\n *\n * @param {object} loaderContext\n * @param {object} loaderOptions\n * @param {string} content\n * @param {object} implementation\n * @param {boolean} useSourceMap\n * @returns {Object}\n */\n\n\nasync function getSassOptions(loaderContext, loaderOptions, content, implementation, useSourceMap) {\n  const options = (0, _full.klona)(loaderOptions.sassOptions ? typeof loaderOptions.sassOptions === \"function\" ? loaderOptions.sassOptions(loaderContext) || {} : loaderOptions.sassOptions : {});\n  const isDartSass = implementation.info.includes(\"dart-sass\");\n  const isModernAPI = loaderOptions.api === \"modern\";\n  options.data = loaderOptions.additionalData ? typeof loaderOptions.additionalData === \"function\" ? await loaderOptions.additionalData(content, loaderContext) : `${loaderOptions.additionalData}\\n${content}` : content;\n\n  if (!options.logger) {\n    const needEmitWarning = loaderOptions.warnRuleAsWarning !== false;\n    const logger = loaderContext.getLogger(\"sass-loader\");\n\n    const formatSpan = span => `${span.url || \"-\"}:${span.start.line}:${span.start.column}: `;\n\n    const formatDebugSpan = span => `[debug:${span.start.line}:${span.start.column}] `;\n\n    options.logger = {\n      debug(message, loggerOptions) {\n        let builtMessage = \"\";\n\n        if (loggerOptions.span) {\n          builtMessage = formatDebugSpan(loggerOptions.span);\n        }\n\n        builtMessage += message;\n        logger.debug(builtMessage);\n      },\n\n      warn(message, loggerOptions) {\n        let builtMessage = \"\";\n\n        if (loggerOptions.deprecation) {\n          builtMessage += \"Deprecation \";\n        }\n\n        if (loggerOptions.span && !loggerOptions.stack) {\n          builtMessage = formatSpan(loggerOptions.span);\n        }\n\n        builtMessage += message;\n\n        if (loggerOptions.stack) {\n          builtMessage += `\\n\\n${loggerOptions.stack}`;\n        }\n\n        if (needEmitWarning) {\n          loaderContext.emitWarning(new _SassWarning.default(builtMessage, loggerOptions));\n        } else {\n          logger.warn(builtMessage);\n        }\n      }\n\n    };\n  }\n\n  const {\n    resourcePath\n  } = loaderContext;\n\n  if (isModernAPI) {\n    options.url = _url.default.pathToFileURL(resourcePath); // opt.outputStyle\n\n    if (!options.style && isProductionLikeMode(loaderContext)) {\n      options.style = \"compressed\";\n    }\n\n    if (useSourceMap) {\n      options.sourceMap = true;\n    } // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n\n\n    if (typeof options.syntax === \"undefined\") {\n      const ext = _path.default.extname(resourcePath);\n\n      if (ext && ext.toLowerCase() === \".scss\") {\n        options.syntax = \"scss\";\n      } else if (ext && ext.toLowerCase() === \".sass\") {\n        options.syntax = \"indented\";\n      } else if (ext && ext.toLowerCase() === \".css\") {\n        options.syntax = \"css\";\n      }\n    }\n\n    options.importers = options.importers ? Array.isArray(options.importers) ? options.importers : [options.importers] : [];\n  } else {\n    options.file = resourcePath;\n\n    if (isDartSass && isSupportedFibers()) {\n      const shouldTryToResolveFibers = !options.fiber && options.fiber !== false;\n\n      if (shouldTryToResolveFibers) {\n        let fibers;\n\n        try {\n          fibers = require.resolve(\"fibers\");\n        } catch (_error) {// Nothing\n        }\n\n        if (fibers) {\n          // eslint-disable-next-line global-require, import/no-dynamic-require\n          options.fiber = require(fibers);\n        }\n      } else if (options.fiber === false) {\n        // Don't pass the `fiber` option for `sass` (`Dart Sass`)\n        delete options.fiber;\n      }\n    } else {\n      // Don't pass the `fiber` option for `node-sass`\n      delete options.fiber;\n    } // opt.outputStyle\n\n\n    if (!options.outputStyle && isProductionLikeMode(loaderContext)) {\n      options.outputStyle = \"compressed\";\n    }\n\n    if (useSourceMap) {\n      // Deliberately overriding the sourceMap option here.\n      // node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.\n      // In case it is a string, options.sourceMap should be a path where the source map is written.\n      // But since we're using the data option, the source map will not actually be written, but\n      // all paths in sourceMap.sources will be relative to that path.\n      // Pretty complicated... :(\n      options.sourceMap = true;\n      options.outFile = _path.default.join(loaderContext.rootContext, \"style.css.map\");\n      options.sourceMapContents = true;\n      options.omitSourceMapUrl = true;\n      options.sourceMapEmbed = false;\n    }\n\n    const ext = _path.default.extname(resourcePath); // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n\n\n    if (ext && ext.toLowerCase() === \".sass\" && typeof options.indentedSyntax === \"undefined\") {\n      options.indentedSyntax = true;\n    } else {\n      options.indentedSyntax = Boolean(options.indentedSyntax);\n    } // Allow passing custom importers to `sass`/`node-sass`. Accepts `Function` or an array of `Function`s.\n\n\n    options.importer = options.importer ? proxyCustomImporters(Array.isArray(options.importer) ? options.importer : [options.importer], loaderContext) : [];\n    options.includePaths = [].concat(process.cwd()).concat( // We use `includePaths` in context for resolver, so it should be always absolute\n    (options.includePaths || []).map(includePath => _path.default.isAbsolute(includePath) ? includePath : _path.default.join(process.cwd(), includePath))).concat(process.env.SASS_PATH ? process.env.SASS_PATH.split(process.platform === \"win32\" ? \";\" : \":\") : []);\n\n    if (typeof options.charset === \"undefined\") {\n      options.charset = true;\n    }\n  }\n\n  return options;\n}\n\nconst MODULE_REQUEST_REGEX = /^[^?]*~/; // Examples:\n// - ~package\n// - ~package/\n// - ~@org\n// - ~@org/\n// - ~@org/package\n// - ~@org/package/\n\nconst IS_MODULE_IMPORT = /^~([^/]+|[^/]+\\/|@[^/]+[/][^/]+|@[^/]+\\/?|@[^/]+[/][^/]+\\/)$/;\n/**\n * When `sass`/`node-sass` tries to resolve an import, it uses a special algorithm.\n * Since the `sass-loader` uses webpack to resolve the modules, we need to simulate that algorithm.\n * This function returns an array of import paths to try.\n * The last entry in the array is always the original url to enable straight-forward webpack.config aliases.\n *\n * We don't need emulate `dart-sass` \"It's not clear which file to import.\" errors (when \"file.ext\" and \"_file.ext\" files are present simultaneously in the same directory).\n * This reduces performance and `dart-sass` always do it on own side.\n *\n * @param {string} url\n * @param {boolean} forWebpackResolver\n * @param {boolean} fromImport\n * @returns {Array<string>}\n */\n\nfunction getPossibleRequests( // eslint-disable-next-line no-shadow\nurl, forWebpackResolver = false, fromImport = false) {\n  let request = url; // In case there is module request, send this to webpack resolver\n\n  if (forWebpackResolver) {\n    if (MODULE_REQUEST_REGEX.test(url)) {\n      request = request.replace(MODULE_REQUEST_REGEX, \"\");\n    }\n\n    if (IS_MODULE_IMPORT.test(url)) {\n      request = request[request.length - 1] === \"/\" ? request : `${request}/`;\n      return [...new Set([request, url])];\n    }\n  } // Keep in mind: ext can also be something like '.datepicker' when the true extension is omitted and the filename contains a dot.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/167\n\n\n  const extension = _path.default.extname(request).toLowerCase(); // Because @import is also defined in CSS, Sass needs a way of compiling plain CSS @imports without trying to import the files at compile time.\n  // To accomplish this, and to ensure SCSS is as much of a superset of CSS as possible, Sass will compile any @imports with the following characteristics to plain CSS imports:\n  //  - imports where the URL ends with .css.\n  //  - imports where the URL begins http:// or https://.\n  //  - imports where the URL is written as a url().\n  //  - imports that have media queries.\n  //\n  // The `node-sass` package sends `@import` ending on `.css` to importer, it is bug, so we skip resolve\n\n\n  if (extension === \".css\") {\n    return [];\n  }\n\n  const dirname = _path.default.dirname(request);\n\n  const normalizedDirname = dirname === \".\" ? \"\" : `${dirname}/`;\n\n  const basename = _path.default.basename(request);\n\n  const basenameWithoutExtension = _path.default.basename(request, extension);\n\n  return [...new Set([].concat(fromImport ? [`${normalizedDirname}_${basenameWithoutExtension}.import${extension}`, `${normalizedDirname}${basenameWithoutExtension}.import${extension}`] : []).concat([`${normalizedDirname}_${basename}`, `${normalizedDirname}${basename}`]).concat(forWebpackResolver ? [url] : []))];\n}\n\nfunction promiseResolve(callbackResolve) {\n  return (context, request) => new Promise((resolve, reject) => {\n    callbackResolve(context, request, (error, result) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\nasync function startResolving(resolutionMap) {\n  if (resolutionMap.length === 0) {\n    return Promise.reject();\n  }\n\n  const [{\n    possibleRequests\n  }] = resolutionMap;\n\n  if (possibleRequests.length === 0) {\n    return Promise.reject();\n  }\n\n  const [{\n    resolve,\n    context\n  }] = resolutionMap;\n\n  try {\n    return await resolve(context, possibleRequests[0]);\n  } catch (_ignoreError) {\n    const [, ...tailResult] = possibleRequests;\n\n    if (tailResult.length === 0) {\n      const [, ...tailResolutionMap] = resolutionMap;\n      return startResolving(tailResolutionMap);\n    } // eslint-disable-next-line no-param-reassign\n\n\n    resolutionMap[0].possibleRequests = tailResult;\n    return startResolving(resolutionMap);\n  }\n}\n\nconst IS_SPECIAL_MODULE_IMPORT = /^~[^/]+$/; // `[drive_letter]:\\` + `\\\\[server]\\[sharename]\\`\n\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\n/**\n * @public\n * Create the resolve function used in the custom Sass importer.\n *\n * Can be used by external tools to mimic how `sass-loader` works, for example\n * in a Jest transform. Such usages will want to wrap `resolve.create` from\n * [`enhanced-resolve`]{@link https://github.com/webpack/enhanced-resolve} to\n * pass as the `resolverFactory` argument.\n *\n * @param {Function} resolverFactory - A factory function for creating a Webpack\n *   resolver.\n * @param {Object} implementation - The imported Sass implementation, both\n *   `sass` (Dart Sass) and `node-sass` are supported.\n * @param {string[]} [includePaths] - The list of include paths passed to Sass.\n *\n * @throws If a compatible Sass implementation cannot be found.\n */\n\nfunction getWebpackResolver(resolverFactory, implementation, includePaths = []) {\n  const isDartSass = implementation && implementation.info.includes(\"dart-sass\"); // We only have one difference with the built-in sass resolution logic and out resolution logic:\n  // First, we look at the files starting with `_`, then without `_` (i.e. `_name.sass`, `_name.scss`, `_name.css`, `name.sass`, `name.scss`, `name.css`),\n  // although `sass` look together by extensions (i.e. `_name.sass`/`name.sass`/`_name.scss`/`name.scss`/`_name.css`/`name.css`).\n  // It shouldn't be a problem because `sass` throw errors:\n  // - on having `_name.sass` and `name.sass` (extension can be `sass`, `scss` or `css`) in the same directory\n  // - on having `_name.sass` and `_name.scss` in the same directory\n  //\n  // Also `sass` prefer `sass`/`scss` over `css`.\n\n  const sassModuleResolve = promiseResolve(resolverFactory({\n    alias: [],\n    aliasFields: [],\n    conditionNames: [],\n    descriptionFiles: [],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    exportsFields: [],\n    mainFields: [],\n    mainFiles: [\"_index\", \"index\"],\n    modules: [],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const sassImportResolve = promiseResolve(resolverFactory({\n    alias: [],\n    aliasFields: [],\n    conditionNames: [],\n    descriptionFiles: [],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    exportsFields: [],\n    mainFields: [],\n    mainFiles: [\"_index.import\", \"_index\", \"index.import\", \"index\"],\n    modules: [],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const webpackModuleResolve = promiseResolve(resolverFactory({\n    dependencyType: \"sass\",\n    conditionNames: [\"sass\", \"style\"],\n    mainFields: [\"sass\", \"style\", \"main\", \"...\"],\n    mainFiles: [\"_index\", \"index\", \"...\"],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const webpackImportResolve = promiseResolve(resolverFactory({\n    dependencyType: \"sass\",\n    conditionNames: [\"sass\", \"style\"],\n    mainFields: [\"sass\", \"style\", \"main\", \"...\"],\n    mainFiles: [\"_index.import\", \"_index\", \"index.import\", \"index\", \"...\"],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  return (context, request, fromImport) => {\n    // See https://github.com/webpack/webpack/issues/12340\n    // Because `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`\n    // custom importer may not return `{ file: '/path/to/name.ext' }` and therefore our `context` will be relative\n    if (!isDartSass && !_path.default.isAbsolute(context)) {\n      return Promise.reject();\n    }\n\n    const originalRequest = request;\n    const isFileScheme = originalRequest.slice(0, 5).toLowerCase() === \"file:\";\n\n    if (isFileScheme) {\n      try {\n        // eslint-disable-next-line no-param-reassign\n        request = _url.default.fileURLToPath(originalRequest);\n      } catch (ignoreError) {\n        // eslint-disable-next-line no-param-reassign\n        request = request.slice(7);\n      }\n    }\n\n    let resolutionMap = [];\n    const needEmulateSassResolver = // `sass` doesn't support module import\n    !IS_SPECIAL_MODULE_IMPORT.test(request) && // We need improve absolute paths handling.\n    // Absolute paths should be resolved:\n    // - Server-relative URLs - `<context>/path/to/file.ext` (where `<context>` is root context)\n    // - Absolute path - `/full/path/to/file.ext` or `C:\\\\full\\path\\to\\file.ext`\n    !isFileScheme && !originalRequest.startsWith(\"/\") && !IS_NATIVE_WIN32_PATH.test(originalRequest);\n\n    if (includePaths.length > 0 && needEmulateSassResolver) {\n      // The order of import precedence is as follows:\n      //\n      // 1. Filesystem imports relative to the base file.\n      // 2. Custom importer imports.\n      // 3. Filesystem imports relative to the working directory.\n      // 4. Filesystem imports relative to an `includePaths` path.\n      // 5. Filesystem imports relative to a `SASS_PATH` path.\n      //\n      // `sass` run custom importers before `3`, `4` and `5` points, we need to emulate this behavior to avoid wrong resolution.\n      const sassPossibleRequests = getPossibleRequests(request, false, fromImport); // `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`, so we need emulate this too\n\n      if (!isDartSass) {\n        resolutionMap = resolutionMap.concat({\n          resolve: fromImport ? sassImportResolve : sassModuleResolve,\n          context: _path.default.dirname(context),\n          possibleRequests: sassPossibleRequests\n        });\n      }\n\n      resolutionMap = resolutionMap.concat( // eslint-disable-next-line no-shadow\n      includePaths.map(context => {\n        return {\n          resolve: fromImport ? sassImportResolve : sassModuleResolve,\n          context,\n          possibleRequests: sassPossibleRequests\n        };\n      }));\n    }\n\n    const webpackPossibleRequests = getPossibleRequests(request, true, fromImport);\n    resolutionMap = resolutionMap.concat({\n      resolve: fromImport ? webpackImportResolve : webpackModuleResolve,\n      context: _path.default.dirname(context),\n      possibleRequests: webpackPossibleRequests\n    });\n    return startResolving(resolutionMap);\n  };\n}\n\nconst MATCH_CSS = /\\.css$/i;\n\nfunction getModernWebpackImporter() {\n  return {\n    async canonicalize() {\n      return null;\n    },\n\n    load() {// TODO implement\n    }\n\n  };\n}\n\nfunction getWebpackImporter(loaderContext, implementation, includePaths) {\n  const resolve = getWebpackResolver(loaderContext.getResolve, implementation, includePaths);\n  return function importer(originalUrl, prev, done) {\n    const {\n      fromImport\n    } = this;\n    resolve(prev, originalUrl, fromImport).then(result => {\n      // Add the result as dependency.\n      // Although we're also using stats.includedFiles, this might come in handy when an error occurs.\n      // In this case, we don't get stats.includedFiles from node-sass/sass.\n      loaderContext.addDependency(_path.default.normalize(result)); // By removing the CSS file extension, we trigger node-sass to include the CSS file instead of just linking it.\n\n      done({\n        file: result.replace(MATCH_CSS, \"\")\n      });\n    }) // Catch all resolving errors, return the original file and pass responsibility back to other custom importers\n    .catch(() => {\n      done({\n        file: originalUrl\n      });\n    });\n  };\n}\n\nlet nodeSassJobQueue = null;\n/**\n * Verifies that the implementation and version of Sass is supported by this loader.\n *\n * @param {Object} implementation\n * @param {Object} options\n * @returns {Function}\n */\n\nfunction getCompileFn(implementation, options) {\n  const isNewSass = implementation.info.includes(\"dart-sass\") || implementation.info.includes(\"sass-embedded\");\n\n  if (isNewSass) {\n    if (options.api === \"modern\") {\n      return sassOptions => {\n        const {\n          data,\n          ...rest\n        } = sassOptions;\n        return implementation.compileStringAsync(data, rest);\n      };\n    }\n\n    return sassOptions => new Promise((resolve, reject) => {\n      implementation.render(sassOptions, (error, result) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(result);\n      });\n    });\n  }\n\n  if (options.api === \"modern\") {\n    throw new Error(\"Modern API is not supported for 'node-sass'\");\n  } // There is an issue with node-sass when async custom importers are used\n  // See https://github.com/sass/node-sass/issues/857#issuecomment-93594360\n  // We need to use a job queue to make sure that one thread is always available to the UV lib\n\n\n  if (nodeSassJobQueue === null) {\n    const threadPoolSize = Number(process.env.UV_THREADPOOL_SIZE || 4);\n    nodeSassJobQueue = _neoAsync.default.queue(implementation.render.bind(implementation), threadPoolSize - 1);\n  }\n\n  return sassOptions => new Promise((resolve, reject) => {\n    nodeSassJobQueue.push.bind(nodeSassJobQueue)(sassOptions, (error, result) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      resolve(result);\n    });\n  });\n}\n\nconst ABSOLUTE_SCHEME = /^[A-Za-z0-9+\\-.]+:/;\n/**\n * @param {string} source\n * @returns {\"absolute\" | \"scheme-relative\" | \"path-absolute\" | \"path-absolute\"}\n */\n\nfunction getURLType(source) {\n  if (source[0] === \"/\") {\n    if (source[1] === \"/\") {\n      return \"scheme-relative\";\n    }\n\n    return \"path-absolute\";\n  }\n\n  if (IS_NATIVE_WIN32_PATH.test(source)) {\n    return \"path-absolute\";\n  }\n\n  return ABSOLUTE_SCHEME.test(source) ? \"absolute\" : \"path-relative\";\n}\n\nfunction normalizeSourceMap(map, rootContext) {\n  const newMap = map; // result.map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  if (typeof newMap.file !== \"undefined\") {\n    delete newMap.file;\n  } // eslint-disable-next-line no-param-reassign\n\n\n  newMap.sourceRoot = \"\"; // node-sass returns POSIX paths, that's why we need to transform them back to native paths.\n  // This fixes an error on windows where the source-map module cannot resolve the source maps.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/366#issuecomment-279460722\n  // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => {\n    const sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types (except `file:`)\n\n    if (sourceType === \"absolute\" && /^file:/i.test(source)) {\n      return _url.default.fileURLToPath(source);\n    } else if (sourceType === \"path-relative\") {\n      return _path.default.resolve(rootContext, _path.default.normalize(source));\n    }\n\n    return source;\n  });\n  return newMap;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}