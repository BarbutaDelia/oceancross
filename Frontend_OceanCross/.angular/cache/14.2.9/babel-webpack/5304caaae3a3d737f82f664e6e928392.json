{"ast":null,"code":"import _asyncToGenerator from \"/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport process from 'node:process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport fastGlob from 'fast-glob';\nimport gitIgnore from 'ignore';\nimport slash from 'slash';\nimport { toPath, isNegativePattern } from './utilities.js';\nconst ignoreFilesGlobOptions = {\n  ignore: ['**/node_modules', '**/flow-typed', '**/coverage', '**/.git'],\n  absolute: true,\n  dot: true\n};\nexport const GITIGNORE_FILES_PATTERN = '**/.gitignore';\n\nconst applyBaseToPattern = (pattern, base) => isNegativePattern(pattern) ? '!' + path.posix.join(base, pattern.slice(1)) : path.posix.join(base, pattern);\n\nconst parseIgnoreFile = (file, cwd) => {\n  const base = slash(path.relative(cwd, path.dirname(file.filePath)));\n  return file.content.split(/\\r?\\n/).filter(line => line && !line.startsWith('#')).map(pattern => applyBaseToPattern(pattern, base));\n};\n\nconst toRelativePath = (fileOrDirectory, cwd) => {\n  cwd = slash(cwd);\n\n  if (path.isAbsolute(fileOrDirectory)) {\n    if (slash(fileOrDirectory).startsWith(cwd)) {\n      return path.relative(cwd, fileOrDirectory);\n    }\n\n    throw new Error(`Path ${fileOrDirectory} is not in cwd ${cwd}`);\n  }\n\n  return fileOrDirectory;\n};\n\nconst getIsIgnoredPredicate = (files, cwd) => {\n  const patterns = files.flatMap(file => parseIgnoreFile(file, cwd));\n  const ignores = gitIgnore().add(patterns);\n  return fileOrDirectory => {\n    fileOrDirectory = toPath(fileOrDirectory);\n    fileOrDirectory = toRelativePath(fileOrDirectory, cwd);\n    return ignores.ignores(slash(fileOrDirectory));\n  };\n};\n\nconst normalizeOptions = (options = {}) => ({\n  cwd: toPath(options.cwd) || process.cwd()\n});\n\nexport const isIgnoredByIgnoreFiles = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (patterns, options) {\n    const {\n      cwd\n    } = normalizeOptions(options);\n    const paths = yield fastGlob(patterns, {\n      cwd,\n      ...ignoreFilesGlobOptions\n    });\n    const files = yield Promise.all(paths.map( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (filePath) {\n        return {\n          filePath,\n          content: yield fs.promises.readFile(filePath, 'utf8')\n        };\n      });\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()));\n    return getIsIgnoredPredicate(files, cwd);\n  });\n\n  return function isIgnoredByIgnoreFiles(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport const isIgnoredByIgnoreFilesSync = (patterns, options) => {\n  const {\n    cwd\n  } = normalizeOptions(options);\n  const paths = fastGlob.sync(patterns, {\n    cwd,\n    ...ignoreFilesGlobOptions\n  });\n  const files = paths.map(filePath => ({\n    filePath,\n    content: fs.readFileSync(filePath, 'utf8')\n  }));\n  return getIsIgnoredPredicate(files, cwd);\n};\nexport const isGitIgnored = options => isIgnoredByIgnoreFiles(GITIGNORE_FILES_PATTERN, options);\nexport const isGitIgnoredSync = options => isIgnoredByIgnoreFilesSync(GITIGNORE_FILES_PATTERN, options);","map":{"version":3,"names":["process","fs","path","fastGlob","gitIgnore","slash","toPath","isNegativePattern","ignoreFilesGlobOptions","ignore","absolute","dot","GITIGNORE_FILES_PATTERN","applyBaseToPattern","pattern","base","posix","join","slice","parseIgnoreFile","file","cwd","relative","dirname","filePath","content","split","filter","line","startsWith","map","toRelativePath","fileOrDirectory","isAbsolute","Error","getIsIgnoredPredicate","files","patterns","flatMap","ignores","add","normalizeOptions","options","isIgnoredByIgnoreFiles","paths","Promise","all","promises","readFile","isIgnoredByIgnoreFilesSync","sync","readFileSync","isGitIgnored","isGitIgnoredSync"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/globby/ignore.js"],"sourcesContent":["import process from 'node:process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport fastGlob from 'fast-glob';\nimport gitIgnore from 'ignore';\nimport slash from 'slash';\nimport {toPath, isNegativePattern} from './utilities.js';\n\nconst ignoreFilesGlobOptions = {\n\tignore: [\n\t\t'**/node_modules',\n\t\t'**/flow-typed',\n\t\t'**/coverage',\n\t\t'**/.git',\n\t],\n\tabsolute: true,\n\tdot: true,\n};\n\nexport const GITIGNORE_FILES_PATTERN = '**/.gitignore';\n\nconst applyBaseToPattern = (pattern, base) => isNegativePattern(pattern)\n\t? '!' + path.posix.join(base, pattern.slice(1))\n\t: path.posix.join(base, pattern);\n\nconst parseIgnoreFile = (file, cwd) => {\n\tconst base = slash(path.relative(cwd, path.dirname(file.filePath)));\n\n\treturn file.content\n\t\t.split(/\\r?\\n/)\n\t\t.filter(line => line && !line.startsWith('#'))\n\t\t.map(pattern => applyBaseToPattern(pattern, base));\n};\n\nconst toRelativePath = (fileOrDirectory, cwd) => {\n\tcwd = slash(cwd);\n\tif (path.isAbsolute(fileOrDirectory)) {\n\t\tif (slash(fileOrDirectory).startsWith(cwd)) {\n\t\t\treturn path.relative(cwd, fileOrDirectory);\n\t\t}\n\n\t\tthrow new Error(`Path ${fileOrDirectory} is not in cwd ${cwd}`);\n\t}\n\n\treturn fileOrDirectory;\n};\n\nconst getIsIgnoredPredicate = (files, cwd) => {\n\tconst patterns = files.flatMap(file => parseIgnoreFile(file, cwd));\n\tconst ignores = gitIgnore().add(patterns);\n\n\treturn fileOrDirectory => {\n\t\tfileOrDirectory = toPath(fileOrDirectory);\n\t\tfileOrDirectory = toRelativePath(fileOrDirectory, cwd);\n\t\treturn ignores.ignores(slash(fileOrDirectory));\n\t};\n};\n\nconst normalizeOptions = (options = {}) => ({\n\tcwd: toPath(options.cwd) || process.cwd(),\n});\n\nexport const isIgnoredByIgnoreFiles = async (patterns, options) => {\n\tconst {cwd} = normalizeOptions(options);\n\n\tconst paths = await fastGlob(patterns, {cwd, ...ignoreFilesGlobOptions});\n\n\tconst files = await Promise.all(\n\t\tpaths.map(async filePath => ({\n\t\t\tfilePath,\n\t\t\tcontent: await fs.promises.readFile(filePath, 'utf8'),\n\t\t})),\n\t);\n\n\treturn getIsIgnoredPredicate(files, cwd);\n};\n\nexport const isIgnoredByIgnoreFilesSync = (patterns, options) => {\n\tconst {cwd} = normalizeOptions(options);\n\n\tconst paths = fastGlob.sync(patterns, {cwd, ...ignoreFilesGlobOptions});\n\n\tconst files = paths.map(filePath => ({\n\t\tfilePath,\n\t\tcontent: fs.readFileSync(filePath, 'utf8'),\n\t}));\n\n\treturn getIsIgnoredPredicate(files, cwd);\n};\n\nexport const isGitIgnored = options => isIgnoredByIgnoreFiles(GITIGNORE_FILES_PATTERN, options);\nexport const isGitIgnoredSync = options => isIgnoredByIgnoreFilesSync(GITIGNORE_FILES_PATTERN, options);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}