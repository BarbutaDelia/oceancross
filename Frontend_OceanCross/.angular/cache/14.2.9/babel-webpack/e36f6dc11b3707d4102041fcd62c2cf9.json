{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.setArray = {}));\n})(this, function (exports) {\n  'use strict';\n  /**\n   * Gets the index associated with `key` in the backing array, if it is already present.\n   */\n\n  exports.get = void 0;\n  /**\n   * Puts `key` into the backing array, if it is not already present. Returns\n   * the index of the `key` in the backing array.\n   */\n\n  exports.put = void 0;\n  /**\n   * Pops the last added item out of the SetArray.\n   */\n\n  exports.pop = void 0;\n  /**\n   * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the\n   * index of the `key` in the backing array.\n   *\n   * This is designed to allow synchronizing a second array with the contents of the backing array,\n   * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,\n   * and there are never duplicates.\n   */\n\n  class SetArray {\n    constructor() {\n      this._indexes = {\n        __proto__: null\n      };\n      this.array = [];\n    }\n\n  }\n\n  (() => {\n    exports.get = (strarr, key) => strarr._indexes[key];\n\n    exports.put = (strarr, key) => {\n      // The key may or may not be present. If it is present, it's a number.\n      const index = exports.get(strarr, key);\n      if (index !== undefined) return index;\n      const {\n        array,\n        _indexes: indexes\n      } = strarr;\n      return indexes[key] = array.push(key) - 1;\n    };\n\n    exports.pop = strarr => {\n      const {\n        array,\n        _indexes: indexes\n      } = strarr;\n      if (array.length === 0) return;\n      const last = array.pop();\n      indexes[last] = undefined;\n    };\n  })();\n\n  exports.SetArray = SetArray;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","globalThis","self","setArray","get","put","pop","SetArray","constructor","_indexes","__proto__","array","strarr","key","index","undefined","indexes","push","length","last","Object","defineProperty","value"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@jridgewell/set-array/dist/set-array.umd.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.setArray = {}));\n})(this, (function (exports) { 'use strict';\n\n    /**\n     * Gets the index associated with `key` in the backing array, if it is already present.\n     */\n    exports.get = void 0;\n    /**\n     * Puts `key` into the backing array, if it is not already present. Returns\n     * the index of the `key` in the backing array.\n     */\n    exports.put = void 0;\n    /**\n     * Pops the last added item out of the SetArray.\n     */\n    exports.pop = void 0;\n    /**\n     * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the\n     * index of the `key` in the backing array.\n     *\n     * This is designed to allow synchronizing a second array with the contents of the backing array,\n     * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,\n     * and there are never duplicates.\n     */\n    class SetArray {\n        constructor() {\n            this._indexes = { __proto__: null };\n            this.array = [];\n        }\n    }\n    (() => {\n        exports.get = (strarr, key) => strarr._indexes[key];\n        exports.put = (strarr, key) => {\n            // The key may or may not be present. If it is present, it's a number.\n            const index = exports.get(strarr, key);\n            if (index !== undefined)\n                return index;\n            const { array, _indexes: indexes } = strarr;\n            return (indexes[key] = array.push(key) - 1);\n        };\n        exports.pop = (strarr) => {\n            const { array, _indexes: indexes } = strarr;\n            if (array.length === 0)\n                return;\n            const last = array.pop();\n            indexes[last] = undefined;\n        };\n    })();\n\n    exports.SetArray = SetArray;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"],"mappings":"AAAA,CAAC,UAAUA,MAAV,EAAkBC,OAAlB,EAA2B;EACxB,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOC,MAAP,KAAkB,WAAjD,GAA+DF,OAAO,CAACC,OAAD,CAAtE,GACA,OAAOE,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAAvC,GAA6CD,MAAM,CAAC,CAAC,SAAD,CAAD,EAAcH,OAAd,CAAnD,IACCD,MAAM,GAAG,OAAOM,UAAP,KAAsB,WAAtB,GAAoCA,UAApC,GAAiDN,MAAM,IAAIO,IAApE,EAA0EN,OAAO,CAACD,MAAM,CAACQ,QAAP,GAAkB,EAAnB,CADlF,CADA;AAGH,CAJD,EAIG,IAJH,EAIU,UAAUN,OAAV,EAAmB;EAAE;EAE3B;AACJ;AACA;;EACIA,OAAO,CAACO,GAAR,GAAc,KAAK,CAAnB;EACA;AACJ;AACA;AACA;;EACIP,OAAO,CAACQ,GAAR,GAAc,KAAK,CAAnB;EACA;AACJ;AACA;;EACIR,OAAO,CAACS,GAAR,GAAc,KAAK,CAAnB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,MAAMC,QAAN,CAAe;IACXC,WAAW,GAAG;MACV,KAAKC,QAAL,GAAgB;QAAEC,SAAS,EAAE;MAAb,CAAhB;MACA,KAAKC,KAAL,GAAa,EAAb;IACH;;EAJU;;EAMf,CAAC,MAAM;IACHd,OAAO,CAACO,GAAR,GAAc,CAACQ,MAAD,EAASC,GAAT,KAAiBD,MAAM,CAACH,QAAP,CAAgBI,GAAhB,CAA/B;;IACAhB,OAAO,CAACQ,GAAR,GAAc,CAACO,MAAD,EAASC,GAAT,KAAiB;MAC3B;MACA,MAAMC,KAAK,GAAGjB,OAAO,CAACO,GAAR,CAAYQ,MAAZ,EAAoBC,GAApB,CAAd;MACA,IAAIC,KAAK,KAAKC,SAAd,EACI,OAAOD,KAAP;MACJ,MAAM;QAAEH,KAAF;QAASF,QAAQ,EAAEO;MAAnB,IAA+BJ,MAArC;MACA,OAAQI,OAAO,CAACH,GAAD,CAAP,GAAeF,KAAK,CAACM,IAAN,CAAWJ,GAAX,IAAkB,CAAzC;IACH,CAPD;;IAQAhB,OAAO,CAACS,GAAR,GAAeM,MAAD,IAAY;MACtB,MAAM;QAAED,KAAF;QAASF,QAAQ,EAAEO;MAAnB,IAA+BJ,MAArC;MACA,IAAID,KAAK,CAACO,MAAN,KAAiB,CAArB,EACI;MACJ,MAAMC,IAAI,GAAGR,KAAK,CAACL,GAAN,EAAb;MACAU,OAAO,CAACG,IAAD,CAAP,GAAgBJ,SAAhB;IACH,CAND;EAOH,CAjBD;;EAmBAlB,OAAO,CAACU,QAAR,GAAmBA,QAAnB;EAEAa,MAAM,CAACC,cAAP,CAAsBxB,OAAtB,EAA+B,YAA/B,EAA6C;IAAEyB,KAAK,EAAE;EAAT,CAA7C;AAEH,CAxDD"},"metadata":{},"sourceType":"script"}