{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTranslationLoader = void 0;\n\nconst crypto_1 = require(\"crypto\");\n\nconst fs = __importStar(require(\"fs\"));\n\nconst load_esm_1 = require(\"./load-esm\");\n\nfunction createTranslationLoader() {\n  return _createTranslationLoader.apply(this, arguments);\n}\n\nfunction _createTranslationLoader() {\n  _createTranslationLoader = _asyncToGenerator(function* () {\n    const {\n      parsers,\n      diagnostics\n    } = yield importParsers();\n    return path => {\n      const content = fs.readFileSync(path, 'utf8');\n      const unusedParsers = new Map();\n\n      for (const [format, parser] of Object.entries(parsers)) {\n        const analysis = analyze(parser, path, content);\n\n        if (analysis.canParse) {\n          const {\n            locale,\n            translations\n          } = parser.parse(path, content, analysis.hint);\n          const integrity = 'sha256-' + (0, crypto_1.createHash)('sha256').update(content).digest('base64');\n          return {\n            format,\n            locale,\n            translations,\n            diagnostics,\n            integrity\n          };\n        } else {\n          unusedParsers.set(parser, analysis);\n        }\n      }\n\n      const messages = [];\n\n      for (const [parser, analysis] of unusedParsers.entries()) {\n        messages.push(analysis.diagnostics.formatDiagnostics(`*** ${parser.constructor.name} ***`));\n      }\n\n      throw new Error(`Unsupported translation file format in ${path}. The following parsers were tried:\\n` + messages.join('\\n'));\n    }; // TODO: `parser.canParse()` is deprecated; remove this polyfill once we are sure all parsers provide the `parser.analyze()` method.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    function analyze(parser, path, content) {\n      if (parser.analyze !== undefined) {\n        return parser.analyze(path, content);\n      } else {\n        const hint = parser.canParse(path, content);\n        return {\n          canParse: hint !== false,\n          hint,\n          diagnostics\n        };\n      }\n    }\n  });\n  return _createTranslationLoader.apply(this, arguments);\n}\n\nexports.createTranslationLoader = createTranslationLoader;\n\nfunction importParsers() {\n  return _importParsers.apply(this, arguments);\n}\n\nfunction _importParsers() {\n  _importParsers = _asyncToGenerator(function* () {\n    try {\n      // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n      // Once TypeScript provides support for keeping the dynamic import this workaround can be\n      // changed to a direct dynamic import.\n      const {\n        Diagnostics,\n        ArbTranslationParser,\n        SimpleJsonTranslationParser,\n        Xliff1TranslationParser,\n        Xliff2TranslationParser,\n        XtbTranslationParser\n      } = yield (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n      const diagnostics = new Diagnostics();\n      const parsers = {\n        arb: new ArbTranslationParser(),\n        json: new SimpleJsonTranslationParser(),\n        xlf: new Xliff1TranslationParser(),\n        xlf2: new Xliff2TranslationParser(),\n        // The name ('xmb') needs to match the AOT compiler option\n        xmb: new XtbTranslationParser()\n      };\n      return {\n        parsers,\n        diagnostics\n      };\n    } catch {\n      throw new Error(`Unable to load translation file parsers. Please ensure '@angular/localize' is installed.`);\n    }\n  });\n  return _importParsers.apply(this, arguments);\n}","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","createTranslationLoader","crypto_1","require","fs","load_esm_1","parsers","diagnostics","importParsers","path","content","readFileSync","unusedParsers","Map","format","parser","entries","analysis","analyze","canParse","locale","translations","parse","hint","integrity","createHash","update","digest","set","messages","push","formatDiagnostics","constructor","name","Error","join","Diagnostics","ArbTranslationParser","SimpleJsonTranslationParser","Xliff1TranslationParser","Xliff2TranslationParser","XtbTranslationParser","loadEsmModule","arb","json","xlf","xlf2","xmb"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@angular-devkit/build-angular/src/utils/load-translations.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createTranslationLoader = void 0;\nconst crypto_1 = require(\"crypto\");\nconst fs = __importStar(require(\"fs\"));\nconst load_esm_1 = require(\"./load-esm\");\nasync function createTranslationLoader() {\n    const { parsers, diagnostics } = await importParsers();\n    return (path) => {\n        const content = fs.readFileSync(path, 'utf8');\n        const unusedParsers = new Map();\n        for (const [format, parser] of Object.entries(parsers)) {\n            const analysis = analyze(parser, path, content);\n            if (analysis.canParse) {\n                const { locale, translations } = parser.parse(path, content, analysis.hint);\n                const integrity = 'sha256-' + (0, crypto_1.createHash)('sha256').update(content).digest('base64');\n                return { format, locale, translations, diagnostics, integrity };\n            }\n            else {\n                unusedParsers.set(parser, analysis);\n            }\n        }\n        const messages = [];\n        for (const [parser, analysis] of unusedParsers.entries()) {\n            messages.push(analysis.diagnostics.formatDiagnostics(`*** ${parser.constructor.name} ***`));\n        }\n        throw new Error(`Unsupported translation file format in ${path}. The following parsers were tried:\\n` +\n            messages.join('\\n'));\n    };\n    // TODO: `parser.canParse()` is deprecated; remove this polyfill once we are sure all parsers provide the `parser.analyze()` method.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function analyze(parser, path, content) {\n        if (parser.analyze !== undefined) {\n            return parser.analyze(path, content);\n        }\n        else {\n            const hint = parser.canParse(path, content);\n            return { canParse: hint !== false, hint, diagnostics };\n        }\n    }\n}\nexports.createTranslationLoader = createTranslationLoader;\nasync function importParsers() {\n    try {\n        // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n        // Once TypeScript provides support for keeping the dynamic import this workaround can be\n        // changed to a direct dynamic import.\n        const { Diagnostics, ArbTranslationParser, SimpleJsonTranslationParser, Xliff1TranslationParser, Xliff2TranslationParser, XtbTranslationParser, } = await (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n        const diagnostics = new Diagnostics();\n        const parsers = {\n            arb: new ArbTranslationParser(),\n            json: new SimpleJsonTranslationParser(),\n            xlf: new Xliff1TranslationParser(),\n            xlf2: new Xliff2TranslationParser(),\n            // The name ('xmb') needs to match the AOT compiler option\n            xmb: new XtbTranslationParser(),\n        };\n        return { parsers, diagnostics };\n    }\n    catch {\n        throw new Error(`Unable to load translation file parsers. Please ensure '@angular/localize' is installed.`);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,KAAmCC,MAAM,CAACC,MAAP,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,EAAlB,EAAsB;EAC5F,IAAIA,EAAE,KAAKC,SAAX,EAAsBD,EAAE,GAAGD,CAAL;EACtB,IAAIG,IAAI,GAAGP,MAAM,CAACQ,wBAAP,CAAgCL,CAAhC,EAAmCC,CAAnC,CAAX;;EACA,IAAI,CAACG,IAAD,KAAU,SAASA,IAAT,GAAgB,CAACJ,CAAC,CAACM,UAAnB,GAAgCF,IAAI,CAACG,QAAL,IAAiBH,IAAI,CAACI,YAAhE,CAAJ,EAAmF;IACjFJ,IAAI,GAAG;MAAEK,UAAU,EAAE,IAAd;MAAoBC,GAAG,EAAE,YAAW;QAAE,OAAOV,CAAC,CAACC,CAAD,CAAR;MAAc;IAApD,CAAP;EACD;;EACDJ,MAAM,CAACc,cAAP,CAAsBZ,CAAtB,EAAyBG,EAAzB,EAA6BE,IAA7B;AACH,CAPwD,GAOnD,UAASL,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,EAAlB,EAAsB;EACxB,IAAIA,EAAE,KAAKC,SAAX,EAAsBD,EAAE,GAAGD,CAAL;EACtBF,CAAC,CAACG,EAAD,CAAD,GAAQF,CAAC,CAACC,CAAD,CAAT;AACH,CAVqB,CAAtB;;AAWA,IAAIW,kBAAkB,GAAI,QAAQ,KAAKA,kBAAd,KAAsCf,MAAM,CAACC,MAAP,GAAiB,UAASC,CAAT,EAAYc,CAAZ,EAAe;EAC3FhB,MAAM,CAACc,cAAP,CAAsBZ,CAAtB,EAAyB,SAAzB,EAAoC;IAAEU,UAAU,EAAE,IAAd;IAAoBK,KAAK,EAAED;EAA3B,CAApC;AACH,CAF8D,GAE1D,UAASd,CAAT,EAAYc,CAAZ,EAAe;EAChBd,CAAC,CAAC,SAAD,CAAD,GAAec,CAAf;AACH,CAJwB,CAAzB;;AAKA,IAAIE,YAAY,GAAI,QAAQ,KAAKA,YAAd,IAA+B,UAAUC,GAAV,EAAe;EAC7D,IAAIA,GAAG,IAAIA,GAAG,CAACV,UAAf,EAA2B,OAAOU,GAAP;EAC3B,IAAIC,MAAM,GAAG,EAAb;EACA,IAAID,GAAG,IAAI,IAAX,EAAiB,KAAK,IAAIf,CAAT,IAAce,GAAd,EAAmB,IAAIf,CAAC,KAAK,SAAN,IAAmBJ,MAAM,CAACqB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,GAArC,EAA0Cf,CAA1C,CAAvB,EAAqEL,eAAe,CAACqB,MAAD,EAASD,GAAT,EAAcf,CAAd,CAAf;;EACzGW,kBAAkB,CAACK,MAAD,EAASD,GAAT,CAAlB;;EACA,OAAOC,MAAP;AACH,CAND;;AAOApB,MAAM,CAACc,cAAP,CAAsBU,OAAtB,EAA+B,YAA/B,EAA6C;EAAEP,KAAK,EAAE;AAAT,CAA7C;AACAO,OAAO,CAACC,uBAAR,GAAkC,KAAK,CAAvC;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,EAAE,GAAGV,YAAY,CAACS,OAAO,CAAC,IAAD,CAAR,CAAvB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;SACeF,uB;;;;;+CAAf,aAAyC;IACrC,MAAM;MAAEK,OAAF;MAAWC;IAAX,UAAiCC,aAAa,EAApD;IACA,OAAQC,IAAD,IAAU;MACb,MAAMC,OAAO,GAAGN,EAAE,CAACO,YAAH,CAAgBF,IAAhB,EAAsB,MAAtB,CAAhB;MACA,MAAMG,aAAa,GAAG,IAAIC,GAAJ,EAAtB;;MACA,KAAK,MAAM,CAACC,MAAD,EAASC,MAAT,CAAX,IAA+BvC,MAAM,CAACwC,OAAP,CAAeV,OAAf,CAA/B,EAAwD;QACpD,MAAMW,QAAQ,GAAGC,OAAO,CAACH,MAAD,EAASN,IAAT,EAAeC,OAAf,CAAxB;;QACA,IAAIO,QAAQ,CAACE,QAAb,EAAuB;UACnB,MAAM;YAAEC,MAAF;YAAUC;UAAV,IAA2BN,MAAM,CAACO,KAAP,CAAab,IAAb,EAAmBC,OAAnB,EAA4BO,QAAQ,CAACM,IAArC,CAAjC;UACA,MAAMC,SAAS,GAAG,YAAY,CAAC,GAAGtB,QAAQ,CAACuB,UAAb,EAAyB,QAAzB,EAAmCC,MAAnC,CAA0ChB,OAA1C,EAAmDiB,MAAnD,CAA0D,QAA1D,CAA9B;UACA,OAAO;YAAEb,MAAF;YAAUM,MAAV;YAAkBC,YAAlB;YAAgCd,WAAhC;YAA6CiB;UAA7C,CAAP;QACH,CAJD,MAKK;UACDZ,aAAa,CAACgB,GAAd,CAAkBb,MAAlB,EAA0BE,QAA1B;QACH;MACJ;;MACD,MAAMY,QAAQ,GAAG,EAAjB;;MACA,KAAK,MAAM,CAACd,MAAD,EAASE,QAAT,CAAX,IAAiCL,aAAa,CAACI,OAAd,EAAjC,EAA0D;QACtDa,QAAQ,CAACC,IAAT,CAAcb,QAAQ,CAACV,WAAT,CAAqBwB,iBAArB,CAAwC,OAAMhB,MAAM,CAACiB,WAAP,CAAmBC,IAAK,MAAtE,CAAd;MACH;;MACD,MAAM,IAAIC,KAAJ,CAAW,0CAAyCzB,IAAK,uCAA/C,GACZoB,QAAQ,CAACM,IAAT,CAAc,IAAd,CADE,CAAN;IAEH,CApBD,CAFqC,CAuBrC;IACA;;IACA,SAASjB,OAAT,CAAiBH,MAAjB,EAAyBN,IAAzB,EAA+BC,OAA/B,EAAwC;MACpC,IAAIK,MAAM,CAACG,OAAP,KAAmBpC,SAAvB,EAAkC;QAC9B,OAAOiC,MAAM,CAACG,OAAP,CAAeT,IAAf,EAAqBC,OAArB,CAAP;MACH,CAFD,MAGK;QACD,MAAMa,IAAI,GAAGR,MAAM,CAACI,QAAP,CAAgBV,IAAhB,EAAsBC,OAAtB,CAAb;QACA,OAAO;UAAES,QAAQ,EAAEI,IAAI,KAAK,KAArB;UAA4BA,IAA5B;UAAkChB;QAAlC,CAAP;MACH;IACJ;EACJ,C;;;;AACDP,OAAO,CAACC,uBAAR,GAAkCA,uBAAlC;;SACeO,a;;;;;qCAAf,aAA+B;IAC3B,IAAI;MACA;MACA;MACA;MACA,MAAM;QAAE4B,WAAF;QAAeC,oBAAf;QAAqCC,2BAArC;QAAkEC,uBAAlE;QAA2FC,uBAA3F;QAAoHC;MAApH,UAAoJ,CAAC,GAAGpC,UAAU,CAACqC,aAAf,EAA8B,yBAA9B,CAA1J;MACA,MAAMnC,WAAW,GAAG,IAAI6B,WAAJ,EAApB;MACA,MAAM9B,OAAO,GAAG;QACZqC,GAAG,EAAE,IAAIN,oBAAJ,EADO;QAEZO,IAAI,EAAE,IAAIN,2BAAJ,EAFM;QAGZO,GAAG,EAAE,IAAIN,uBAAJ,EAHO;QAIZO,IAAI,EAAE,IAAIN,uBAAJ,EAJM;QAKZ;QACAO,GAAG,EAAE,IAAIN,oBAAJ;MANO,CAAhB;MAQA,OAAO;QAAEnC,OAAF;QAAWC;MAAX,CAAP;IACH,CAfD,CAgBA,MAAM;MACF,MAAM,IAAI2B,KAAJ,CAAW,0FAAX,CAAN;IACH;EACJ,C"},"metadata":{},"sourceType":"script"}