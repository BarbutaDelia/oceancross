{"ast":null,"code":"const util = require('util');\n\nconst debug = require('debug')('log4js:configuration');\n\nconst preProcessingListeners = [];\nconst listeners = [];\n\nconst not = thing => !thing;\n\nconst anObject = thing => thing && typeof thing === 'object' && !Array.isArray(thing);\n\nconst validIdentifier = thing => /^[A-Za-z][A-Za-z0-9_]*$/g.test(thing);\n\nconst anInteger = thing => thing && typeof thing === 'number' && Number.isInteger(thing);\n\nconst addListener = fn => {\n  listeners.push(fn);\n  debug(`Added listener, now ${listeners.length} listeners`);\n};\n\nconst addPreProcessingListener = fn => {\n  preProcessingListeners.push(fn);\n  debug(`Added pre-processing listener, now ${preProcessingListeners.length} listeners`);\n};\n\nconst throwExceptionIf = (config, checks, message) => {\n  const tests = Array.isArray(checks) ? checks : [checks];\n  tests.forEach(test => {\n    if (test) {\n      throw new Error(`Problem with log4js configuration: (${util.inspect(config, {\n        depth: 5\n      })}) - ${message}`);\n    }\n  });\n};\n\nconst configure = candidate => {\n  debug('New configuration to be validated: ', candidate);\n  throwExceptionIf(candidate, not(anObject(candidate)), 'must be an object.');\n  debug(`Calling pre-processing listeners (${preProcessingListeners.length})`);\n  preProcessingListeners.forEach(listener => listener(candidate));\n  debug('Configuration pre-processing finished.');\n  debug(`Calling configuration listeners (${listeners.length})`);\n  listeners.forEach(listener => listener(candidate));\n  debug('Configuration finished.');\n};\n\nmodule.exports = {\n  configure,\n  addListener,\n  addPreProcessingListener,\n  throwExceptionIf,\n  anObject,\n  anInteger,\n  validIdentifier,\n  not\n};","map":{"version":3,"names":["util","require","debug","preProcessingListeners","listeners","not","thing","anObject","Array","isArray","validIdentifier","test","anInteger","Number","isInteger","addListener","fn","push","length","addPreProcessingListener","throwExceptionIf","config","checks","message","tests","forEach","Error","inspect","depth","configure","candidate","listener","module","exports"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/log4js/lib/configuration.js"],"sourcesContent":["const util = require('util');\nconst debug = require('debug')('log4js:configuration');\n\nconst preProcessingListeners = [];\nconst listeners = [];\n\nconst not = (thing) => !thing;\n\nconst anObject = (thing) =>\n  thing && typeof thing === 'object' && !Array.isArray(thing);\n\nconst validIdentifier = (thing) => /^[A-Za-z][A-Za-z0-9_]*$/g.test(thing);\n\nconst anInteger = (thing) =>\n  thing && typeof thing === 'number' && Number.isInteger(thing);\n\nconst addListener = (fn) => {\n  listeners.push(fn);\n  debug(`Added listener, now ${listeners.length} listeners`);\n};\n\nconst addPreProcessingListener = (fn) => {\n  preProcessingListeners.push(fn);\n  debug(\n    `Added pre-processing listener, now ${preProcessingListeners.length} listeners`\n  );\n};\n\nconst throwExceptionIf = (config, checks, message) => {\n  const tests = Array.isArray(checks) ? checks : [checks];\n  tests.forEach((test) => {\n    if (test) {\n      throw new Error(\n        `Problem with log4js configuration: (${util.inspect(config, {\n          depth: 5,\n        })}) - ${message}`\n      );\n    }\n  });\n};\n\nconst configure = (candidate) => {\n  debug('New configuration to be validated: ', candidate);\n  throwExceptionIf(candidate, not(anObject(candidate)), 'must be an object.');\n\n  debug(`Calling pre-processing listeners (${preProcessingListeners.length})`);\n  preProcessingListeners.forEach((listener) => listener(candidate));\n  debug('Configuration pre-processing finished.');\n\n  debug(`Calling configuration listeners (${listeners.length})`);\n  listeners.forEach((listener) => listener(candidate));\n  debug('Configuration finished.');\n};\n\nmodule.exports = {\n  configure,\n  addListener,\n  addPreProcessingListener,\n  throwExceptionIf,\n  anObject,\n  anInteger,\n  validIdentifier,\n  not,\n};\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,sBAAjB,CAAd;;AAEA,MAAME,sBAAsB,GAAG,EAA/B;AACA,MAAMC,SAAS,GAAG,EAAlB;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW,CAACA,KAAxB;;AAEA,MAAMC,QAAQ,GAAID,KAAD,IACfA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,IAAsC,CAACE,KAAK,CAACC,OAAN,CAAcH,KAAd,CADzC;;AAGA,MAAMI,eAAe,GAAIJ,KAAD,IAAW,2BAA2BK,IAA3B,CAAgCL,KAAhC,CAAnC;;AAEA,MAAMM,SAAS,GAAIN,KAAD,IAChBA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,IAAsCO,MAAM,CAACC,SAAP,CAAiBR,KAAjB,CADxC;;AAGA,MAAMS,WAAW,GAAIC,EAAD,IAAQ;EAC1BZ,SAAS,CAACa,IAAV,CAAeD,EAAf;EACAd,KAAK,CAAE,uBAAsBE,SAAS,CAACc,MAAO,YAAzC,CAAL;AACD,CAHD;;AAKA,MAAMC,wBAAwB,GAAIH,EAAD,IAAQ;EACvCb,sBAAsB,CAACc,IAAvB,CAA4BD,EAA5B;EACAd,KAAK,CACF,sCAAqCC,sBAAsB,CAACe,MAAO,YADjE,CAAL;AAGD,CALD;;AAOA,MAAME,gBAAgB,GAAG,CAACC,MAAD,EAASC,MAAT,EAAiBC,OAAjB,KAA6B;EACpD,MAAMC,KAAK,GAAGhB,KAAK,CAACC,OAAN,CAAca,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,CAA/C;EACAE,KAAK,CAACC,OAAN,CAAed,IAAD,IAAU;IACtB,IAAIA,IAAJ,EAAU;MACR,MAAM,IAAIe,KAAJ,CACH,uCAAsC1B,IAAI,CAAC2B,OAAL,CAAaN,MAAb,EAAqB;QAC1DO,KAAK,EAAE;MADmD,CAArB,CAEpC,OAAML,OAAQ,EAHb,CAAN;IAKD;EACF,CARD;AASD,CAXD;;AAaA,MAAMM,SAAS,GAAIC,SAAD,IAAe;EAC/B5B,KAAK,CAAC,qCAAD,EAAwC4B,SAAxC,CAAL;EACAV,gBAAgB,CAACU,SAAD,EAAYzB,GAAG,CAACE,QAAQ,CAACuB,SAAD,CAAT,CAAf,EAAsC,oBAAtC,CAAhB;EAEA5B,KAAK,CAAE,qCAAoCC,sBAAsB,CAACe,MAAO,GAApE,CAAL;EACAf,sBAAsB,CAACsB,OAAvB,CAAgCM,QAAD,IAAcA,QAAQ,CAACD,SAAD,CAArD;EACA5B,KAAK,CAAC,wCAAD,CAAL;EAEAA,KAAK,CAAE,oCAAmCE,SAAS,CAACc,MAAO,GAAtD,CAAL;EACAd,SAAS,CAACqB,OAAV,CAAmBM,QAAD,IAAcA,QAAQ,CAACD,SAAD,CAAxC;EACA5B,KAAK,CAAC,yBAAD,CAAL;AACD,CAXD;;AAaA8B,MAAM,CAACC,OAAP,GAAiB;EACfJ,SADe;EAEfd,WAFe;EAGfI,wBAHe;EAIfC,gBAJe;EAKfb,QALe;EAMfK,SANe;EAOfF,eAPe;EAQfL;AARe,CAAjB"},"metadata":{},"sourceType":"script"}