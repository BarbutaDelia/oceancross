{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CssOptimizerPlugin = void 0;\n\nconst webpack_diagnostics_1 = require(\"../../utils/webpack-diagnostics\");\n\nconst esbuild_executor_1 = require(\"./esbuild-executor\");\n/**\n * The name of the plugin provided to Webpack when tapping Webpack compiler hooks.\n */\n\n\nconst PLUGIN_NAME = 'angular-css-optimizer';\n/**\n * A Webpack plugin that provides CSS optimization capabilities.\n *\n * The plugin uses both `esbuild` to provide both fast and highly-optimized\n * code output.\n */\n\nclass CssOptimizerPlugin {\n  constructor(options) {\n    this.esbuild = new esbuild_executor_1.EsbuildExecutor();\n\n    if (options === null || options === void 0 ? void 0 : options.supportedBrowsers) {\n      this.targets = this.transformSupportedBrowsersToTargets(options.supportedBrowsers);\n    }\n  }\n\n  apply(compiler) {\n    var _this = this;\n\n    const {\n      OriginalSource,\n      SourceMapSource\n    } = compiler.webpack.sources;\n    compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {\n      const logger = compilation.getLogger('build-angular.CssOptimizerPlugin');\n      compilation.hooks.processAssets.tapPromise({\n        name: PLUGIN_NAME,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE\n      }, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (compilationAssets) {\n          const cache = compilation.options.cache && compilation.getCache(PLUGIN_NAME);\n          logger.time('optimize css assets');\n\n          for (const assetName of Object.keys(compilationAssets)) {\n            if (!/\\.(?:css|scss|sass|less|styl)$/.test(assetName)) {\n              continue;\n            }\n\n            const asset = compilation.getAsset(assetName); // Skip assets that have already been optimized or are verbatim copies (project assets)\n\n            if (!asset || asset.info.minimized || asset.info.copied) {\n              continue;\n            }\n\n            const {\n              source: styleAssetSource,\n              name\n            } = asset;\n            let cacheItem;\n\n            if (cache) {\n              const eTag = cache.getLazyHashedEtag(styleAssetSource);\n              cacheItem = cache.getItemCache(name, eTag);\n              const cachedOutput = yield cacheItem.getPromise();\n\n              if (cachedOutput) {\n                logger.debug(`${name} restored from cache`);\n                yield _this.addWarnings(compilation, cachedOutput.warnings);\n                compilation.updateAsset(name, cachedOutput.source, assetInfo => ({ ...assetInfo,\n                  minimized: true\n                }));\n                continue;\n              }\n            }\n\n            const {\n              source,\n              map: inputMap\n            } = styleAssetSource.sourceAndMap();\n            const input = typeof source === 'string' ? source : source.toString();\n            const optimizeAssetLabel = `optimize asset: ${asset.name}`;\n            logger.time(optimizeAssetLabel);\n            const {\n              code,\n              warnings,\n              map\n            } = yield _this.optimize(input, asset.name, inputMap, _this.targets);\n            logger.timeEnd(optimizeAssetLabel);\n            yield _this.addWarnings(compilation, warnings);\n            const optimizedAsset = map ? new SourceMapSource(code, name, map) : new OriginalSource(code, name);\n            compilation.updateAsset(name, optimizedAsset, assetInfo => ({ ...assetInfo,\n              minimized: true\n            }));\n            yield cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.storePromise({\n              source: optimizedAsset,\n              warnings\n            });\n          }\n\n          logger.timeEnd('optimize css assets');\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    });\n  }\n  /**\n   * Optimizes a CSS asset using esbuild.\n   *\n   * @param input The CSS asset source content to optimize.\n   * @param name The name of the CSS asset. Used to generate source maps.\n   * @param inputMap Optionally specifies the CSS asset's original source map that will\n   * be merged with the intermediate optimized source map.\n   * @param target Optionally specifies the target browsers for the output code.\n   * @returns A promise resolving to the optimized CSS, source map, and any warnings.\n   */\n\n\n  optimize(input, name, inputMap, target) {\n    let sourceMapLine;\n\n    if (inputMap) {\n      // esbuild will automatically remap the sourcemap if provided\n      sourceMapLine = `\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,${Buffer.from(JSON.stringify(inputMap)).toString('base64')} */`;\n    }\n\n    return this.esbuild.transform(sourceMapLine ? input + sourceMapLine : input, {\n      loader: 'css',\n      legalComments: 'inline',\n      minify: true,\n      sourcemap: !!inputMap && 'external',\n      sourcefile: name,\n      target\n    });\n  }\n\n  addWarnings(compilation, warnings) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (warnings.length > 0) {\n        for (const warning of yield _this2.esbuild.formatMessages(warnings, {\n          kind: 'warning'\n        })) {\n          (0, webpack_diagnostics_1.addWarning)(compilation, warning);\n        }\n      }\n    })();\n  }\n\n  transformSupportedBrowsersToTargets(supportedBrowsers) {\n    const transformed = []; // https://esbuild.github.io/api/#target\n\n    const esBuildSupportedBrowsers = new Set(['safari', 'firefox', 'edge', 'chrome', 'ios']);\n\n    for (const browser of supportedBrowsers) {\n      let [browserName, version] = browser.split(' '); // browserslist uses the name `ios_saf` for iOS Safari whereas esbuild uses `ios`\n\n      if (browserName === 'ios_saf') {\n        browserName = 'ios';\n      } // browserslist uses ranges `15.2-15.3` versions but only the lowest is required\n      // to perform minimum supported feature checks. esbuild also expects a single version.\n\n\n      [version] = version.split('-');\n\n      if (esBuildSupportedBrowsers.has(browserName)) {\n        if (browserName === 'safari' && version === 'TP') {\n          // esbuild only supports numeric versions so `TP` is converted to a high number (999) since\n          // a Technology Preview (TP) of Safari is assumed to support all currently known features.\n          version = '999';\n        }\n\n        transformed.push(browserName + version);\n      }\n    }\n\n    return transformed.length ? transformed : undefined;\n  }\n\n}\n\nexports.CssOptimizerPlugin = CssOptimizerPlugin;","map":{"version":3,"names":["Object","defineProperty","exports","value","CssOptimizerPlugin","webpack_diagnostics_1","require","esbuild_executor_1","PLUGIN_NAME","constructor","options","esbuild","EsbuildExecutor","supportedBrowsers","targets","transformSupportedBrowsersToTargets","apply","compiler","OriginalSource","SourceMapSource","webpack","sources","hooks","compilation","tap","logger","getLogger","processAssets","tapPromise","name","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","compilationAssets","cache","getCache","time","assetName","keys","test","asset","getAsset","info","minimized","copied","source","styleAssetSource","cacheItem","eTag","getLazyHashedEtag","getItemCache","cachedOutput","getPromise","debug","addWarnings","warnings","updateAsset","assetInfo","map","inputMap","sourceAndMap","input","toString","optimizeAssetLabel","code","optimize","timeEnd","optimizedAsset","storePromise","target","sourceMapLine","Buffer","from","JSON","stringify","transform","loader","legalComments","minify","sourcemap","sourcefile","length","warning","formatMessages","kind","addWarning","transformed","esBuildSupportedBrowsers","Set","browser","browserName","version","split","has","push","undefined"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@angular-devkit/build-angular/src/webpack/plugins/css-optimizer-plugin.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CssOptimizerPlugin = void 0;\nconst webpack_diagnostics_1 = require(\"../../utils/webpack-diagnostics\");\nconst esbuild_executor_1 = require(\"./esbuild-executor\");\n/**\n * The name of the plugin provided to Webpack when tapping Webpack compiler hooks.\n */\nconst PLUGIN_NAME = 'angular-css-optimizer';\n/**\n * A Webpack plugin that provides CSS optimization capabilities.\n *\n * The plugin uses both `esbuild` to provide both fast and highly-optimized\n * code output.\n */\nclass CssOptimizerPlugin {\n    constructor(options) {\n        this.esbuild = new esbuild_executor_1.EsbuildExecutor();\n        if (options === null || options === void 0 ? void 0 : options.supportedBrowsers) {\n            this.targets = this.transformSupportedBrowsersToTargets(options.supportedBrowsers);\n        }\n    }\n    apply(compiler) {\n        const { OriginalSource, SourceMapSource } = compiler.webpack.sources;\n        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation) => {\n            const logger = compilation.getLogger('build-angular.CssOptimizerPlugin');\n            compilation.hooks.processAssets.tapPromise({\n                name: PLUGIN_NAME,\n                stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n            }, async (compilationAssets) => {\n                const cache = compilation.options.cache && compilation.getCache(PLUGIN_NAME);\n                logger.time('optimize css assets');\n                for (const assetName of Object.keys(compilationAssets)) {\n                    if (!/\\.(?:css|scss|sass|less|styl)$/.test(assetName)) {\n                        continue;\n                    }\n                    const asset = compilation.getAsset(assetName);\n                    // Skip assets that have already been optimized or are verbatim copies (project assets)\n                    if (!asset || asset.info.minimized || asset.info.copied) {\n                        continue;\n                    }\n                    const { source: styleAssetSource, name } = asset;\n                    let cacheItem;\n                    if (cache) {\n                        const eTag = cache.getLazyHashedEtag(styleAssetSource);\n                        cacheItem = cache.getItemCache(name, eTag);\n                        const cachedOutput = await cacheItem.getPromise();\n                        if (cachedOutput) {\n                            logger.debug(`${name} restored from cache`);\n                            await this.addWarnings(compilation, cachedOutput.warnings);\n                            compilation.updateAsset(name, cachedOutput.source, (assetInfo) => ({\n                                ...assetInfo,\n                                minimized: true,\n                            }));\n                            continue;\n                        }\n                    }\n                    const { source, map: inputMap } = styleAssetSource.sourceAndMap();\n                    const input = typeof source === 'string' ? source : source.toString();\n                    const optimizeAssetLabel = `optimize asset: ${asset.name}`;\n                    logger.time(optimizeAssetLabel);\n                    const { code, warnings, map } = await this.optimize(input, asset.name, inputMap, this.targets);\n                    logger.timeEnd(optimizeAssetLabel);\n                    await this.addWarnings(compilation, warnings);\n                    const optimizedAsset = map\n                        ? new SourceMapSource(code, name, map)\n                        : new OriginalSource(code, name);\n                    compilation.updateAsset(name, optimizedAsset, (assetInfo) => ({\n                        ...assetInfo,\n                        minimized: true,\n                    }));\n                    await (cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.storePromise({\n                        source: optimizedAsset,\n                        warnings,\n                    }));\n                }\n                logger.timeEnd('optimize css assets');\n            });\n        });\n    }\n    /**\n     * Optimizes a CSS asset using esbuild.\n     *\n     * @param input The CSS asset source content to optimize.\n     * @param name The name of the CSS asset. Used to generate source maps.\n     * @param inputMap Optionally specifies the CSS asset's original source map that will\n     * be merged with the intermediate optimized source map.\n     * @param target Optionally specifies the target browsers for the output code.\n     * @returns A promise resolving to the optimized CSS, source map, and any warnings.\n     */\n    optimize(input, name, inputMap, target) {\n        let sourceMapLine;\n        if (inputMap) {\n            // esbuild will automatically remap the sourcemap if provided\n            sourceMapLine = `\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,${Buffer.from(JSON.stringify(inputMap)).toString('base64')} */`;\n        }\n        return this.esbuild.transform(sourceMapLine ? input + sourceMapLine : input, {\n            loader: 'css',\n            legalComments: 'inline',\n            minify: true,\n            sourcemap: !!inputMap && 'external',\n            sourcefile: name,\n            target,\n        });\n    }\n    async addWarnings(compilation, warnings) {\n        if (warnings.length > 0) {\n            for (const warning of await this.esbuild.formatMessages(warnings, { kind: 'warning' })) {\n                (0, webpack_diagnostics_1.addWarning)(compilation, warning);\n            }\n        }\n    }\n    transformSupportedBrowsersToTargets(supportedBrowsers) {\n        const transformed = [];\n        // https://esbuild.github.io/api/#target\n        const esBuildSupportedBrowsers = new Set(['safari', 'firefox', 'edge', 'chrome', 'ios']);\n        for (const browser of supportedBrowsers) {\n            let [browserName, version] = browser.split(' ');\n            // browserslist uses the name `ios_saf` for iOS Safari whereas esbuild uses `ios`\n            if (browserName === 'ios_saf') {\n                browserName = 'ios';\n            }\n            // browserslist uses ranges `15.2-15.3` versions but only the lowest is required\n            // to perform minimum supported feature checks. esbuild also expects a single version.\n            [version] = version.split('-');\n            if (esBuildSupportedBrowsers.has(browserName)) {\n                if (browserName === 'safari' && version === 'TP') {\n                    // esbuild only supports numeric versions so `TP` is converted to a high number (999) since\n                    // a Technology Preview (TP) of Safari is assumed to support all currently known features.\n                    version = '999';\n                }\n                transformed.push(browserName + version);\n            }\n        }\n        return transformed.length ? transformed : undefined;\n    }\n}\nexports.CssOptimizerPlugin = CssOptimizerPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6B,KAAK,CAAlC;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,iCAAD,CAArC;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,oBAAD,CAAlC;AACA;AACA;AACA;;;AACA,MAAME,WAAW,GAAG,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMJ,kBAAN,CAAyB;EACrBK,WAAW,CAACC,OAAD,EAAU;IACjB,KAAKC,OAAL,GAAe,IAAIJ,kBAAkB,CAACK,eAAvB,EAAf;;IACA,IAAIF,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACG,iBAA9D,EAAiF;MAC7E,KAAKC,OAAL,GAAe,KAAKC,mCAAL,CAAyCL,OAAO,CAACG,iBAAjD,CAAf;IACH;EACJ;;EACDG,KAAK,CAACC,QAAD,EAAW;IAAA;;IACZ,MAAM;MAAEC,cAAF;MAAkBC;IAAlB,IAAsCF,QAAQ,CAACG,OAAT,CAAiBC,OAA7D;IACAJ,QAAQ,CAACK,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+BhB,WAA/B,EAA6Ce,WAAD,IAAiB;MACzD,MAAME,MAAM,GAAGF,WAAW,CAACG,SAAZ,CAAsB,kCAAtB,CAAf;MACAH,WAAW,CAACD,KAAZ,CAAkBK,aAAlB,CAAgCC,UAAhC,CAA2C;QACvCC,IAAI,EAAErB,WADiC;QAEvCsB,KAAK,EAAEb,QAAQ,CAACG,OAAT,CAAiBW,WAAjB,CAA6BC;MAFG,CAA3C;QAAA,6BAGG,WAAOC,iBAAP,EAA6B;UAC5B,MAAMC,KAAK,GAAGX,WAAW,CAACb,OAAZ,CAAoBwB,KAApB,IAA6BX,WAAW,CAACY,QAAZ,CAAqB3B,WAArB,CAA3C;UACAiB,MAAM,CAACW,IAAP,CAAY,qBAAZ;;UACA,KAAK,MAAMC,SAAX,IAAwBrC,MAAM,CAACsC,IAAP,CAAYL,iBAAZ,CAAxB,EAAwD;YACpD,IAAI,CAAC,iCAAiCM,IAAjC,CAAsCF,SAAtC,CAAL,EAAuD;cACnD;YACH;;YACD,MAAMG,KAAK,GAAGjB,WAAW,CAACkB,QAAZ,CAAqBJ,SAArB,CAAd,CAJoD,CAKpD;;YACA,IAAI,CAACG,KAAD,IAAUA,KAAK,CAACE,IAAN,CAAWC,SAArB,IAAkCH,KAAK,CAACE,IAAN,CAAWE,MAAjD,EAAyD;cACrD;YACH;;YACD,MAAM;cAAEC,MAAM,EAAEC,gBAAV;cAA4BjB;YAA5B,IAAqCW,KAA3C;YACA,IAAIO,SAAJ;;YACA,IAAIb,KAAJ,EAAW;cACP,MAAMc,IAAI,GAAGd,KAAK,CAACe,iBAAN,CAAwBH,gBAAxB,CAAb;cACAC,SAAS,GAAGb,KAAK,CAACgB,YAAN,CAAmBrB,IAAnB,EAAyBmB,IAAzB,CAAZ;cACA,MAAMG,YAAY,SAASJ,SAAS,CAACK,UAAV,EAA3B;;cACA,IAAID,YAAJ,EAAkB;gBACd1B,MAAM,CAAC4B,KAAP,CAAc,GAAExB,IAAK,sBAArB;gBACA,MAAM,KAAI,CAACyB,WAAL,CAAiB/B,WAAjB,EAA8B4B,YAAY,CAACI,QAA3C,CAAN;gBACAhC,WAAW,CAACiC,WAAZ,CAAwB3B,IAAxB,EAA8BsB,YAAY,CAACN,MAA3C,EAAoDY,SAAD,KAAgB,EAC/D,GAAGA,SAD4D;kBAE/Dd,SAAS,EAAE;gBAFoD,CAAhB,CAAnD;gBAIA;cACH;YACJ;;YACD,MAAM;cAAEE,MAAF;cAAUa,GAAG,EAAEC;YAAf,IAA4Bb,gBAAgB,CAACc,YAAjB,EAAlC;YACA,MAAMC,KAAK,GAAG,OAAOhB,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCA,MAAM,CAACiB,QAAP,EAApD;YACA,MAAMC,kBAAkB,GAAI,mBAAkBvB,KAAK,CAACX,IAAK,EAAzD;YACAJ,MAAM,CAACW,IAAP,CAAY2B,kBAAZ;YACA,MAAM;cAAEC,IAAF;cAAQT,QAAR;cAAkBG;YAAlB,UAAgC,KAAI,CAACO,QAAL,CAAcJ,KAAd,EAAqBrB,KAAK,CAACX,IAA3B,EAAiC8B,QAAjC,EAA2C,KAAI,CAAC7C,OAAhD,CAAtC;YACAW,MAAM,CAACyC,OAAP,CAAeH,kBAAf;YACA,MAAM,KAAI,CAACT,WAAL,CAAiB/B,WAAjB,EAA8BgC,QAA9B,CAAN;YACA,MAAMY,cAAc,GAAGT,GAAG,GACpB,IAAIvC,eAAJ,CAAoB6C,IAApB,EAA0BnC,IAA1B,EAAgC6B,GAAhC,CADoB,GAEpB,IAAIxC,cAAJ,CAAmB8C,IAAnB,EAAyBnC,IAAzB,CAFN;YAGAN,WAAW,CAACiC,WAAZ,CAAwB3B,IAAxB,EAA8BsC,cAA9B,EAA+CV,SAAD,KAAgB,EAC1D,GAAGA,SADuD;cAE1Dd,SAAS,EAAE;YAF+C,CAAhB,CAA9C;YAIA,MAAOI,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACqB,YAAV,CAAuB;cAChFvB,MAAM,EAAEsB,cADwE;cAEhFZ;YAFgF,CAAvB,CAA7D;UAIH;;UACD9B,MAAM,CAACyC,OAAP,CAAe,qBAAf;QACH,CAnDD;;QAAA;UAAA;QAAA;MAAA;IAoDH,CAtDD;EAuDH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACID,QAAQ,CAACJ,KAAD,EAAQhC,IAAR,EAAc8B,QAAd,EAAwBU,MAAxB,EAAgC;IACpC,IAAIC,aAAJ;;IACA,IAAIX,QAAJ,EAAc;MACV;MACAW,aAAa,GAAI,qEAAoEC,MAAM,CAACC,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAef,QAAf,CAAZ,EAAsCG,QAAtC,CAA+C,QAA/C,CAAyD,KAA9I;IACH;;IACD,OAAO,KAAKnD,OAAL,CAAagE,SAAb,CAAuBL,aAAa,GAAGT,KAAK,GAAGS,aAAX,GAA2BT,KAA/D,EAAsE;MACzEe,MAAM,EAAE,KADiE;MAEzEC,aAAa,EAAE,QAF0D;MAGzEC,MAAM,EAAE,IAHiE;MAIzEC,SAAS,EAAE,CAAC,CAACpB,QAAF,IAAc,UAJgD;MAKzEqB,UAAU,EAAEnD,IAL6D;MAMzEwC;IANyE,CAAtE,CAAP;EAQH;;EACKf,WAAW,CAAC/B,WAAD,EAAcgC,QAAd,EAAwB;IAAA;;IAAA;MACrC,IAAIA,QAAQ,CAAC0B,MAAT,GAAkB,CAAtB,EAAyB;QACrB,KAAK,MAAMC,OAAX,UAA4B,MAAI,CAACvE,OAAL,CAAawE,cAAb,CAA4B5B,QAA5B,EAAsC;UAAE6B,IAAI,EAAE;QAAR,CAAtC,CAA5B,EAAwF;UACpF,CAAC,GAAG/E,qBAAqB,CAACgF,UAA1B,EAAsC9D,WAAtC,EAAmD2D,OAAnD;QACH;MACJ;IALoC;EAMxC;;EACDnE,mCAAmC,CAACF,iBAAD,EAAoB;IACnD,MAAMyE,WAAW,GAAG,EAApB,CADmD,CAEnD;;IACA,MAAMC,wBAAwB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,QAAD,EAAW,SAAX,EAAsB,MAAtB,EAA8B,QAA9B,EAAwC,KAAxC,CAAR,CAAjC;;IACA,KAAK,MAAMC,OAAX,IAAsB5E,iBAAtB,EAAyC;MACrC,IAAI,CAAC6E,WAAD,EAAcC,OAAd,IAAyBF,OAAO,CAACG,KAAR,CAAc,GAAd,CAA7B,CADqC,CAErC;;MACA,IAAIF,WAAW,KAAK,SAApB,EAA+B;QAC3BA,WAAW,GAAG,KAAd;MACH,CALoC,CAMrC;MACA;;;MACA,CAACC,OAAD,IAAYA,OAAO,CAACC,KAAR,CAAc,GAAd,CAAZ;;MACA,IAAIL,wBAAwB,CAACM,GAAzB,CAA6BH,WAA7B,CAAJ,EAA+C;QAC3C,IAAIA,WAAW,KAAK,QAAhB,IAA4BC,OAAO,KAAK,IAA5C,EAAkD;UAC9C;UACA;UACAA,OAAO,GAAG,KAAV;QACH;;QACDL,WAAW,CAACQ,IAAZ,CAAiBJ,WAAW,GAAGC,OAA/B;MACH;IACJ;;IACD,OAAOL,WAAW,CAACL,MAAZ,GAAqBK,WAArB,GAAmCS,SAA1C;EACH;;AAxHoB;;AA0HzB7F,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B"},"metadata":{},"sourceType":"script"}