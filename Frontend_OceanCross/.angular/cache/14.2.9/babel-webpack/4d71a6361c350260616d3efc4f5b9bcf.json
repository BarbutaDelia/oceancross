{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NgBuildAnalyticsPlugin = exports.countOccurrences = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst webpack_1 = require(\"webpack\");\n\nconst webpackAllErrorMessageRe = /^([^(]+)\\(\\d+,\\d\\): (.*)$/gm;\nconst webpackTsErrorMessageRe = /^[^(]+\\(\\d+,\\d\\): error (TS\\d+):/;\n/**\n * Faster than using a RegExp, so we use this to count occurences in source code.\n * @param source The source to look into.\n * @param match The match string to look for.\n * @param wordBreak Whether to check for word break before and after a match was found.\n * @return The number of matches found.\n * @private\n */\n\nfunction countOccurrences(source, match, wordBreak = false) {\n  if (match.length == 0) {\n    return source.length + 1;\n  }\n\n  let count = 0; // We condition here so branch prediction happens out of the loop, not in it.\n\n  if (wordBreak) {\n    const re = /\\w/;\n\n    for (let pos = source.lastIndexOf(match); pos >= 0; pos = source.lastIndexOf(match, pos)) {\n      if (!(re.test(source[pos - 1] || '') || re.test(source[pos + match.length] || ''))) {\n        count++; // 1 match, AH! AH! AH! 2 matches, AH! AH! AH!\n      }\n\n      pos -= match.length;\n\n      if (pos < 0) {\n        break;\n      }\n    }\n  } else {\n    for (let pos = source.lastIndexOf(match); pos >= 0; pos = source.lastIndexOf(match, pos)) {\n      count++; // 1 match, AH! AH! AH! 2 matches, AH! AH! AH!\n\n      pos -= match.length;\n\n      if (pos < 0) {\n        break;\n      }\n    }\n  }\n\n  return count;\n}\n\nexports.countOccurrences = countOccurrences;\n/**\n * Holder of statistics related to the build.\n */\n\nclass AnalyticsBuildStats {\n  constructor() {\n    this.errors = [];\n    this.numberOfNgOnInit = 0;\n    this.numberOfComponents = 0;\n    this.initialChunkSize = 0;\n    this.totalChunkCount = 0;\n    this.totalChunkSize = 0;\n    this.lazyChunkCount = 0;\n    this.lazyChunkSize = 0;\n    this.assetCount = 0;\n    this.assetSize = 0;\n    this.polyfillSize = 0;\n    this.cssSize = 0;\n  }\n\n}\n/**\n * Analytics plugin that reports the analytics we want from the CLI.\n */\n\n\nclass NgBuildAnalyticsPlugin {\n  constructor(_projectRoot, _analytics, _category) {\n    this._projectRoot = _projectRoot;\n    this._analytics = _analytics;\n    this._category = _category;\n    this._built = false;\n    this._stats = new AnalyticsBuildStats();\n  }\n\n  _reset() {\n    this._stats = new AnalyticsBuildStats();\n  }\n\n  _getMetrics(stats) {\n    const startTime = +(stats.startTime || 0);\n    const endTime = +(stats.endTime || 0);\n    const metrics = [];\n    metrics[core_1.analytics.NgCliAnalyticsMetrics.BuildTime] = endTime - startTime;\n    metrics[core_1.analytics.NgCliAnalyticsMetrics.NgOnInitCount] = this._stats.numberOfNgOnInit;\n    metrics[core_1.analytics.NgCliAnalyticsMetrics.NgComponentCount] = this._stats.numberOfComponents;\n    metrics[core_1.analytics.NgCliAnalyticsMetrics.InitialChunkSize] = this._stats.initialChunkSize;\n    metrics[core_1.analytics.NgCliAnalyticsMetrics.TotalChunkCount] = this._stats.totalChunkCount;\n    metrics[core_1.analytics.NgCliAnalyticsMetrics.TotalChunkSize] = this._stats.totalChunkSize;\n    metrics[core_1.analytics.NgCliAnalyticsMetrics.LazyChunkCount] = this._stats.lazyChunkCount;\n    metrics[core_1.analytics.NgCliAnalyticsMetrics.LazyChunkSize] = this._stats.lazyChunkSize;\n    metrics[core_1.analytics.NgCliAnalyticsMetrics.AssetCount] = this._stats.assetCount;\n    metrics[core_1.analytics.NgCliAnalyticsMetrics.AssetSize] = this._stats.assetSize;\n    metrics[core_1.analytics.NgCliAnalyticsMetrics.PolyfillSize] = this._stats.polyfillSize;\n    metrics[core_1.analytics.NgCliAnalyticsMetrics.CssSize] = this._stats.cssSize;\n    return metrics;\n  }\n\n  _getDimensions() {\n    const dimensions = [];\n\n    if (this._stats.errors.length) {\n      // Adding commas before and after so the regex are easier to define filters.\n      dimensions[core_1.analytics.NgCliAnalyticsDimensions.BuildErrors] = `,${this._stats.errors.join()},`;\n    }\n\n    return dimensions;\n  }\n\n  _reportBuildMetrics(stats) {\n    const dimensions = this._getDimensions();\n\n    const metrics = this._getMetrics(stats);\n\n    this._analytics.event(this._category, 'build', {\n      dimensions,\n      metrics\n    });\n  }\n\n  _reportRebuildMetrics(stats) {\n    const dimensions = this._getDimensions();\n\n    const metrics = this._getMetrics(stats);\n\n    this._analytics.event(this._category, 'rebuild', {\n      dimensions,\n      metrics\n    });\n  }\n\n  _checkTsNormalModule(module) {\n    const originalSource = module.originalSource();\n\n    if (!originalSource) {\n      return;\n    }\n\n    const originalContent = originalSource.source().toString(); // PLEASE REMEMBER:\n    // We're dealing with ES5 _or_ ES2015 JavaScript at this point (we don't know for sure).\n    // Just count the ngOnInit occurences. Comments/Strings/calls occurences should be sparse\n    // so we just consider them within the margin of error. We do break on word break though.\n\n    this._stats.numberOfNgOnInit += countOccurrences(originalContent, 'ngOnInit', true); // Count the number of `Component({` strings (case sensitive), which happens in __decorate().\n\n    this._stats.numberOfComponents += countOccurrences(originalContent, 'Component({'); // For Ivy we just count ɵcmp.\n\n    this._stats.numberOfComponents += countOccurrences(originalContent, '.ɵcmp', true); // for ascii_only true\n\n    this._stats.numberOfComponents += countOccurrences(originalContent, '.\\u0275cmp', true);\n  }\n\n  _collectErrors(stats) {\n    if (stats.hasErrors()) {\n      for (const errObject of stats.compilation.errors) {\n        if (errObject instanceof Error) {\n          const allErrors = errObject.message.match(webpackAllErrorMessageRe);\n\n          for (const err of [...(allErrors || [])].slice(1)) {\n            const message = (err.match(webpackTsErrorMessageRe) || [])[1];\n\n            if (message) {\n              // At this point this should be a TS1234.\n              this._stats.errors.push(message);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  _collectBundleStats(compilation) {\n    var _a, _b;\n\n    const chunkAssets = new Set();\n\n    for (const chunk of compilation.chunks) {\n      if (!chunk.rendered || chunk.files.size === 0) {\n        continue;\n      }\n\n      const firstFile = Array.from(chunk.files)[0];\n      const size = (_b = (_a = compilation.getAsset(firstFile)) === null || _a === void 0 ? void 0 : _a.source.size()) !== null && _b !== void 0 ? _b : 0;\n      chunkAssets.add(firstFile);\n\n      if (chunk.canBeInitial()) {\n        this._stats.initialChunkSize += size;\n      } else {\n        this._stats.lazyChunkCount++;\n        this._stats.lazyChunkSize += size;\n      }\n\n      this._stats.totalChunkCount++;\n      this._stats.totalChunkSize += size;\n\n      if (firstFile.endsWith('.css')) {\n        this._stats.cssSize += size;\n      }\n    }\n\n    for (const asset of compilation.getAssets()) {\n      // Only count non-JavaScript related files\n      if (chunkAssets.has(asset.name)) {\n        continue;\n      }\n\n      this._stats.assetSize += asset.source.size();\n      this._stats.assetCount++;\n\n      if (asset.name == 'polyfill') {\n        this._stats.polyfillSize += asset.source.size();\n      }\n    }\n  }\n  /** **********************************************************************************************\n   * The next section is all the different Webpack hooks for this plugin.\n   */\n\n  /**\n   * Reports a succeed module.\n   * @private\n   */\n\n\n  _succeedModule(module) {\n    // Only report NormalModule instances.\n    if (!(module instanceof webpack_1.NormalModule)) {\n      return;\n    } // Only reports modules that are part of the user's project. We also don't do node_modules.\n    // There is a chance that someone name a file path `hello_node_modules` or something and we\n    // will ignore that file for the purpose of gathering, but we're willing to take the risk.\n\n\n    if (!module.resource || !module.resource.startsWith(this._projectRoot) || module.resource.indexOf('node_modules') >= 0) {\n      return;\n    } // Check that it's a source file from the project.\n\n\n    if (module.resource.endsWith('.ts')) {\n      this._checkTsNormalModule(module);\n    }\n  }\n\n  _compilation(compiler, compilation) {\n    this._reset();\n\n    compilation.hooks.succeedModule.tap('NgBuildAnalyticsPlugin', this._succeedModule.bind(this));\n  }\n\n  _done(stats) {\n    this._collectErrors(stats);\n\n    this._collectBundleStats(stats.compilation);\n\n    if (this._built) {\n      this._reportRebuildMetrics(stats);\n    } else {\n      this._reportBuildMetrics(stats);\n\n      this._built = true;\n    }\n  }\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap('NgBuildAnalyticsPlugin', this._compilation.bind(this, compiler));\n    compiler.hooks.done.tap('NgBuildAnalyticsPlugin', this._done.bind(this));\n  }\n\n}\n\nexports.NgBuildAnalyticsPlugin = NgBuildAnalyticsPlugin;","map":{"version":3,"names":["Object","defineProperty","exports","value","NgBuildAnalyticsPlugin","countOccurrences","core_1","require","webpack_1","webpackAllErrorMessageRe","webpackTsErrorMessageRe","source","match","wordBreak","length","count","re","pos","lastIndexOf","test","AnalyticsBuildStats","constructor","errors","numberOfNgOnInit","numberOfComponents","initialChunkSize","totalChunkCount","totalChunkSize","lazyChunkCount","lazyChunkSize","assetCount","assetSize","polyfillSize","cssSize","_projectRoot","_analytics","_category","_built","_stats","_reset","_getMetrics","stats","startTime","endTime","metrics","analytics","NgCliAnalyticsMetrics","BuildTime","NgOnInitCount","NgComponentCount","InitialChunkSize","TotalChunkCount","TotalChunkSize","LazyChunkCount","LazyChunkSize","AssetCount","AssetSize","PolyfillSize","CssSize","_getDimensions","dimensions","NgCliAnalyticsDimensions","BuildErrors","join","_reportBuildMetrics","event","_reportRebuildMetrics","_checkTsNormalModule","module","originalSource","originalContent","toString","_collectErrors","hasErrors","errObject","compilation","Error","allErrors","message","err","slice","push","_collectBundleStats","_a","_b","chunkAssets","Set","chunk","chunks","rendered","files","size","firstFile","Array","from","getAsset","add","canBeInitial","endsWith","asset","getAssets","has","name","_succeedModule","NormalModule","resource","startsWith","indexOf","_compilation","compiler","hooks","succeedModule","tap","bind","_done","apply","done"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/@angular-devkit/build-angular/src/webpack/plugins/analytics.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NgBuildAnalyticsPlugin = exports.countOccurrences = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst webpack_1 = require(\"webpack\");\nconst webpackAllErrorMessageRe = /^([^(]+)\\(\\d+,\\d\\): (.*)$/gm;\nconst webpackTsErrorMessageRe = /^[^(]+\\(\\d+,\\d\\): error (TS\\d+):/;\n/**\n * Faster than using a RegExp, so we use this to count occurences in source code.\n * @param source The source to look into.\n * @param match The match string to look for.\n * @param wordBreak Whether to check for word break before and after a match was found.\n * @return The number of matches found.\n * @private\n */\nfunction countOccurrences(source, match, wordBreak = false) {\n    if (match.length == 0) {\n        return source.length + 1;\n    }\n    let count = 0;\n    // We condition here so branch prediction happens out of the loop, not in it.\n    if (wordBreak) {\n        const re = /\\w/;\n        for (let pos = source.lastIndexOf(match); pos >= 0; pos = source.lastIndexOf(match, pos)) {\n            if (!(re.test(source[pos - 1] || '') || re.test(source[pos + match.length] || ''))) {\n                count++; // 1 match, AH! AH! AH! 2 matches, AH! AH! AH!\n            }\n            pos -= match.length;\n            if (pos < 0) {\n                break;\n            }\n        }\n    }\n    else {\n        for (let pos = source.lastIndexOf(match); pos >= 0; pos = source.lastIndexOf(match, pos)) {\n            count++; // 1 match, AH! AH! AH! 2 matches, AH! AH! AH!\n            pos -= match.length;\n            if (pos < 0) {\n                break;\n            }\n        }\n    }\n    return count;\n}\nexports.countOccurrences = countOccurrences;\n/**\n * Holder of statistics related to the build.\n */\nclass AnalyticsBuildStats {\n    constructor() {\n        this.errors = [];\n        this.numberOfNgOnInit = 0;\n        this.numberOfComponents = 0;\n        this.initialChunkSize = 0;\n        this.totalChunkCount = 0;\n        this.totalChunkSize = 0;\n        this.lazyChunkCount = 0;\n        this.lazyChunkSize = 0;\n        this.assetCount = 0;\n        this.assetSize = 0;\n        this.polyfillSize = 0;\n        this.cssSize = 0;\n    }\n}\n/**\n * Analytics plugin that reports the analytics we want from the CLI.\n */\nclass NgBuildAnalyticsPlugin {\n    constructor(_projectRoot, _analytics, _category) {\n        this._projectRoot = _projectRoot;\n        this._analytics = _analytics;\n        this._category = _category;\n        this._built = false;\n        this._stats = new AnalyticsBuildStats();\n    }\n    _reset() {\n        this._stats = new AnalyticsBuildStats();\n    }\n    _getMetrics(stats) {\n        const startTime = +(stats.startTime || 0);\n        const endTime = +(stats.endTime || 0);\n        const metrics = [];\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.BuildTime] = endTime - startTime;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.NgOnInitCount] = this._stats.numberOfNgOnInit;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.NgComponentCount] = this._stats.numberOfComponents;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.InitialChunkSize] = this._stats.initialChunkSize;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.TotalChunkCount] = this._stats.totalChunkCount;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.TotalChunkSize] = this._stats.totalChunkSize;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.LazyChunkCount] = this._stats.lazyChunkCount;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.LazyChunkSize] = this._stats.lazyChunkSize;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.AssetCount] = this._stats.assetCount;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.AssetSize] = this._stats.assetSize;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.PolyfillSize] = this._stats.polyfillSize;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.CssSize] = this._stats.cssSize;\n        return metrics;\n    }\n    _getDimensions() {\n        const dimensions = [];\n        if (this._stats.errors.length) {\n            // Adding commas before and after so the regex are easier to define filters.\n            dimensions[core_1.analytics.NgCliAnalyticsDimensions.BuildErrors] = `,${this._stats.errors.join()},`;\n        }\n        return dimensions;\n    }\n    _reportBuildMetrics(stats) {\n        const dimensions = this._getDimensions();\n        const metrics = this._getMetrics(stats);\n        this._analytics.event(this._category, 'build', { dimensions, metrics });\n    }\n    _reportRebuildMetrics(stats) {\n        const dimensions = this._getDimensions();\n        const metrics = this._getMetrics(stats);\n        this._analytics.event(this._category, 'rebuild', { dimensions, metrics });\n    }\n    _checkTsNormalModule(module) {\n        const originalSource = module.originalSource();\n        if (!originalSource) {\n            return;\n        }\n        const originalContent = originalSource.source().toString();\n        // PLEASE REMEMBER:\n        // We're dealing with ES5 _or_ ES2015 JavaScript at this point (we don't know for sure).\n        // Just count the ngOnInit occurences. Comments/Strings/calls occurences should be sparse\n        // so we just consider them within the margin of error. We do break on word break though.\n        this._stats.numberOfNgOnInit += countOccurrences(originalContent, 'ngOnInit', true);\n        // Count the number of `Component({` strings (case sensitive), which happens in __decorate().\n        this._stats.numberOfComponents += countOccurrences(originalContent, 'Component({');\n        // For Ivy we just count ɵcmp.\n        this._stats.numberOfComponents += countOccurrences(originalContent, '.ɵcmp', true);\n        // for ascii_only true\n        this._stats.numberOfComponents += countOccurrences(originalContent, '.\\u0275cmp', true);\n    }\n    _collectErrors(stats) {\n        if (stats.hasErrors()) {\n            for (const errObject of stats.compilation.errors) {\n                if (errObject instanceof Error) {\n                    const allErrors = errObject.message.match(webpackAllErrorMessageRe);\n                    for (const err of [...(allErrors || [])].slice(1)) {\n                        const message = (err.match(webpackTsErrorMessageRe) || [])[1];\n                        if (message) {\n                            // At this point this should be a TS1234.\n                            this._stats.errors.push(message);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    _collectBundleStats(compilation) {\n        var _a, _b;\n        const chunkAssets = new Set();\n        for (const chunk of compilation.chunks) {\n            if (!chunk.rendered || chunk.files.size === 0) {\n                continue;\n            }\n            const firstFile = Array.from(chunk.files)[0];\n            const size = (_b = (_a = compilation.getAsset(firstFile)) === null || _a === void 0 ? void 0 : _a.source.size()) !== null && _b !== void 0 ? _b : 0;\n            chunkAssets.add(firstFile);\n            if (chunk.canBeInitial()) {\n                this._stats.initialChunkSize += size;\n            }\n            else {\n                this._stats.lazyChunkCount++;\n                this._stats.lazyChunkSize += size;\n            }\n            this._stats.totalChunkCount++;\n            this._stats.totalChunkSize += size;\n            if (firstFile.endsWith('.css')) {\n                this._stats.cssSize += size;\n            }\n        }\n        for (const asset of compilation.getAssets()) {\n            // Only count non-JavaScript related files\n            if (chunkAssets.has(asset.name)) {\n                continue;\n            }\n            this._stats.assetSize += asset.source.size();\n            this._stats.assetCount++;\n            if (asset.name == 'polyfill') {\n                this._stats.polyfillSize += asset.source.size();\n            }\n        }\n    }\n    /** **********************************************************************************************\n     * The next section is all the different Webpack hooks for this plugin.\n     */\n    /**\n     * Reports a succeed module.\n     * @private\n     */\n    _succeedModule(module) {\n        // Only report NormalModule instances.\n        if (!(module instanceof webpack_1.NormalModule)) {\n            return;\n        }\n        // Only reports modules that are part of the user's project. We also don't do node_modules.\n        // There is a chance that someone name a file path `hello_node_modules` or something and we\n        // will ignore that file for the purpose of gathering, but we're willing to take the risk.\n        if (!module.resource ||\n            !module.resource.startsWith(this._projectRoot) ||\n            module.resource.indexOf('node_modules') >= 0) {\n            return;\n        }\n        // Check that it's a source file from the project.\n        if (module.resource.endsWith('.ts')) {\n            this._checkTsNormalModule(module);\n        }\n    }\n    _compilation(compiler, compilation) {\n        this._reset();\n        compilation.hooks.succeedModule.tap('NgBuildAnalyticsPlugin', this._succeedModule.bind(this));\n    }\n    _done(stats) {\n        this._collectErrors(stats);\n        this._collectBundleStats(stats.compilation);\n        if (this._built) {\n            this._reportRebuildMetrics(stats);\n        }\n        else {\n            this._reportBuildMetrics(stats);\n            this._built = true;\n        }\n    }\n    apply(compiler) {\n        compiler.hooks.compilation.tap('NgBuildAnalyticsPlugin', this._compilation.bind(this, compiler));\n        compiler.hooks.done.tap('NgBuildAnalyticsPlugin', this._done.bind(this));\n    }\n}\nexports.NgBuildAnalyticsPlugin = NgBuildAnalyticsPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}