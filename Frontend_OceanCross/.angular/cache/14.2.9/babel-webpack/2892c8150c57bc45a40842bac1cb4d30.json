{"ast":null,"code":"/* eslint max-classes-per-file: [\"error\", 2] */\n\n/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_getLocationKeys\"] }] */\nconst flatted = require('flatted');\n\nconst levels = require('./levels');\n\nclass SerDe {\n  constructor() {\n    const deserialise = {\n      __LOG4JS_undefined__: undefined,\n      __LOG4JS_NaN__: Number('abc'),\n      __LOG4JS_Infinity__: 1 / 0,\n      '__LOG4JS_-Infinity__': -1 / 0\n    };\n    this.deMap = deserialise;\n    this.serMap = {};\n    Object.keys(this.deMap).forEach(key => {\n      const value = this.deMap[key];\n      this.serMap[value] = key;\n    });\n  }\n\n  canSerialise(key) {\n    if (typeof key === 'string') return false;\n    return key in this.serMap;\n  }\n\n  serialise(key) {\n    if (this.canSerialise(key)) return this.serMap[key];\n    return key;\n  }\n\n  canDeserialise(key) {\n    return key in this.deMap;\n  }\n\n  deserialise(key) {\n    if (this.canDeserialise(key)) return this.deMap[key];\n    return key;\n  }\n\n}\n\nconst serde = new SerDe();\n/**\n * @name LoggingEvent\n * @namespace Log4js\n */\n\nclass LoggingEvent {\n  /**\n   * Models a logging event.\n   * @constructor\n   * @param {string} categoryName name of category\n   * @param {Log4js.Level} level level of message\n   * @param {Array} data objects to log\n   * @param {Error} [error]\n   * @author Seth Chisamore\n   */\n  constructor(categoryName, level, data, context, location, error) {\n    this.startTime = new Date();\n    this.categoryName = categoryName;\n    this.data = data;\n    this.level = level;\n    this.context = Object.assign({}, context); // eslint-disable-line prefer-object-spread\n\n    this.pid = process.pid;\n    this.error = error;\n\n    if (typeof location !== 'undefined') {\n      if (!location || typeof location !== 'object' || Array.isArray(location)) throw new TypeError('Invalid location type passed to LoggingEvent constructor');\n\n      this.constructor._getLocationKeys().forEach(key => {\n        if (typeof location[key] !== 'undefined') this[key] = location[key];\n      });\n    }\n  }\n  /** @private */\n\n\n  static _getLocationKeys() {\n    return ['fileName', 'lineNumber', 'columnNumber', 'callStack', 'className', 'functionName', 'functionAlias', 'callerName'];\n  }\n\n  serialise() {\n    return flatted.stringify(this, (key, value) => {\n      // JSON.stringify(new Error('test')) returns {}, which is not really useful for us.\n      // The following allows us to serialize errors (semi) correctly.\n      if (value instanceof Error) {\n        // eslint-disable-next-line prefer-object-spread\n        value = Object.assign({\n          message: value.message,\n          stack: value.stack\n        }, value);\n      } // JSON.stringify({a: Number('abc'), b: 1/0, c: -1/0}) returns {a: null, b: null, c: null}.\n      // The following allows us to serialize to NaN, Infinity and -Infinity correctly.\n      // JSON.stringify([undefined]) returns [null].\n      // The following allows us to serialize to undefined correctly.\n\n\n      return serde.serialise(value);\n    });\n  }\n\n  static deserialise(serialised) {\n    let event;\n\n    try {\n      const rehydratedEvent = flatted.parse(serialised, (key, value) => {\n        if (value && value.message && value.stack) {\n          const fakeError = new Error(value);\n          Object.keys(value).forEach(k => {\n            fakeError[k] = value[k];\n          });\n          value = fakeError;\n        }\n\n        return serde.deserialise(value);\n      });\n\n      this._getLocationKeys().forEach(key => {\n        if (typeof rehydratedEvent[key] !== 'undefined') {\n          if (!rehydratedEvent.location) rehydratedEvent.location = {};\n          rehydratedEvent.location[key] = rehydratedEvent[key];\n        }\n      });\n\n      event = new LoggingEvent(rehydratedEvent.categoryName, levels.getLevel(rehydratedEvent.level.levelStr), rehydratedEvent.data, rehydratedEvent.context, rehydratedEvent.location, rehydratedEvent.error);\n      event.startTime = new Date(rehydratedEvent.startTime);\n      event.pid = rehydratedEvent.pid;\n\n      if (rehydratedEvent.cluster) {\n        event.cluster = rehydratedEvent.cluster;\n      }\n    } catch (e) {\n      event = new LoggingEvent('log4js', levels.ERROR, ['Unable to parse log:', serialised, 'because: ', e]);\n    }\n\n    return event;\n  }\n\n}\n\nmodule.exports = LoggingEvent;","map":{"version":3,"names":["flatted","require","levels","SerDe","constructor","deserialise","__LOG4JS_undefined__","undefined","__LOG4JS_NaN__","Number","__LOG4JS_Infinity__","deMap","serMap","Object","keys","forEach","key","value","canSerialise","serialise","canDeserialise","serde","LoggingEvent","categoryName","level","data","context","location","error","startTime","Date","assign","pid","process","Array","isArray","TypeError","_getLocationKeys","stringify","Error","message","stack","serialised","event","rehydratedEvent","parse","fakeError","k","getLevel","levelStr","cluster","e","ERROR","module","exports"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/log4js/lib/LoggingEvent.js"],"sourcesContent":["/* eslint max-classes-per-file: [\"error\", 2] */\n/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_getLocationKeys\"] }] */\n\nconst flatted = require('flatted');\nconst levels = require('./levels');\n\nclass SerDe {\n  constructor() {\n    const deserialise = {\n      __LOG4JS_undefined__: undefined,\n      __LOG4JS_NaN__: Number('abc'),\n      __LOG4JS_Infinity__: 1 / 0,\n      '__LOG4JS_-Infinity__': -1 / 0,\n    };\n    this.deMap = deserialise;\n    this.serMap = {};\n    Object.keys(this.deMap).forEach((key) => {\n      const value = this.deMap[key];\n      this.serMap[value] = key;\n    });\n  }\n\n  canSerialise(key) {\n    if (typeof key === 'string') return false;\n    return key in this.serMap;\n  }\n\n  serialise(key) {\n    if (this.canSerialise(key)) return this.serMap[key];\n    return key;\n  }\n\n  canDeserialise(key) {\n    return key in this.deMap;\n  }\n\n  deserialise(key) {\n    if (this.canDeserialise(key)) return this.deMap[key];\n    return key;\n  }\n}\nconst serde = new SerDe();\n\n/**\n * @name LoggingEvent\n * @namespace Log4js\n */\nclass LoggingEvent {\n  /**\n   * Models a logging event.\n   * @constructor\n   * @param {string} categoryName name of category\n   * @param {Log4js.Level} level level of message\n   * @param {Array} data objects to log\n   * @param {Error} [error]\n   * @author Seth Chisamore\n   */\n  constructor(categoryName, level, data, context, location, error) {\n    this.startTime = new Date();\n    this.categoryName = categoryName;\n    this.data = data;\n    this.level = level;\n    this.context = Object.assign({}, context); // eslint-disable-line prefer-object-spread\n    this.pid = process.pid;\n    this.error = error;\n\n    if (typeof location !== 'undefined') {\n      if (!location || typeof location !== 'object' || Array.isArray(location))\n        throw new TypeError(\n          'Invalid location type passed to LoggingEvent constructor'\n        );\n\n      this.constructor._getLocationKeys().forEach((key) => {\n        if (typeof location[key] !== 'undefined') this[key] = location[key];\n      });\n    }\n  }\n\n  /** @private */\n  static _getLocationKeys() {\n    return [\n      'fileName',\n      'lineNumber',\n      'columnNumber',\n      'callStack',\n      'className',\n      'functionName',\n      'functionAlias',\n      'callerName',\n    ];\n  }\n\n  serialise() {\n    return flatted.stringify(this, (key, value) => {\n      // JSON.stringify(new Error('test')) returns {}, which is not really useful for us.\n      // The following allows us to serialize errors (semi) correctly.\n      if (value instanceof Error) {\n        // eslint-disable-next-line prefer-object-spread\n        value = Object.assign(\n          { message: value.message, stack: value.stack },\n          value\n        );\n      }\n      // JSON.stringify({a: Number('abc'), b: 1/0, c: -1/0}) returns {a: null, b: null, c: null}.\n      // The following allows us to serialize to NaN, Infinity and -Infinity correctly.\n      // JSON.stringify([undefined]) returns [null].\n      // The following allows us to serialize to undefined correctly.\n      return serde.serialise(value);\n    });\n  }\n\n  static deserialise(serialised) {\n    let event;\n    try {\n      const rehydratedEvent = flatted.parse(serialised, (key, value) => {\n        if (value && value.message && value.stack) {\n          const fakeError = new Error(value);\n          Object.keys(value).forEach((k) => {\n            fakeError[k] = value[k];\n          });\n          value = fakeError;\n        }\n        return serde.deserialise(value);\n      });\n      this._getLocationKeys().forEach((key) => {\n        if (typeof rehydratedEvent[key] !== 'undefined') {\n          if (!rehydratedEvent.location) rehydratedEvent.location = {};\n          rehydratedEvent.location[key] = rehydratedEvent[key];\n        }\n      });\n      event = new LoggingEvent(\n        rehydratedEvent.categoryName,\n        levels.getLevel(rehydratedEvent.level.levelStr),\n        rehydratedEvent.data,\n        rehydratedEvent.context,\n        rehydratedEvent.location,\n        rehydratedEvent.error\n      );\n      event.startTime = new Date(rehydratedEvent.startTime);\n      event.pid = rehydratedEvent.pid;\n      if (rehydratedEvent.cluster) {\n        event.cluster = rehydratedEvent.cluster;\n      }\n    } catch (e) {\n      event = new LoggingEvent('log4js', levels.ERROR, [\n        'Unable to parse log:',\n        serialised,\n        'because: ',\n        e,\n      ]);\n    }\n\n    return event;\n  }\n}\n\nmodule.exports = LoggingEvent;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}