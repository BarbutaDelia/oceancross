{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\n\nconst array_flatten_1 = __importDefault(require(\"array-flatten\"));\n\nconst es6_1 = __importDefault(require(\"fast-deep-equal/es6\"));\n\nconst multicast_dns_1 = __importDefault(require(\"multicast-dns\"));\n\nconst dns_equal_1 = __importDefault(require(\"dns-equal\"));\n\nclass Server {\n  constructor(opts, errorCallback) {\n    this.registry = {};\n    this.mdns = (0, multicast_dns_1.default)(opts);\n    this.mdns.setMaxListeners(0);\n    this.mdns.on('query', this.respondToQuery.bind(this));\n    this.errorCallback = errorCallback !== null && errorCallback !== void 0 ? errorCallback : function (err) {\n      throw err;\n    };\n  }\n\n  register(records) {\n    const shouldRegister = record => {\n      var subRegistry = this.registry[record.type];\n\n      if (!subRegistry) {\n        subRegistry = this.registry[record.type] = [];\n      } else if (subRegistry.some(this.isDuplicateRecord(record))) {\n        return;\n      }\n\n      subRegistry.push(record);\n    };\n\n    if (Array.isArray(records)) {\n      records.forEach(shouldRegister);\n    } else {\n      shouldRegister(records);\n    }\n  }\n\n  unregister(records) {\n    const shouldUnregister = record => {\n      let type = record.type;\n\n      if (!(type in this.registry)) {\n        return;\n      }\n\n      this.registry[type] = this.registry[type].filter(i => i.name !== record.name);\n    };\n\n    if (Array.isArray(records)) {\n      records.forEach(shouldUnregister);\n    } else {\n      shouldUnregister(records);\n    }\n  }\n\n  respondToQuery(query) {\n    let self = this;\n    query.questions.forEach(question => {\n      var type = question.type;\n      var name = question.name;\n      var answers = type === 'ANY' ? array_flatten_1.default.depth(Object.keys(self.registry).map(self.recordsFor.bind(self, name)), 1) : self.recordsFor(name, type);\n      if (answers.length === 0) return;\n      var additionals = [];\n\n      if (type !== 'ANY') {\n        answers.forEach(answer => {\n          if (answer.type !== 'PTR') return;\n          additionals = additionals.concat(self.recordsFor(answer.data, 'SRV')).concat(self.recordsFor(answer.data, 'TXT'));\n        });\n        additionals.filter(function (record) {\n          return record.type === 'SRV';\n        }).map(function (record) {\n          return record.data.target;\n        }).filter(this.unique()).forEach(function (target) {\n          additionals = additionals.concat(self.recordsFor(target, 'A')).concat(self.recordsFor(target, 'AAAA'));\n        });\n      }\n\n      self.mdns.respond({\n        answers: answers,\n        additionals: additionals\n      }, err => {\n        if (err) {\n          this.errorCallback(err);\n        }\n      });\n    });\n  }\n\n  recordsFor(name, type) {\n    if (!(type in this.registry)) {\n      return [];\n    }\n\n    return this.registry[type].filter(record => {\n      var _name = ~name.indexOf('.') ? record.name : record.name.split('.')[0];\n\n      return (0, dns_equal_1.default)(_name, name);\n    });\n  }\n\n  isDuplicateRecord(a) {\n    return b => {\n      return a.type === b.type && a.name === b.name && (0, es6_1.default)(a.data, b.data);\n    };\n  }\n\n  unique() {\n    var set = [];\n    return obj => {\n      if (~set.indexOf(obj)) return false;\n      set.push(obj);\n      return true;\n    };\n  }\n\n}\n\nexports.Server = Server;\nexports.default = Server;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Server","array_flatten_1","require","es6_1","multicast_dns_1","dns_equal_1","constructor","opts","errorCallback","registry","mdns","default","setMaxListeners","on","respondToQuery","bind","err","register","records","shouldRegister","record","subRegistry","type","some","isDuplicateRecord","push","Array","isArray","forEach","unregister","shouldUnregister","filter","i","name","query","self","questions","question","answers","depth","keys","map","recordsFor","length","additionals","answer","concat","data","target","unique","respond","_name","indexOf","split","a","b","set","obj"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/bonjour-service/dist/lib/mdns-server.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Server = void 0;\nconst array_flatten_1 = __importDefault(require(\"array-flatten\"));\nconst es6_1 = __importDefault(require(\"fast-deep-equal/es6\"));\nconst multicast_dns_1 = __importDefault(require(\"multicast-dns\"));\nconst dns_equal_1 = __importDefault(require(\"dns-equal\"));\nclass Server {\n    constructor(opts, errorCallback) {\n        this.registry = {};\n        this.mdns = (0, multicast_dns_1.default)(opts);\n        this.mdns.setMaxListeners(0);\n        this.mdns.on('query', this.respondToQuery.bind(this));\n        this.errorCallback = errorCallback !== null && errorCallback !== void 0 ? errorCallback : function (err) { throw err; };\n    }\n    register(records) {\n        const shouldRegister = (record) => {\n            var subRegistry = this.registry[record.type];\n            if (!subRegistry) {\n                subRegistry = this.registry[record.type] = [];\n            }\n            else if (subRegistry.some(this.isDuplicateRecord(record))) {\n                return;\n            }\n            subRegistry.push(record);\n        };\n        if (Array.isArray(records)) {\n            records.forEach(shouldRegister);\n        }\n        else {\n            shouldRegister(records);\n        }\n    }\n    unregister(records) {\n        const shouldUnregister = (record) => {\n            let type = record.type;\n            if (!(type in this.registry)) {\n                return;\n            }\n            this.registry[type] = this.registry[type].filter((i) => i.name !== record.name);\n        };\n        if (Array.isArray(records)) {\n            records.forEach(shouldUnregister);\n        }\n        else {\n            shouldUnregister(records);\n        }\n    }\n    respondToQuery(query) {\n        let self = this;\n        query.questions.forEach((question) => {\n            var type = question.type;\n            var name = question.name;\n            var answers = type === 'ANY'\n                ? array_flatten_1.default.depth(Object.keys(self.registry).map(self.recordsFor.bind(self, name)), 1)\n                : self.recordsFor(name, type);\n            if (answers.length === 0)\n                return;\n            var additionals = [];\n            if (type !== 'ANY') {\n                answers.forEach((answer) => {\n                    if (answer.type !== 'PTR')\n                        return;\n                    additionals = additionals\n                        .concat(self.recordsFor(answer.data, 'SRV'))\n                        .concat(self.recordsFor(answer.data, 'TXT'));\n                });\n                additionals\n                    .filter(function (record) {\n                    return record.type === 'SRV';\n                })\n                    .map(function (record) {\n                    return record.data.target;\n                })\n                    .filter(this.unique())\n                    .forEach(function (target) {\n                    additionals = additionals\n                        .concat(self.recordsFor(target, 'A'))\n                        .concat(self.recordsFor(target, 'AAAA'));\n                });\n            }\n            self.mdns.respond({ answers: answers, additionals: additionals }, (err) => {\n                if (err) {\n                    this.errorCallback(err);\n                }\n            });\n        });\n    }\n    recordsFor(name, type) {\n        if (!(type in this.registry)) {\n            return [];\n        }\n        return this.registry[type].filter((record) => {\n            var _name = ~name.indexOf('.') ? record.name : record.name.split('.')[0];\n            return (0, dns_equal_1.default)(_name, name);\n        });\n    }\n    isDuplicateRecord(a) {\n        return (b) => {\n            return a.type === b.type &&\n                a.name === b.name &&\n                (0, es6_1.default)(a.data, b.data);\n        };\n    }\n    unique() {\n        var set = [];\n        return (obj) => {\n            if (~set.indexOf(obj))\n                return false;\n            set.push(obj);\n            return true;\n        };\n    }\n}\nexports.Server = Server;\nexports.default = Server;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}