{"ast":null,"code":"const configuration = require('./configuration');\n\nconst validColours = ['white', 'grey', 'black', 'blue', 'cyan', 'green', 'magenta', 'red', 'yellow'];\n\nclass Level {\n  constructor(level, levelStr, colour) {\n    this.level = level;\n    this.levelStr = levelStr;\n    this.colour = colour;\n  }\n\n  toString() {\n    return this.levelStr;\n  }\n  /**\n   * converts given String to corresponding Level\n   * @param {(Level|string)} sArg -- String value of Level OR Log4js.Level\n   * @param {Level} [defaultLevel] -- default Level, if no String representation\n   * @return {Level}\n   */\n\n\n  static getLevel(sArg, defaultLevel) {\n    if (!sArg) {\n      return defaultLevel;\n    }\n\n    if (sArg instanceof Level) {\n      return sArg;\n    } // a json-serialised level won't be an instance of Level (see issue #768)\n\n\n    if (sArg instanceof Object && sArg.levelStr) {\n      sArg = sArg.levelStr;\n    }\n\n    return Level[sArg.toString().toUpperCase()] || defaultLevel;\n  }\n\n  static addLevels(customLevels) {\n    if (customLevels) {\n      const levels = Object.keys(customLevels);\n      levels.forEach(l => {\n        const levelStr = l.toUpperCase();\n        Level[levelStr] = new Level(customLevels[l].value, levelStr, customLevels[l].colour);\n        const existingLevelIndex = Level.levels.findIndex(lvl => lvl.levelStr === levelStr);\n\n        if (existingLevelIndex > -1) {\n          Level.levels[existingLevelIndex] = Level[levelStr];\n        } else {\n          Level.levels.push(Level[levelStr]);\n        }\n      });\n      Level.levels.sort((a, b) => a.level - b.level);\n    }\n  }\n\n  isLessThanOrEqualTo(otherLevel) {\n    if (typeof otherLevel === 'string') {\n      otherLevel = Level.getLevel(otherLevel);\n    }\n\n    return this.level <= otherLevel.level;\n  }\n\n  isGreaterThanOrEqualTo(otherLevel) {\n    if (typeof otherLevel === 'string') {\n      otherLevel = Level.getLevel(otherLevel);\n    }\n\n    return this.level >= otherLevel.level;\n  }\n\n  isEqualTo(otherLevel) {\n    if (typeof otherLevel === 'string') {\n      otherLevel = Level.getLevel(otherLevel);\n    }\n\n    return this.level === otherLevel.level;\n  }\n\n}\n\nLevel.levels = [];\nLevel.addLevels({\n  ALL: {\n    value: Number.MIN_VALUE,\n    colour: 'grey'\n  },\n  TRACE: {\n    value: 5000,\n    colour: 'blue'\n  },\n  DEBUG: {\n    value: 10000,\n    colour: 'cyan'\n  },\n  INFO: {\n    value: 20000,\n    colour: 'green'\n  },\n  WARN: {\n    value: 30000,\n    colour: 'yellow'\n  },\n  ERROR: {\n    value: 40000,\n    colour: 'red'\n  },\n  FATAL: {\n    value: 50000,\n    colour: 'magenta'\n  },\n  MARK: {\n    value: 9007199254740992,\n    colour: 'grey'\n  },\n  // 2^53\n  OFF: {\n    value: Number.MAX_VALUE,\n    colour: 'grey'\n  }\n});\nconfiguration.addListener(config => {\n  const levelConfig = config.levels;\n\n  if (levelConfig) {\n    configuration.throwExceptionIf(config, configuration.not(configuration.anObject(levelConfig)), 'levels must be an object');\n    const newLevels = Object.keys(levelConfig);\n    newLevels.forEach(l => {\n      configuration.throwExceptionIf(config, configuration.not(configuration.validIdentifier(l)), `level name \"${l}\" is not a valid identifier (must start with a letter, only contain A-Z,a-z,0-9,_)`);\n      configuration.throwExceptionIf(config, configuration.not(configuration.anObject(levelConfig[l])), `level \"${l}\" must be an object`);\n      configuration.throwExceptionIf(config, configuration.not(levelConfig[l].value), `level \"${l}\" must have a 'value' property`);\n      configuration.throwExceptionIf(config, configuration.not(configuration.anInteger(levelConfig[l].value)), `level \"${l}\".value must have an integer value`);\n      configuration.throwExceptionIf(config, configuration.not(levelConfig[l].colour), `level \"${l}\" must have a 'colour' property`);\n      configuration.throwExceptionIf(config, configuration.not(validColours.indexOf(levelConfig[l].colour) > -1), `level \"${l}\".colour must be one of ${validColours.join(', ')}`);\n    });\n  }\n});\nconfiguration.addListener(config => {\n  Level.addLevels(config.levels);\n});\nmodule.exports = Level;","map":{"version":3,"names":["configuration","require","validColours","Level","constructor","level","levelStr","colour","toString","getLevel","sArg","defaultLevel","Object","toUpperCase","addLevels","customLevels","levels","keys","forEach","l","value","existingLevelIndex","findIndex","lvl","push","sort","a","b","isLessThanOrEqualTo","otherLevel","isGreaterThanOrEqualTo","isEqualTo","ALL","Number","MIN_VALUE","TRACE","DEBUG","INFO","WARN","ERROR","FATAL","MARK","OFF","MAX_VALUE","addListener","config","levelConfig","throwExceptionIf","not","anObject","newLevels","validIdentifier","anInteger","indexOf","join","module","exports"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/log4js/lib/levels.js"],"sourcesContent":["const configuration = require('./configuration');\n\nconst validColours = [\n  'white',\n  'grey',\n  'black',\n  'blue',\n  'cyan',\n  'green',\n  'magenta',\n  'red',\n  'yellow',\n];\n\nclass Level {\n  constructor(level, levelStr, colour) {\n    this.level = level;\n    this.levelStr = levelStr;\n    this.colour = colour;\n  }\n\n  toString() {\n    return this.levelStr;\n  }\n\n  /**\n   * converts given String to corresponding Level\n   * @param {(Level|string)} sArg -- String value of Level OR Log4js.Level\n   * @param {Level} [defaultLevel] -- default Level, if no String representation\n   * @return {Level}\n   */\n  static getLevel(sArg, defaultLevel) {\n    if (!sArg) {\n      return defaultLevel;\n    }\n\n    if (sArg instanceof Level) {\n      return sArg;\n    }\n\n    // a json-serialised level won't be an instance of Level (see issue #768)\n    if (sArg instanceof Object && sArg.levelStr) {\n      sArg = sArg.levelStr;\n    }\n\n    return Level[sArg.toString().toUpperCase()] || defaultLevel;\n  }\n\n  static addLevels(customLevels) {\n    if (customLevels) {\n      const levels = Object.keys(customLevels);\n      levels.forEach((l) => {\n        const levelStr = l.toUpperCase();\n        Level[levelStr] = new Level(\n          customLevels[l].value,\n          levelStr,\n          customLevels[l].colour\n        );\n        const existingLevelIndex = Level.levels.findIndex(\n          (lvl) => lvl.levelStr === levelStr\n        );\n        if (existingLevelIndex > -1) {\n          Level.levels[existingLevelIndex] = Level[levelStr];\n        } else {\n          Level.levels.push(Level[levelStr]);\n        }\n      });\n      Level.levels.sort((a, b) => a.level - b.level);\n    }\n  }\n\n  isLessThanOrEqualTo(otherLevel) {\n    if (typeof otherLevel === 'string') {\n      otherLevel = Level.getLevel(otherLevel);\n    }\n    return this.level <= otherLevel.level;\n  }\n\n  isGreaterThanOrEqualTo(otherLevel) {\n    if (typeof otherLevel === 'string') {\n      otherLevel = Level.getLevel(otherLevel);\n    }\n    return this.level >= otherLevel.level;\n  }\n\n  isEqualTo(otherLevel) {\n    if (typeof otherLevel === 'string') {\n      otherLevel = Level.getLevel(otherLevel);\n    }\n    return this.level === otherLevel.level;\n  }\n}\n\nLevel.levels = [];\nLevel.addLevels({\n  ALL: { value: Number.MIN_VALUE, colour: 'grey' },\n  TRACE: { value: 5000, colour: 'blue' },\n  DEBUG: { value: 10000, colour: 'cyan' },\n  INFO: { value: 20000, colour: 'green' },\n  WARN: { value: 30000, colour: 'yellow' },\n  ERROR: { value: 40000, colour: 'red' },\n  FATAL: { value: 50000, colour: 'magenta' },\n  MARK: { value: 9007199254740992, colour: 'grey' }, // 2^53\n  OFF: { value: Number.MAX_VALUE, colour: 'grey' },\n});\n\nconfiguration.addListener((config) => {\n  const levelConfig = config.levels;\n  if (levelConfig) {\n    configuration.throwExceptionIf(\n      config,\n      configuration.not(configuration.anObject(levelConfig)),\n      'levels must be an object'\n    );\n    const newLevels = Object.keys(levelConfig);\n    newLevels.forEach((l) => {\n      configuration.throwExceptionIf(\n        config,\n        configuration.not(configuration.validIdentifier(l)),\n        `level name \"${l}\" is not a valid identifier (must start with a letter, only contain A-Z,a-z,0-9,_)`\n      );\n      configuration.throwExceptionIf(\n        config,\n        configuration.not(configuration.anObject(levelConfig[l])),\n        `level \"${l}\" must be an object`\n      );\n      configuration.throwExceptionIf(\n        config,\n        configuration.not(levelConfig[l].value),\n        `level \"${l}\" must have a 'value' property`\n      );\n      configuration.throwExceptionIf(\n        config,\n        configuration.not(configuration.anInteger(levelConfig[l].value)),\n        `level \"${l}\".value must have an integer value`\n      );\n      configuration.throwExceptionIf(\n        config,\n        configuration.not(levelConfig[l].colour),\n        `level \"${l}\" must have a 'colour' property`\n      );\n      configuration.throwExceptionIf(\n        config,\n        configuration.not(validColours.indexOf(levelConfig[l].colour) > -1),\n        `level \"${l}\".colour must be one of ${validColours.join(', ')}`\n      );\n    });\n  }\n});\n\nconfiguration.addListener((config) => {\n  Level.addLevels(config.levels);\n});\n\nmodule.exports = Level;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}