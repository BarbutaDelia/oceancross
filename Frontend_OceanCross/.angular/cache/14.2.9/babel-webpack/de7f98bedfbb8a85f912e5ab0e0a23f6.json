{"ast":null,"code":"/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nconst os = require('os');\n\nconst path = require('path');\n\nconst postcss = require('postcss');\n\nconst fileProtocol = require('../file-protocol');\n\nconst algerbra = require('../position-algerbra');\n\nconst ORPHAN_CR_REGEX = /\\r(?!\\n)(.|\\n)?/g;\n/**\n * Process the given CSS content into reworked CSS content.\n *\n * @param {string} sourceFile The absolute path of the file being processed\n * @param {string} sourceContent CSS content without source-map\n * @param {{outputSourceMap: boolean, transformDeclaration:function, absSourceMap:object,\n *        sourceMapConsumer:object, removeCR:boolean}} params Named parameters\n * @return {{content: string, map: object}} Reworked CSS and optional source-map\n */\n\nfunction process(sourceFile, sourceContent, params) {\n  // #107 libsass emits orphan CR not considered newline, postcss does consider newline (content vs source-map mismatch)\n  const correctedContent = params.removeCR && os.EOL !== '\\r' ? sourceContent.replace(ORPHAN_CR_REGEX, ' $1') : sourceContent; // IMPORTANT - prepend file protocol to all sources to avoid problems with source map\n\n  const plugin = Object.assign(() => ({\n    postcssPlugin: 'postcss-resolve-url',\n    prepare: () => {\n      const visited = new Set();\n      /**\n       * Given an apparent position find the directory of the original file.\n       *\n       * @param startPosApparent {{line: number, column: number}}\n       * @returns {false|string} Directory of original file or false on invalid\n       */\n\n      const positionToOriginalDirectory = startPosApparent => {\n        // reverse the original source-map to find the original source file before transpilation\n        const startPosOriginal = !!params.sourceMapConsumer && params.sourceMapConsumer.originalPositionFor(startPosApparent); // we require a valid directory for the specified file\n\n        const directory = !!startPosOriginal && !!startPosOriginal.source && fileProtocol.remove(path.dirname(startPosOriginal.source));\n        return directory;\n      };\n\n      return {\n        Declaration: declaration => {\n          var prefix,\n              isValid = declaration.value && declaration.value.indexOf('url') >= 0 && !visited.has(declaration);\n\n          if (isValid) {\n            prefix = declaration.prop + declaration.raws.between;\n            declaration.value = params.transformDeclaration(declaration.value, getPathsAtChar);\n            visited.add(declaration);\n          }\n          /**\n           * Create a hash of base path strings.\n           *\n           * Position in the declaration is supported by postcss at the position of the url() statement.\n           *\n           * @param {number} index Index in the declaration value at which to evaluate\n           * @throws Error on invalid source map\n           * @returns {{subString:string, value:string, property:string, selector:string}} Hash of base path strings\n           */\n\n\n          function getPathsAtChar(index) {\n            var subString = declaration.value.slice(0, index),\n                posSelector = algerbra.sanitise(declaration.parent.source.start),\n                posProperty = algerbra.sanitise(declaration.source.start),\n                posValue = algerbra.add([posProperty, algerbra.strToOffset(prefix)]),\n                posSubString = algerbra.add([posValue, algerbra.strToOffset(subString)]);\n            var result = {\n              subString: positionToOriginalDirectory(posSubString),\n              value: positionToOriginalDirectory(posValue),\n              property: positionToOriginalDirectory(posProperty),\n              selector: positionToOriginalDirectory(posSelector)\n            };\n            var isValid = [result.subString, result.value, result.property, result.selector].every(Boolean);\n\n            if (isValid) {\n              return result;\n            } else if (params.sourceMapConsumer) {\n              throw new Error('source-map information is not available at url() declaration ' + (ORPHAN_CR_REGEX.test(sourceContent) ? '(found orphan CR, try removeCR option)' : '(no orphan CR found)'));\n            } else {\n              throw new Error('a valid source-map is not present (ensure preceding loaders output a source-map)');\n            }\n          }\n        }\n      };\n    }\n  }), {\n    postcss: true\n  }); // IMPORTANT - prepend file protocol to all sources to avoid problems with source map\n\n  return postcss([plugin]).process(correctedContent, {\n    from: fileProtocol.prepend(sourceFile),\n    map: params.outputSourceMap && {\n      prev: !!params.absSourceMap && fileProtocol.prepend(params.absSourceMap),\n      inline: false,\n      annotation: false,\n      sourcesContent: true // #98 sourcesContent missing from output map\n\n    }\n  }).then(({\n    css,\n    map\n  }) => ({\n    content: css,\n    map: params.outputSourceMap ? fileProtocol.remove(map.toJSON()) : null\n  }));\n}\n\nmodule.exports = process;","map":{"version":3,"names":["os","require","path","postcss","fileProtocol","algerbra","ORPHAN_CR_REGEX","process","sourceFile","sourceContent","params","correctedContent","removeCR","EOL","replace","plugin","Object","assign","postcssPlugin","prepare","visited","Set","positionToOriginalDirectory","startPosApparent","startPosOriginal","sourceMapConsumer","originalPositionFor","directory","source","remove","dirname","Declaration","declaration","prefix","isValid","value","indexOf","has","prop","raws","between","transformDeclaration","getPathsAtChar","add","index","subString","slice","posSelector","sanitise","parent","start","posProperty","posValue","strToOffset","posSubString","result","property","selector","every","Boolean","Error","test","from","prepend","map","outputSourceMap","prev","absSourceMap","inline","annotation","sourcesContent","then","css","content","toJSON","module","exports"],"sources":["/Users/deliabarbuta/Documents/An4Sem1/PAW/Proiect/proiect-paw-tadam/Frontend_OceanCross/node_modules/resolve-url-loader/lib/engine/postcss.js"],"sourcesContent":["/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nconst os = require('os');\nconst path = require('path');\nconst postcss = require('postcss');\n\nconst fileProtocol = require('../file-protocol');\nconst algerbra = require('../position-algerbra');\n\nconst ORPHAN_CR_REGEX = /\\r(?!\\n)(.|\\n)?/g;\n\n/**\n * Process the given CSS content into reworked CSS content.\n *\n * @param {string} sourceFile The absolute path of the file being processed\n * @param {string} sourceContent CSS content without source-map\n * @param {{outputSourceMap: boolean, transformDeclaration:function, absSourceMap:object,\n *        sourceMapConsumer:object, removeCR:boolean}} params Named parameters\n * @return {{content: string, map: object}} Reworked CSS and optional source-map\n */\nfunction process(sourceFile, sourceContent, params) {\n  // #107 libsass emits orphan CR not considered newline, postcss does consider newline (content vs source-map mismatch)\n  const correctedContent = params.removeCR && (os.EOL !== '\\r') ?\n    sourceContent.replace(ORPHAN_CR_REGEX, ' $1') :\n    sourceContent;\n\n  // IMPORTANT - prepend file protocol to all sources to avoid problems with source map\n  const plugin = Object.assign(\n    () => ({\n      postcssPlugin: 'postcss-resolve-url',\n      prepare: () => {\n        const visited = new Set();\n\n        /**\n         * Given an apparent position find the directory of the original file.\n         *\n         * @param startPosApparent {{line: number, column: number}}\n         * @returns {false|string} Directory of original file or false on invalid\n         */\n        const positionToOriginalDirectory = (startPosApparent) => {\n          // reverse the original source-map to find the original source file before transpilation\n          const startPosOriginal =\n            !!params.sourceMapConsumer &&\n            params.sourceMapConsumer.originalPositionFor(startPosApparent);\n\n          // we require a valid directory for the specified file\n          const directory =\n            !!startPosOriginal &&\n            !!startPosOriginal.source &&\n            fileProtocol.remove(path.dirname(startPosOriginal.source));\n\n          return directory;\n        };\n\n        return {\n          Declaration: (declaration) => {\n            var prefix,\n              isValid = declaration.value && (declaration.value.indexOf('url') >= 0) && !visited.has(declaration);\n            if (isValid) {\n              prefix = declaration.prop + declaration.raws.between;\n              declaration.value = params.transformDeclaration(declaration.value, getPathsAtChar);\n              visited.add(declaration);\n            }\n\n            /**\n             * Create a hash of base path strings.\n             *\n             * Position in the declaration is supported by postcss at the position of the url() statement.\n             *\n             * @param {number} index Index in the declaration value at which to evaluate\n             * @throws Error on invalid source map\n             * @returns {{subString:string, value:string, property:string, selector:string}} Hash of base path strings\n             */\n            function getPathsAtChar(index) {\n              var subString    = declaration.value.slice(0, index),\n                posSelector  = algerbra.sanitise(declaration.parent.source.start),\n                posProperty  = algerbra.sanitise(declaration.source.start),\n                posValue     = algerbra.add([posProperty, algerbra.strToOffset(prefix)]),\n                posSubString = algerbra.add([posValue, algerbra.strToOffset(subString)]);\n\n              var result = {\n                subString: positionToOriginalDirectory(posSubString),\n                value    : positionToOriginalDirectory(posValue),\n                property : positionToOriginalDirectory(posProperty),\n                selector : positionToOriginalDirectory(posSelector)\n              };\n\n              var isValid = [result.subString, result.value, result.property, result.selector].every(Boolean);\n              if (isValid) {\n                return result;\n              }\n              else if (params.sourceMapConsumer) {\n                throw new Error(\n                  'source-map information is not available at url() declaration ' + (\n                    ORPHAN_CR_REGEX.test(sourceContent) ?\n                      '(found orphan CR, try removeCR option)' :\n                      '(no orphan CR found)'\n                  )\n                );\n              } else {\n                throw new Error('a valid source-map is not present (ensure preceding loaders output a source-map)');\n              }\n            }\n          }\n        };\n      }\n    }),\n    { postcss: true }\n  );\n\n  // IMPORTANT - prepend file protocol to all sources to avoid problems with source map\n  return postcss([plugin])\n    .process(correctedContent, {\n      from: fileProtocol.prepend(sourceFile),\n      map : params.outputSourceMap && {\n        prev          : !!params.absSourceMap && fileProtocol.prepend(params.absSourceMap),\n        inline        : false,\n        annotation    : false,\n        sourcesContent: true  // #98 sourcesContent missing from output map\n      }\n    })\n    .then(({css, map}) => ({\n      content: css,\n      map    : params.outputSourceMap ? fileProtocol.remove(map.toJSON()) : null\n    }));\n}\n\nmodule.exports = process;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB;;AAEA,MAAMG,YAAY,GAAGH,OAAO,CAAC,kBAAD,CAA5B;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,sBAAD,CAAxB;;AAEA,MAAMK,eAAe,GAAG,kBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,UAAjB,EAA6BC,aAA7B,EAA4CC,MAA5C,EAAoD;EAClD;EACA,MAAMC,gBAAgB,GAAGD,MAAM,CAACE,QAAP,IAAoBZ,EAAE,CAACa,GAAH,KAAW,IAA/B,GACvBJ,aAAa,CAACK,OAAd,CAAsBR,eAAtB,EAAuC,KAAvC,CADuB,GAEvBG,aAFF,CAFkD,CAMlD;;EACA,MAAMM,MAAM,GAAGC,MAAM,CAACC,MAAP,CACb,OAAO;IACLC,aAAa,EAAE,qBADV;IAELC,OAAO,EAAE,MAAM;MACb,MAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;MAEA;AACR;AACA;AACA;AACA;AACA;;MACQ,MAAMC,2BAA2B,GAAIC,gBAAD,IAAsB;QACxD;QACA,MAAMC,gBAAgB,GACpB,CAAC,CAACd,MAAM,CAACe,iBAAT,IACAf,MAAM,CAACe,iBAAP,CAAyBC,mBAAzB,CAA6CH,gBAA7C,CAFF,CAFwD,CAMxD;;QACA,MAAMI,SAAS,GACb,CAAC,CAACH,gBAAF,IACA,CAAC,CAACA,gBAAgB,CAACI,MADnB,IAEAxB,YAAY,CAACyB,MAAb,CAAoB3B,IAAI,CAAC4B,OAAL,CAAaN,gBAAgB,CAACI,MAA9B,CAApB,CAHF;QAKA,OAAOD,SAAP;MACD,CAbD;;MAeA,OAAO;QACLI,WAAW,EAAGC,WAAD,IAAiB;UAC5B,IAAIC,MAAJ;UAAA,IACEC,OAAO,GAAGF,WAAW,CAACG,KAAZ,IAAsBH,WAAW,CAACG,KAAZ,CAAkBC,OAAlB,CAA0B,KAA1B,KAAoC,CAA1D,IAAgE,CAAChB,OAAO,CAACiB,GAAR,CAAYL,WAAZ,CAD7E;;UAEA,IAAIE,OAAJ,EAAa;YACXD,MAAM,GAAGD,WAAW,CAACM,IAAZ,GAAmBN,WAAW,CAACO,IAAZ,CAAiBC,OAA7C;YACAR,WAAW,CAACG,KAAZ,GAAoBzB,MAAM,CAAC+B,oBAAP,CAA4BT,WAAW,CAACG,KAAxC,EAA+CO,cAA/C,CAApB;YACAtB,OAAO,CAACuB,GAAR,CAAYX,WAAZ;UACD;UAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACY,SAASU,cAAT,CAAwBE,KAAxB,EAA+B;YAC7B,IAAIC,SAAS,GAAMb,WAAW,CAACG,KAAZ,CAAkBW,KAAlB,CAAwB,CAAxB,EAA2BF,KAA3B,CAAnB;YAAA,IACEG,WAAW,GAAI1C,QAAQ,CAAC2C,QAAT,CAAkBhB,WAAW,CAACiB,MAAZ,CAAmBrB,MAAnB,CAA0BsB,KAA5C,CADjB;YAAA,IAEEC,WAAW,GAAI9C,QAAQ,CAAC2C,QAAT,CAAkBhB,WAAW,CAACJ,MAAZ,CAAmBsB,KAArC,CAFjB;YAAA,IAGEE,QAAQ,GAAO/C,QAAQ,CAACsC,GAAT,CAAa,CAACQ,WAAD,EAAc9C,QAAQ,CAACgD,WAAT,CAAqBpB,MAArB,CAAd,CAAb,CAHjB;YAAA,IAIEqB,YAAY,GAAGjD,QAAQ,CAACsC,GAAT,CAAa,CAACS,QAAD,EAAW/C,QAAQ,CAACgD,WAAT,CAAqBR,SAArB,CAAX,CAAb,CAJjB;YAMA,IAAIU,MAAM,GAAG;cACXV,SAAS,EAAEvB,2BAA2B,CAACgC,YAAD,CAD3B;cAEXnB,KAAK,EAAMb,2BAA2B,CAAC8B,QAAD,CAF3B;cAGXI,QAAQ,EAAGlC,2BAA2B,CAAC6B,WAAD,CAH3B;cAIXM,QAAQ,EAAGnC,2BAA2B,CAACyB,WAAD;YAJ3B,CAAb;YAOA,IAAIb,OAAO,GAAG,CAACqB,MAAM,CAACV,SAAR,EAAmBU,MAAM,CAACpB,KAA1B,EAAiCoB,MAAM,CAACC,QAAxC,EAAkDD,MAAM,CAACE,QAAzD,EAAmEC,KAAnE,CAAyEC,OAAzE,CAAd;;YACA,IAAIzB,OAAJ,EAAa;cACX,OAAOqB,MAAP;YACD,CAFD,MAGK,IAAI7C,MAAM,CAACe,iBAAX,EAA8B;cACjC,MAAM,IAAImC,KAAJ,CACJ,mEACEtD,eAAe,CAACuD,IAAhB,CAAqBpD,aAArB,IACE,wCADF,GAEE,sBAHJ,CADI,CAAN;YAOD,CARI,MAQE;cACL,MAAM,IAAImD,KAAJ,CAAU,kFAAV,CAAN;YACD;UACF;QACF;MAjDI,CAAP;IAmDD;EA7EI,CAAP,CADa,EAgFb;IAAEzD,OAAO,EAAE;EAAX,CAhFa,CAAf,CAPkD,CA0FlD;;EACA,OAAOA,OAAO,CAAC,CAACY,MAAD,CAAD,CAAP,CACJR,OADI,CACII,gBADJ,EACsB;IACzBmD,IAAI,EAAE1D,YAAY,CAAC2D,OAAb,CAAqBvD,UAArB,CADmB;IAEzBwD,GAAG,EAAGtD,MAAM,CAACuD,eAAP,IAA0B;MAC9BC,IAAI,EAAY,CAAC,CAACxD,MAAM,CAACyD,YAAT,IAAyB/D,YAAY,CAAC2D,OAAb,CAAqBrD,MAAM,CAACyD,YAA5B,CADX;MAE9BC,MAAM,EAAU,KAFc;MAG9BC,UAAU,EAAM,KAHc;MAI9BC,cAAc,EAAE,IAJc,CAIR;;IAJQ;EAFP,CADtB,EAUJC,IAVI,CAUC,CAAC;IAACC,GAAD;IAAMR;EAAN,CAAD,MAAiB;IACrBS,OAAO,EAAED,GADY;IAErBR,GAAG,EAAMtD,MAAM,CAACuD,eAAP,GAAyB7D,YAAY,CAACyB,MAAb,CAAoBmC,GAAG,CAACU,MAAJ,EAApB,CAAzB,GAA6D;EAFjD,CAAjB,CAVD,CAAP;AAcD;;AAEDC,MAAM,CAACC,OAAP,GAAiBrE,OAAjB"},"metadata":{},"sourceType":"script"}